<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-06-04T05:55:43.554Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何建立企業內部 NuGet 與 NPM Server ?]]></title>
    <link href="http://oomusou.io/docker/proget/"/>
    <id>http://oomusou.io/docker/proget/</id>
    <published>2018-06-02T12:23:43.000Z</published>
    <updated>2018-06-04T05:55:43.554Z</updated>
    <content type="html"><![CDATA[<p>企業若以 .NET Core Web API + Angular 為解決方案，不免需要在企業內部自建 NuGet 與 NPM server，透過 Docker 安裝 ProGet，讓我們只要安裝一套系統，就同時滿足 NuGet 與 NPM 需求。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>ProGet 5.0.12<br>ProsgreSQL 9.5</p>
<h2 id="建立_Docker_Compose">建立 Docker Compose</h2><hr>
<p>由於 ProGet 需要搭配 PostgreSQL 才能正常運作，對於這種一次需要同時使用多個 service 的情境，特別適合使用 Docker Compose。</p>
<p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;&#10;services:&#10;  proget-postgres:&#10;    image: postgres:9.5&#10;    container_name: proget-postgres&#10;    volumes:&#10;      - ./localtime:/etc/localtime:ro&#10;      - ~/proget/data:/var/lib/postgresql/data&#10;    restart: unless-stopped&#10;&#10;  proget:&#10;    image: inedo/proget:latest&#10;    container_name: proget&#10;    volumes:&#10;      - ./localtime:/etc/localtime:ro&#10;      - ~/proget/packages:/var/proget/packages&#10;      - ~/proget/extensions:/var/proget/extensions&#10;    expose:&#10;      - &#34;80&#34;&#10;    ports:&#10;      - &#34;8624:80&#34;&#10;    restart: unless-stopped</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proget-postgres:&#10;  image: postgres:9.5&#10;  container_name: proget-postgres&#10;  volumes:&#10;    - ./localtime:/etc/localtime:ro&#10;    - ~/proget/data:/var/lib/postgresql/data&#10;  restart: unless-stopped</span><br></pre></td></tr></table></figure>
<p>由於同時要啟動 PostgreSQL 與 ProGet 兩個 service，因此先建立 <code>proget-postgres</code> service。</p>
<blockquote>
<p>當可以可以取名為 <code>postgres</code>，但考量自己 .NET Core 已經在使用 PostgreSQL，而這個 container 又只被 ProGet 使用，故取名為 <code>project-postgres</code>，避免與原本 <code>postgres</code> container 衝突</p>
</blockquote>
<p>11 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proget:&#10;  image: inedo/proget:latest&#10;  container_name: proget&#10;  volumes:&#10;    - ./localtime:/etc/localtime:ro&#10;    - ~/proget/packages:/var/proget/packages&#10;    - ~/proget/extensions:/var/proget/extensions&#10;  links:&#10;    - proget-postgres&#10;  expose:&#10;    - &#34;80&#34;&#10;  ports:&#10;    - &#34;8624:80&#34;&#10;  restart: unless-stopped</span><br></pre></td></tr></table></figure>
<p>ProGet 本身的 service。</p>
<p>第 4 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: postgres:9.5</span><br></pre></td></tr></table></figure>
<p>使用 <code>image</code> 設定所使用的 Docker image。</p>
<p>根據 ProGet 官方文件  <a href="https://inedo.com/support/documentation/proget/installation/installation-guide/linux-docker" target="_blank" rel="external">ProGet Linux Installation Guide</a>，特別指定要使用 ProsgreSQL 9.5，因此就依照 ProGet 官方建議。</p>
<p>第 5 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: proget-postgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 container 的名稱。</p>
<blockquote>
<p><code>docker-compose.yml</code> 的 <code>container_name</code> 相當於 <code>docker run</code> 的 <code>--name</code></p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - ./localtime:/etc/localtime:ro&#10;  - ~/proget/data:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumns</code> 設定 container 與 Host OS 要共享的目錄。</p>
<blockquote>
<p><code>docker-compose.yml</code> 的 <code>volumns</code> 相當於 <code>docker run</code> 的 <code>-v</code></p>
</blockquote>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ./localtime:/etc/localtime:ro</span><br></pre></td></tr></table></figure>
<p>讓 container 內部時間與 Host OS 的 macOS 同步。</p>
<blockquote>
<p>Q : 為什麼是 <code>./localtime</code> ? 而不是 <code>/etc/localtime</code> 呢 ?</p>
</blockquote>
<p>其實 macOS 也是如 Linux 有 <code>/etc/localtime</code>，不過若寫 <code>/etc/localtime</code>，在 macOS 會出現以下錯誤訊息而啟動失敗。</p>
<p><img src="/images/docker/proget/proget000.png" alt="proget000"></p>
<p>Docker 抱怨 <code>/etc/localtime</code> 沒有分享給 Docker。</p>
<p><img src="/images/docker/proget/proget001.png" alt="proget001"></p>
<p>若實際由 Docker 去分享 <code>/etc/</code> 目錄，Docker 又會抱怨 <code>/etc</code> 目錄無法分享。</p>
<p>因此稍後會改用 Bash 將 <code>/etc/localtime</code> 複製到目前目錄，避開 <code>/etc</code> 目錄無法分享問題。</p>
<blockquote>
<p>此問題為 Docker for Mac 在某個版本之後才有，在 Linux 則無此問題</p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ~/proget/data:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure>
<p>將 PostgreSQL 資料存到 Host OS 的 <code>~/proget/data</code> 目錄。</p>
<blockquote>
<p>使用 Docker 時，不要將資料存到 container 內，而要將資料存到 Host OS，將來若要更新版本，只要更新 image 並換掉 container 即可，不會影響到資料</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restart: unless-stopped</span><br></pre></td></tr></table></figure>
<p>使用 <code>restart</code> 設定如何重新啟動 container。</p>
<ul>
<li><strong>unless-stopped</strong>：當 container 當掉時，會自動重新啟動</li>
</ul>
<blockquote>
<p><code>docker-compose.yml</code> 的 <code>restart</code> 相當於 <code>docker run</code> 的 <code>--restart</code></p>
</blockquote>
<p>12 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: inedo/proget:latest</span><br></pre></td></tr></table></figure>
<p>使用 <code>image</code> 設定所使用的 Docker image。</p>
<p><code>inedo/proget:latest</code> 為最新的 ProGet Docker image。</p>
<p>13 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: proget</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 container 的名稱。</p>
<p>14 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - ./localtime:/etc/localtime:ro&#10;  - ~/proget/packages:/var/proget/packages&#10;  - ~/proget/extensions:/var/proget/extensions</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumns</code> 設定 container 與 Host OS 要共享的目錄。</p>
<p><code>localtime</code> 設定與 <code>proget-postgres</code> container 相同，就不再贅述。</p>
<p><code>packages</code> 與 <code>extensions</code> 亦為 ProGet 儲存資料的目錄，為了避免將資料存到 container 內，一樣改存到 Host OS。</p>
<blockquote>
<p><code>~/proget/packages</code> 與 <code>~/proget/extensions</code> 目錄不必事先建立，當 container 啟動時，若發現目錄不存在於 Host OS，會自動建立目錄</p>
</blockquote>
<p>18 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose:&#10;  - &#34;80&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>expose</code> 設定 container 對外溝通的 port。</p>
<p><code>proget</code> container 對外將以 port 80 呈現。</p>
<p>20 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:&#10;  - &#34;8624:80&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>ports</code> 設定 Host OS 與 container 的 port mapping。</p>
<p>Host OS 的 port : 8624 將對應到 container 的 port 80。</p>
<blockquote>
<p><code>docker-compose.yml</code> 的 <code>ports</code> 相當於 <code>docker run</code> 的 <code>-p</code></p>
</blockquote>
<p><img src="/images/docker/proget/proget002.png" alt="proget002"></p>
<h2 id="建立_Bash">建立 Bash</h2><hr>
<p><strong>dcup.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">cp /etc/localtime .</span><br><span class="line">docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>由於 <code>/etc/localtime</code> 在 Docker for Mac 無法被分享，因此特別建立 Bash 將 <code>/etc/localtime</code> 複製到目前目錄。</p>
<p>使用 <code>docker-compose up</code> 啟動 container。</p>
<ul>
<li><strong>-d</strong>：<code>d</code> etatch，<code>docker-compose</code> 執行後將脫離 container 的 process，讓 container 在背景執行</li>
</ul>
<blockquote>
<p>實務上常使用 Bash 搭配 <code>Dockerfile</code> 或 <code>docker-compose.yml</code>，若一些在 <code>Dockerfile</code> 或 <code>docker-compose.yml</code> 不方便做的雜工，都會以 Bash 來處理</p>
</blockquote>
<p><img src="/images/docker/proget/proget021.png" alt="proget021"></p>
<h2 id="啟動_Container">啟動 Container</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/ProGet $ ./dcup.sh</span><br></pre></td></tr></table></figure>
<p>使用 <code>dcup.sh</code> 啟動 <code>proget-postgres</code> 與 <code>proget</code> 兩個 container。</p>
<p><img src="/images/docker/proget/proget003.png" alt="proget003"></p>
<h2 id="使用_ProGet">使用 ProGet</h2><hr>
<p><img src="/images/docker/proget/proget004.png" alt="proget004"></p>
<p>在瀏覽器輸入 <code>localhost:8624</code>，若能出現 ProGet Home，表示 ProGet 已經正常啟動。</p>
<p><img src="/images/docker/proget/proget005.png" alt="proget005"></p>
<p>按右上角 <code>Log In</code>。</p>
<p><img src="/images/docker/proget/proget006.png" alt="proget006"></p>
<p>先按 <code>automatically log in with Admin/Admin</code> 登入 ProGet。</p>
<p><img src="/images/docker/proget/proget007.png" alt="proget007"></p>
<p>選擇右上方的 <code>Feeds</code>，會顯示 <code>License key is required</code> 與 <code>The license key has not been activated</code>，在 <code>License key</code> 按 <code>changed</code>。</p>
<p><img src="/images/docker/proget/proget008.png" alt="proget008"></p>
<p>按 <code>my.inedo.com</code> 申請新的 license key。</p>
<p><img src="/images/docker/proget/proget009.png" alt="proget009"></p>
<p>登入 <code>MyInedo</code> 帳號或者申請新帳號。</p>
<p><img src="/images/docker/proget/proget011.png" alt="proget011"></p>
<p>複製 license key。</p>
<p><img src="/images/docker/proget/proget010.png" alt="proget010"></p>
<p>將 license key 貼上。</p>
<p><img src="/images/docker/proget/proget012.png" alt="proget012"></p>
<p>目前 <code>License key is valid</code>，但尚未啟動。</p>
<p>按 <code>activate</code> 啟動 license key。</p>
<p><img src="/images/docker/proget/proget013.png" alt="proget013"></p>
<p>顯示 <code>Activation completed</code> 。</p>
<p><img src="/images/docker/proget/proget014.png" alt="proget014"></p>
<p>當 <code>License key is valid</code> 與 <code>The license key is activated</code> 都出現時，表示 ProGet 已經可以經可全功能使用。</p>
<h2 id="建立_NuGet_Server">建立 NuGet Server</h2><hr>
<p><img src="/images/docker/proget/proget015.png" alt="proget015"></p>
<ol>
<li>再點一次 <code>Feeds</code>，目前 feeds 都是空的，已經不會出現 license 警告</li>
<li>按 <code>Create New Feed</code> 建立新 feed</li>
</ol>
<p><img src="/images/docker/proget/proget016.png" alt="proget016"></p>
<ol>
<li><strong>Feed name</strong>：輸入 feed 名稱</li>
<li><strong>Feed type</strong>：ProGet 支援多種 package 格式，選擇 <code>NuGet</code></li>
<li>按 <code>Create Feed</code> 建立 feed</li>
</ol>
<p><img src="/images/docker/proget/proget017.png" alt="proget017"></p>
<p>NuGet Feed 建立成功。</p>
<h2 id="建立_NPM_Server">建立 NPM Server</h2><hr>
<p><img src="/images/docker/proget/proget018.png" alt="proget018"></p>
<p>以相同方式建立 NPM Feed。</p>
<p><img src="/images/docker/proget/proget019.png" alt="proget019"></p>
<p>目前 ProGet 已經可同時支援 NuGet 與 NPM 兩種 package 格式。</p>
<h2 id="結束_Container">結束 Container</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/ProGet $ docker-compose down</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker-compose down</code> 結束 container。</p>
<p><img src="/images/docker/proget/proget020.png" alt="proget020"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用 Docker 方式，無論是在 Windows Server / Linux 或 macOS，都可用相同的方式使用 ProGet，達到跨平台的目的</li>
<li>ProGet 支援多種 package 格式，只要安裝一套就可支援 NuGet 與 NPM</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/docker-proget" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://inedo.com/" target="_blank" rel="external">inedo</a>, <a href="https://inedo.com/support/documentation/proget/installation/installation-guide/linux-docker" target="_blank" rel="external">ProGet Linux Installation Guide</a><br><a href="https://docs.docker.com/" target="_blank" rel="external">Docker</a>, <a href="https://docs.docker.com/docker-for-mac/osxfs/#namespaces" target="_blank" rel="external">File system sharing</a></p>
]]></content>
    <summary type="html">
    <![CDATA[一套服務同時支援 NuGet 與 NPM]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Ubuntu 18.04 + .NET Core 2.1 的 Docker Image ?]]></title>
    <link href="http://oomusou.io/docker/ubuntu1804-core21/"/>
    <id>http://oomusou.io/docker/ubuntu1804-core21/</id>
    <published>2018-06-01T12:23:43.000Z</published>
    <updated>2018-06-01T05:08:25.504Z</updated>
    <content type="html"><![CDATA[<p>實務上我們會直接使用 .NET Core 2.1 的 <code>microsoft/netcore</code> Docker image，但我們也可以使用 Ubuntu 18.04 為基底，自行撰寫 Dockerfile，練習建立包含 .NET Core 2.1 的 Docker image。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>Ubuntu 18.04<br>.NET Core 2.1</p>
<h2 id="建立_Dockerfile">建立 Dockerfile</h2><hr>
<p><strong>Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Linux library dependency</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget apt-transport-https gpg</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install microsoft.gpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://packages.microsoft.com/config/ubuntu/<span class="number">18.04</span>/prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv prod.list /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install .NET Core SDK</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">3</span></span></span><br></pre></td></tr></table></figure>
<p>根據 .NET Core 官方文件 <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a>，若要在 Ubuntu 18.04 安裝 .NET Core 2.1，必須依照這些步驟。</p>
<p>將這些步驟改寫在 Dockerfile 內。</p>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br></pre></td></tr></table></figure>
<p>根據最新版 ubuntu 為基底 image。</p>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Linux library dependency</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget apt-transport-https gpg</span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a> 所描述，若要在 Ubuntu 18.04 安裝 .NET Core，在 Ubuntu 還必須安裝以下 dependency：</p>
<ul>
<li>wget</li>
<li>apt-transport-https</li>
<li>gpg</li>
</ul>
<p>第 7 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install microsoft.gpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://packages.microsoft.com/config/ubuntu/<span class="number">18.04</span>/prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv prod.list /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/sources.list.d/microsoft-prod.list</span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a> 所描述，要安裝 .NET Core SDK 前，必須先將 <code>microsoft.gpg</code> 裝好。</p>
<p> 15 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install .NET Core SDK</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">3</span></span></span><br></pre></td></tr></table></figure>
<p>所有的 dependency 與  <code>microsoft.gpg</code> 都裝好後，就可以正式安裝 .NET Core SDK 了。</p>
<p><img src="/images/docker/ubuntu1804-core21/core000.png" alt="core000"></p>
<h2 id="建立自己的_Image">建立自己的 Image</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/UbuntuCore $ docker <span class="keyword">build </span>-t ubuntu1804-core21 .</span><br></pre></td></tr></table></figure>
<p>進入 <code>Dockerfile</code> 所在的目錄，使用 <code>docker build</code> 建立自己的 image。</p>
<ul>
<li><strong>-t</strong> : Docker image 的名稱</li>
<li><strong>.</strong> : 將目前目錄的 <code>Dockerfile</code> 建立成 image</li>
</ul>
<p><img src="/images/docker/ubuntu1804-core21/core001.png" alt="core001"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker images</span><br></pre></td></tr></table></figure>
<p><code>docker build</code> 的確幫我們建立了新的 <code>ubuntu1804-core21</code> Docker image。</p>
<p><img src="/images/docker/ubuntu1804-core21/core002.png" alt="core002"></p>
<h2 id="顯示_Ubuntu_版本">顯示 Ubuntu 版本</h2><hr>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> ubuntu1804-core21 <span class="keyword">cat</span> /etc/lsb-release</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 執行剛剛建立的 image，並執行 <code>cat /etc/lsb-release</code> 顯示 Ubuntu 版本。</p>
<ul>
<li><strong>–rm</strong>：執行完 container 後立即刪除，避免日後還要手動刪除 container</li>
</ul>
<p><img src="/images/docker/ubuntu1804-core21/core003.png" alt="core003"></p>
<h2 id="顯示_-NET_Core_版本">顯示 .NET Core 版本</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--rm ubuntu1804-core21 dotnet --info</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 執行剛剛建立的 image，並執行 <code>dotnet --info</code> 顯示 .NET Core 版本。</p>
<p><img src="/images/docker/ubuntu1804-core21/core004.png" alt="core004"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>以前使用 VM 時，若要自建 VM，最後會 export 出一大包 image，除了很佔空間外，還無法 git 版控；但若改用 Dockerfile 後，由於都是文字檔，檔案非常小，也可以很輕鬆 git 版控</li>
<li>實務上雖然會直接使用 <code>microsoft/dotnet</code> Docker image，不過藉由此方式練習寫 Dockerfile 也很不錯，畢竟實務上會有很多機會要自己建立 Dockerfile</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ubuntu1804-core21" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.microsoft.com/net/" target="_blank" rel="external">.NET Core</a>, <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a></p>
]]></content>
    <summary type="html">
    <![CDATA[練習自己寫 Dockerfile 很好的機會]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 .NET Core 打包成 Docker Image ?]]></title>
    <link href="http://oomusou.io/netcore/build-docker/"/>
    <id>http://oomusou.io/netcore/build-docker/</id>
    <published>2018-05-30T13:23:43.000Z</published>
    <updated>2018-05-30T07:52:15.271Z</updated>
    <content type="html"><![CDATA[<p>Docker 除了用在測試外，尚可將整個 app 打包成 Docker image，配合 Docker Compose 與其他 Microservice，可以直接用在 production。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.0.7<br>VS Code 1.23.1</p>
<h2 id="建立_Console_App">建立 Console App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用  <code>dotnet new</code> 建立 .NET Core App。</p>
<ul>
<li>new : 建立 project</li>
<li>console : 建立 console 類型 project</li>
<li>-o : 以 MyConsole 為專案名稱並建立目錄</li>
</ul>
<p><img src="/images/netcore/build-docker/docker000.png" alt="docker000"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 建立 <code>MyConsole</code> 專案，其專案類型為 <code>console app</code></li>
</ol>
<h2 id="建立_Dockerfile">建立 Dockerfile</h2><hr>
<p>由於我們想要將 app 打包成 Docker image，因此要建立自己的 <code>Dockerfile</code>，Docker 才能依照此 <code>Dockerfile</code> 建立 Docker image。</p>
<p><strong>Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:runtime-deps</span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">./bin/Release/netcoreapp2.<span class="number">0</span>/linux-x64/publish ./</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./MyConsole"</span>]</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:runtime-deps</span><br></pre></td></tr></table></figure>
<p><code>FROM</code> 為 Dockerfile 指令，表示以哪一個 image 為基礎建立自己的 image。</p>
<p>其中 <code>microsoft/dotnet:runtime-deps</code> 是 Microsoft 專為 .NET Core 準備的 Docker image，此 image 不含 .NET Core runtime，僅包含所需要的 Linux library，是最小包的 image。</p>
<p>第 2 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span></span><br></pre></td></tr></table></figure>
<p><code>WORKDIR</code> 為 Dockerfile 指令，表示其他 Dockerfile 指令 (如 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 與 <code>ADD</code> …等) 的工作目錄。</p>
<p>以上表示 <code>WORKDIR</code> 為 <code>/app</code>，若 <code>/app</code>  目錄不存在會自動建立。</p>
<p>第 4 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COPY</span> <span class="bash">./bin/Release/netcoreapp2.<span class="number">0</span>/linux-x64/publish ./</span></span><br></pre></td></tr></table></figure>
<p><code>COPY</code> 為 Dockerfile 指令，表示將 Host OS 的檔案或目錄，複製到 container 內。</p>
<p>第 1 個參數為 Host OS 檔案或目錄，第 2 個參數為 container 檔案或目錄。</p>
<p>以上表示僅將以 SCD 方式發布的 Linux App 複製到 container 內。</p>
<p>第 5 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./MyConsole"</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>ENTRYPOINT</code> 為 Dockerfile 指令，表示 container 一啟動時，該執行什麼指令。</p>
<p>以上表示當 container 一啟動時，將執行 <code>./MyConsole</code>。</p>
<p><img src="/images/netcore/build-docker/docker002.png" alt="docker002"></p>
<h2 id="建立_Image">建立 Image</h2><hr>
<p><strong>BuildDocker.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">dotnet publish -c Release -r linux-x64</span><br><span class="line">docker build -t myconsole .</span><br></pre></td></tr></table></figure>
<p>由於使用的 Docker image 是 <code>microsoft/dotnet:runtime-deps</code>，這表示我們必須使用 SCD 方式發布，<code>dotnet publish</code> 特別加上 <code>-r linux-x64</code> 使用 SCD，其 runtime 為 <code>linux-x64</code>。</p>
<p>使用 <code>docker build</code> 由 <code>Dockerfile</code> 建立 Docker image。</p>
<ul>
<li><strong>-t</strong> : <code>t</code>ag，image 的名稱</li>
</ul>
<p><img src="/images/netcore/build-docker/docker004.png" alt="docker004"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyConsole $ chmod +x ./</span><span class="constant">BuildDocker.</span>sh</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 讓 <code>BuildDocker.sh</code> 能夠有 <code>被執行</code> 權限。</p>
<p><img src="/images/netcore/build-docker/docker005.png" alt="docker005"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyConsole $ ./</span><span class="constant">BuildDocker.</span>sh</span><br></pre></td></tr></table></figure>
<p>執行 <code>BuildDocker.sh</code> 建立 Docker image。</p>
<p><img src="/images/netcore/build-docker/docker001.png" alt="docker001"></p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>docker images</span><br></pre></td></tr></table></figure>
<p>確認 <code>myconsole</code> image 已經被產生。</p>
<p><img src="/images/netcore/build-docker/docker006.png" alt="docker006"></p>
<h2 id="建立_Docker_Compose">建立 Docker Compose</h2><hr>
<p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  net-core:&#10;    image: myconsole&#10;    container_name: MyConsole</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: myconsole</span><br></pre></td></tr></table></figure>
<p>使用自己剛剛建立的 <code>mycosole</code> image。</p>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyConsole</span><br></pre></td></tr></table></figure>
<p>建立名為 <code>MyConsole</code> 的 container。</p>
<p><img src="/images/netcore/build-docker/docker007.png" alt="docker007"></p>
<h2 id="執行_Docker_Compose">執行 Docker Compose</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>docker-compose up</span><br></pre></td></tr></table></figure>
<p>執行 <code>docker-compose up</code> 執行 <code>docker-compose.yml</code> 所定義的 container。</p>
<p><img src="/images/netcore/build-docker/docker008.png" alt="docker008"></p>
<p>正確顯示 <code>Hello World</code>，表示 .NET Core App 已在 Docker 內執行成功。</p>
<h2 id="結束_Docker_Compose">結束 Docker Compose</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyProject</span> <span class="char">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>執行 <code>docker-compose down</code> 結束並刪除 container。</p>
<p><img src="/images/netcore/build-docker/docker009.png" alt="docker009"></p>
<h2 id="Summary">Summary</h2><hr>
<p>在 Microsoft 官方的 <a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core" target="_blank" rel="external">Learn Docker Basics with .NET Core</a> 文件中，其 Dockerfile 如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:<span class="number">2.0</span>-sdk</span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">*.csproj ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet restore</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy and build everything else</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">. ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet publish -c Release -o out</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"dotnet"</span>, <span class="string">"out/Hello.dll"</span>]</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:<span class="number">2.0</span>-sdk</span><br></pre></td></tr></table></figure>
<p><code>FROM</code> 為 <code>microsoft/dotnet:2.0-sdk</code>，也就是包含了 .NET Core CLI，所以 image 一定比較大。</p>
<p>第 4 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">*.csproj ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet restore</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy and build everything else</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">. ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet publish -c Release -o out</span></span><br></pre></td></tr></table></figure>
<p>將所有 source code 都複製進 image，在 <code>docker build</code> 時，在 image 內執行 <code>dotnet restore</code> 與 <code>dotnet publish</code>，由於所有 source code 都進了 image，image 也一定比較大。</p>
<p>本文是 Host OS 以 SCD 方式 publish，僅將所需要的檔案複製進 image，如此 image 會小很多。</p>
<p><img src="/images/netcore/build-docker/docker010.png" alt="docker010"></p>
<p>實際比較發現，若使用 Microsoft 官方作法，Docker image 為 1.84 GB，但使用本文方式，只有 218 MB，非常適合 production 使用。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>將 .NET Core console app 打包成 Docker image 後，就可以跨平台執行此 image</li>
<li>此範例雖然是 console app，事實上將 ASP.NET Core 打包成 Docker image 也是類似以上流程</li>
<li>使用本文的方式，Docker image 的 size 將會有效的縮小</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/netcore-docker-production" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core" target="_blank" rel="external">Learn Docker Basics with .NET Core</a></p>
]]></content>
    <summary type="html">
    <![CDATA[比官方文件更有效的作法]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 打造 .NET Core 開發環境 ?]]></title>
    <link href="http://oomusou.io/netcore/docker-dev/"/>
    <id>http://oomusou.io/netcore/docker-dev/</id>
    <published>2018-05-30T12:23:43.000Z</published>
    <updated>2018-05-31T15:25:22.594Z</updated>
    <content type="html"><![CDATA[<p>雖然可以在 Windows 或 macOS 開發 .NET Core，但畢竟 production 環境是 Linux，因此在 Windows 或 macOS 測試成功，也不代表真正上 Linux 沒有問題。</p>
<p>透過 Docker，我們可以在開發階段就測試 Linux 環境，及早發現可能的問題。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.0.7<br>VS Code 1.23.1</p>
<h2 id="建立_-NET_Core_App">建立 .NET Core App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用  <code>dotnet new</code> 建立 .NET Core App。</p>
<ul>
<li><strong>new</strong> : 建立 project</li>
<li><strong>console</strong> : 建立 console 類型 project</li>
<li><strong>-o</strong> : 以 <code>MyConsole</code> 為專案名稱並建立目錄</li>
</ul>
<p><img src="/images/netcore/docker-dev/DockerDev004.png" alt="DockerDev004"></p>
<h2 id="執行_-NET_Core_App">執行 .NET Core App</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>cd <span class="class">MyConsole</span></span><br><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>dotnet run</span><br></pre></td></tr></table></figure>
<p>進入 <code>MyConsole</code> 目錄，並在 Host OS 執行 .NET Core App。</p>
<p><img src="/images/netcore/docker-dev/DockerDev005.png" alt="DockerDev005"></p>
<p>目前 .NET Core App  是跑在 Host OS，也就是 macOS，但並不保證在 Linux 也正常，因此我們必須進一步在 Linux 環境下測試。</p>
<p>實務上有兩種測試方式：</p>
<ul>
<li>在 Container 內測試</li>
<li>在 Container 外測試</li>
</ul>
<h2 id="在_Container_內測試">在 Container 內測試</h2><hr>
<p>我們先將 container 執行起來，然後連進 container 內部，以 Linux 環境執行 app。</p>
<h3 id="建立_Docker_Compose">建立 Docker Compose</h3><p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  net-core:&#10;    image: microsoft/dotnet&#10;    container_name: MyCore&#10;    volumes:&#10;      - &#34;$&#123;HOST_DIR&#125;:/home/&#34;&#10;    tty: true</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>其基底的 image 為 <code>microsoft/dotnet</code>，此為 Micrsoft 所發布的 official .NET Core docker image。</p>
<blockquote>
<p>實務上 Docker 建議盡量使用 official image，避免被安裝木馬程式而不自知</p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyCore</span><br></pre></td></tr></table></figure>
<p>建立名為 <code>MyCore</code> 的 container。</p>
<blockquote>
<p><code>container_name</code> 相當於 <code>docker run</code> 的 <code>--name</code> </p>
</blockquote>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - &#34;$&#123;HOST_DIR&#125;:/home/&#34;</span><br></pre></td></tr></table></figure>
<p>設定 Host OS 與 container 所共享的目錄，將來 Host OS 所分享的目錄，相當於 container 內的 <code>/home</code> 目錄。</p>
<p>由於每個人 Host OS 要分享的目錄都不一樣，因此設定成 <code>HOST_DIR</code> 變數，稍後自行在 <code>.env</code> 設定。</p>
<blockquote>
<p><code>volumns</code> 相當於 <code>docker run</code> 的 <code>-v</code></p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tty: true</span><br></pre></td></tr></table></figure>
<p>Docker 為了節省硬體資源，app 執行完就會釋放 container，但處於開發階段，我們需要的是類似 service 跑在背景，隨時可以進入 container 測試 Linux app。</p>
<p><code>tty: true</code> 將令 Docker 分配一個 TTY (<code>T</code> ele <code>TY</code> pewriter)，綁定到 container 的 <code>stdin</code> 與 <code>stdout</code> 上，將來我們才能透過 Bash 對 container 下指令，由於 <code>tty</code> 在背景持續執行，因此 container 就不會被釋放。</p>
<blockquote>
<p><code>tty</code> 相當於 <code>docker run</code> 的 <code>-t</code></p>
</blockquote>
<p><img src="/images/netcore/docker-dev/DockerDev000.png" alt="DockerDev000"></p>
<p><strong>.env</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">HOST_DIR</span>=~/<span class="preprocessor">Code</span>/CSharp/MyConsole</span><br></pre></td></tr></table></figure>
<p>設定 Host OS 要與 container 共享的目錄。</p>
<p>注意 <code>=</code> 前後都沒有空格，否則 <code>docker-compose</code> 會執行錯誤。</p>
<blockquote>
<p>設計 <code>docker-compose.yml</code> 時，要盡量保持 <code>.yml</code> 不要修改，也就是 <code>開放封閉原則</code>，而將要修改客製化的部分搬到 <code>.env</code>，將來 <code>docker-compose.yml</code> 會進 git，但 <code>.env</code> 則不進 git</p>
</blockquote>
<p><img src="/images/netcore/docker-dev/DockerDev001.png" alt="DockerDev001"></p>
<h3 id="執行_Docker_Compose">執行 Docker Compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>進入 <code>docker-compose.yml</code> 所在的目錄，執行 <code>docker-compose up</code> 執行 container。</p>
<ul>
<li><strong>-d</strong>：<code>d</code> etatch，表示 <code>docker-compose</code> 執行後將離開 container 的 process，讓 container 在背景執行</li>
</ul>
<p><img src="/images/netcore/docker-dev/DockerDev002.png" alt="DockerDev002"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<p>可以發現 <code>MyCore</code> container 正在背景執行中，沒有被釋放。</p>
<p><img src="/images/netcore/docker-dev/DockerDev003.png" alt="DockerDev003"></p>
<h3 id="連進_Container_內">連進 Container 內</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ docker exec -it MyCore bash</span><br><span class="line">root<span class="constant">@83aeee036235</span>:/<span class="preprocessor"># cd /home/</span></span><br><span class="line">root<span class="constant">@83aeee036235</span>:/home<span class="preprocessor"># dotnet run</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec -it MyCore bash</code> 進入 container。</p>
<ul>
<li><strong>exec</strong>：執行 container 內的 Linux 指令</li>
<li><strong>-i</strong>：<code>i</code> nteractive，可對 terminal 輸入資料</li>
<li><strong>-t</strong>：<code>t</code> erminal，可對 terminal 顯示資料</li>
<li><strong>MyCore</strong>：container 名稱</li>
<li><strong>bash</strong>：在 container 執行 <code>bash</code>，讓我們可以對 Linux 下指令</li>
</ul>
<p>進入 <code>/home</code>，此為剛剛我們在 <code>.env</code> 所設定的共享目錄。</p>
<p>使用 <code>dotnet run</code> 執行 .NET Core App。</p>
<p><img src="/images/netcore/docker-dev/DockerDev006.png" alt="DockerDev006"></p>
<p>目前是同一份 code 真正跑在 Linux，因此可藉由 Docker 在開發階段，測試 app 是否真正能跑在 Linux。</p>
<h3 id="結束_Docker_Compose">結束 Docker Compose</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>進入 <code>docker-compose.yml</code> 所在的目錄，執行 <code>docker-compose down</code> 結束 container。</p>
<p><img src="/images/netcore/docker-dev/DockerDev007.png" alt="DockerDev007"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<p>Container 已經結束且被釋放。</p>
<p><img src="/images/netcore/docker-dev/DockerDev008.png" alt="DockerDev008"></p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -<span class="literal">a</span></span><br></pre></td></tr></table></figure>
<p>Container 不僅被釋放，且在硬碟的 container 也被刪除了。</p>
<blockquote>
<p>若使用 <code>docker run</code>，儘管使用 <code>docker stop</code> 停止 container，但 container 仍然存在於硬碟，必須手動使用 <code>docker rm</code> 刪除 container，但若使用 <code>docker-compose down</code>，會一併從硬碟刪除 container</p>
</blockquote>
<p><img src="/images/netcore/docker-dev/DockerDev009.png" alt="DockerDev009"></p>
<h2 id="在_Container_外測試">在 Container 外測試</h2><hr>
<p>直接在 container 外部使用 <code>docker run</code> 執行 container，並在 container 內執行 <code>dotnet run</code>。</p>
<h3 id="建立_Bash">建立 Bash</h3><p><strong>RunDocker.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">HOST_DIR=~/Code/CSharp/MyConsole</span><br><span class="line"></span><br><span class="line">docker run --rm -v <span class="variable">$HOST_DIR</span>:/home -w /home microsoft/dotnet dotnet run</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST_DIR=~/Code/CSharp/MyConsole</span><br></pre></td></tr></table></figure>
<p>設定 Host OS 與 container 所共享的目錄，將來 Host OS 所分享的目錄，相當於 container 內的 <code>/home</code> 目錄。</p>
<p>由於每個人 Host OS 要分享的目錄都不一樣，因此設定成 <code>HOST_DIR</code> 變數，可自行設定。</p>
<p>第 4 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v <span class="variable">$HOST_DIR</span>:/home -w /home microsoft/dotnet dotnet run</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 直接執行 container。</p>
<ul>
<li><strong>–rm</strong>：執行完 app 之後立即刪除 container，避免執行完的 container 留在硬碟內，除了佔空間，日後還必須手動刪除</li>
<li><strong>-v</strong>：<code>v</code> olumn，設定 Host OS 與 container 所共享的目錄，<code>:</code> 左側為 Host OS 目錄，右側為 container 內目錄</li>
<li><strong>-w</strong>：<code>w</code> orking directory，避免自己下 <code>cd</code> 指令切換目錄</li>
<li><strong>microsoft/dotnet</strong>：Microsoft 官方最新的 .NET Core Docker image</li>
<li><strong>dotnet run</strong>：container 建立後，要在 container 內執行的指令就是 <code>dotnet run</code></li>
</ul>
<p><img src="/images/netcore/docker-dev/DockerDev010.png" alt="DockerDev010"></p>
<h3 id="設定執行權限">設定執行權限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">～MyConsole $ chmod +x RunDocker.sh</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 讓  <code>RunDocker.sh</code> 能夠有 <code>被執行</code> 權限。</p>
<p><img src="/images/netcore/docker-dev/DockerDev011.png" alt="DockerDev011"></p>
<h3 id="執行_Bash">執行 Bash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ ./RunDocker.sh</span><br></pre></td></tr></table></figure>
<p>執行 <code>RunDocker.sh</code> ，建立 container，並在 container 內執行 app。</p>
<p><img src="/images/netcore/docker-dev/DockerDev012.png" alt="DockerDev012"></p>
<p>目前是同一份 code 在 Docker 內執行，由於 Docker 內就是 Linux，因此可藉由 Docker 在開發階段，測試 app 是否真正能跑在 Linux。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core 雖然號稱跨平台，但也不保證真正執行在 Linux 沒問題，透過 Docker，我們在開發階段就能很簡單測試 Linux 環境是否正常</li>
<li>第一種方式比較接近傳統 VM，直接進 container 內測試 app</li>
<li>第二種方式比較接近正統 Docker，是直接使用 <code>docker run</code> 執行 container 內的 app</li>
<li>以上兩種方式都只適合開發階段測試用，若要上 production，則要將 .NET Core App 整個包進 Docker image，將以專文另外討論之</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/netcore-dockerdev" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[在開發階段可即時測試 Linux 環境]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何以 .NET Core CLI 建立並上傳 NuGet 套件 ?]]></title>
    <link href="http://oomusou.io/netcore/nuget/create/"/>
    <id>http://oomusou.io/netcore/nuget/create/</id>
    <published>2018-05-24T12:23:43.000Z</published>
    <updated>2018-05-24T07:02:10.726Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 一樣使用 NuGet 管理 package，本文將使用 VS Code 與 .NET Core CLI 建立 package，並上傳到 NuGet server。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.0.7<br>VS Code 1.23.1</p>
<h2 id="建立_Class_Library">建立 Class Library</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> classlib -o MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 project。</p>
<ul>
<li><strong>classlib</strong>：建立 class library 類型專案</li>
<li><strong>-o</strong>：<code>o</code> utput，建立在 <code>MyCalculator</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/nuget/create/nuget000.png" alt="nuget000"></p>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接欲開啟的 <code>目錄名稱</code>。</p>
<p><img src="/images/netcore/nuget/create/nuget001.png" alt="nuget001"></p>
<h2 id="編輯_MyCalculator">編輯 MyCalculator</h2><hr>
<p><strong>MyCalculator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyClassLib</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCalculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>MyCalculator</code> class，有只有一個 <code>Sum()</code> method。</p>
<p><img src="/images/netcore/nuget/create/nuget002.png" alt="nuget002"></p>
<h2 id="新增_Package_Metadata">新增 Package Metadata</h2><hr>
<p><strong>MyClassLib.csproj</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Project</span> <span class="attribute">Sdk</span>=<span class="value">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">TargetFramework</span>&gt;</span>netstandard2.0<span class="tag">&lt;/<span class="title">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageId</span>&gt;</span>OomusouCalculator<span class="tag">&lt;/<span class="title">PackageId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="title">Version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Authors</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Company</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Company</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">GeneratePackageOnBuild</span>&gt;</span>true<span class="tag">&lt;/<span class="title">GeneratePackageOnBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Content</span> <span class="attribute">Include</span>=<span class="value">"MyCalculator.cs"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">PackageId</span>&gt;</span>OomusouCalculator<span class="tag">&lt;/<span class="title">PackageId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="title">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Authors</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Authors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Company</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">GeneratePackageOnBuild</span>&gt;</span>true<span class="tag">&lt;/<span class="title">GeneratePackageOnBuild</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每個 NuGet package 除了 <code>.nupkg</code> 外，另外還有 <code>.nuspec</code>，用來描述 package 資訊與其所需的 dependency，而這些資訊都來自於 <code>.csproj</code>。</p>
<ul>
<li><strong>PackageId</strong>：Package 唯一識別的 id，若是要發佈到 <code>nuget.org</code>，則必須是 <code>nuget.org</code> 唯一；若是發佈到公司內部自己的 NuGet server，則必須是該 server 的唯一</li>
<li><strong>Version</strong>：套件版本編號</li>
<li><strong>Authors</strong>：套件作者</li>
<li><strong>Company</strong>：套件公司</li>
<li><strong>GeneratePackageOnBuild</strong>：當 <code>dotnet build</code> 時，自動執行 <code>dotnet pack</code> 建立 <code>.nupkg</code></li>
</ul>
<p><img src="/images/netcore/nuget/create/nuget003.png" alt="nuget003"></p>
<h2 id="編譯同時建置_Package">編譯同時建置 Package</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="keyword">build </span>-c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<ul>
<li><strong>-c</strong>：<code>c</code> onfiguration，預設 <code>dotnet build</code> 是以 <code>Debug</code> 模式編譯，若要以 <code>Release</code> 編譯，需要搭配 <code>-c</code> 參數</li>
</ul>
<blockquote>
<p>由於剛剛已經在 <code>.csproj</code> 增加 <code>GeneratePackageOnBuild</code>，所以只要 <code>dotnet build</code> 就會一起產生 <code>.nupkg</code></p>
</blockquote>
<p><img src="/images/netcore/nuget/create/nuget004.png" alt="nuget004"></p>
<h2 id="獲得_API_Key">獲得 API Key</h2><hr>
<p>NuGet Package 分兩種，一種是對外公開的 package，一種是公司內部用的 package，本文先討論公開的 NuGet package。</p>
<p>要發佈到 NuGet server，必須知道兩件事：</p>
<ol>
<li><strong>API Key</strong>：相當於你個人資訊憑證</li>
<li><strong>NuGet server URL</strong>：NuGet server 位址</li>
</ol>
<p><img src="/images/netcore/nuget/create/nuget005.png" alt="nuget005"></p>
<ol>
<li>到 <code>https://www.nuget.org</code>，這是公開 NuGet package 的集散地</li>
<li>以個人帳號 Sign in，將 Microsoft 帳號登入</li>
</ol>
<p><img src="/images/netcore/nuget/create/nuget006.png" alt="nuget006"></p>
<ol>
<li>右上角會顯示登入帳號</li>
<li>選擇 <code>API Keys</code></li>
</ol>
<p><img src="/images/netcore/nuget/create/nuget007.png" alt="nuget007"></p>
<ol>
<li>按 <code>Create</code> 建立 API Key</li>
<li><strong>Key Name</strong>：這是給自己識別的名字，代表某個 API Key</li>
<li><strong>Glob Patten</strong>：適用的 pattern，<code>*</code> 代表適用所有 package</li>
</ol>
<p>最後按 <code>Create</code> 建立 API Key。</p>
<p><img src="/images/netcore/nuget/create/nuget008.png" alt="nuget008"></p>
<ol>
<li>建立新的 API Key 成功</li>
<li>按 <code>Copy</code> 將 API Key 複製到 clipboard</li>
</ol>
<h2 id="發佈_Package">發佈 Package</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject/bin/Release $ dotnet nuget push OomusouCalculator<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>.nupkg -k oy2mskdm2daf7i7wersaxtwvssc6oebutgtywbhljl5tcw -s https:<span class="comment">//api.nuget.org/v3/index.json</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet nuget push</code> 發佈 NuGet package 到公開的 NuGet server。</p>
<ul>
<li><strong>-k</strong>：將剛剛複製的 API Key 貼上</li>
<li><strong>-s</strong>：公開 NuGet server 的網址為 <code>https://api.nuget.org/v3/index.json</code></li>
</ul>
<blockquote>
<p>API Key 請用自己的，上面的 API Key 只是 <code>示意</code> 用</p>
</blockquote>
<p><img src="/images/netcore/nuget/create/nuget009.png" alt="nuget009"></p>
<ol>
<li>將目錄切到 <code>.nupkg</code> 所在的 <code>bin/Release</code> 目錄下</li>
<li>使用 <code>dotnet nuget push</code> 將 <code>.nupkg</code> 上傳到公開的 NuGet server</li>
</ol>
<blockquote>
<p>常見的 <code>dotnet nuget push</code> 失敗，都在於 <code>PackageId</code> 重複，請記得取一個 <code>不重複的</code> PackageId</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>上傳 NuGet package 到 NuGet server 已經變得非常簡單，在 <code>dotnet build</code> 已經順便 <code>dotnet pack</code>，配合 <code>dotnet nuget push</code> 即可上傳到公開的 NuGet server</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli" target="_blank" rel="external">Quickstart: Create and publish a package (dotnet CLI)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[建立 NuGet 套件越來越簡單]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Windows 10 Home 安裝 Docker ?]]></title>
    <link href="http://oomusou.io/docker/toolbox/"/>
    <id>http://oomusou.io/docker/toolbox/</id>
    <published>2018-05-23T12:23:43.000Z</published>
    <updated>2018-05-23T12:59:30.596Z</updated>
    <content type="html"><![CDATA[<p>由於 Docker for Windows 底層用的是 Hyper-V，這必須在 Windows 10 Professional 才提供，因此無法安裝在 Windows 10 Home。</p>
<p>若要在 Windows 10 Home 使用 Docker，就要改走 Docker Toolbox 這條路。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Windows 10 Home 1803 (17134.1)</p>
<h2 id="下載_Docker_Toolbox">下載 Docker Toolbox</h2><hr>
<p><img src="/images/docker/toolbox/docker000.png" alt="docker000"></p>
<ol>
<li>到 <a href="https://docs.docker.com/toolbox/toolbox_install_windows" target="_blank" rel="external">Docker 官網</a></li>
<li>按 <code>Get Docker Toolbox for Windows</code> 下載 Docker Toolbox</li>
</ol>
<h2 id="安裝_Docker_Toolbox">安裝 Docker Toolbox</h2><hr>
<p><img src="/images/docker/toolbox/docker001.png" alt="docker001"></p>
<ol>
<li>預設將 <code>DockerToolbox</code> 下載到 <code>Downloads</code> 目錄</li>
<li>執行 <code>DockerToolbox</code></li>
</ol>
<h2 id="Welcome">Welcome</h2><hr>
<p><img src="/images/docker/toolbox/docker002.png" alt="docker002"></p>
<ol>
<li>按 <code>Next</code> 繼續</li>
</ol>
<h2 id="選擇安裝目錄">選擇安裝目錄</h2><hr>
<p><img src="/images/docker/toolbox/docker003.png" alt="docker003"></p>
<ol>
<li>設定安裝目錄，接受預設值即可</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<h2 id="設定安裝元件">設定安裝元件</h2><hr>
<p><img src="/images/docker/toolbox/docker004.png" alt="docker004"></p>
<p>接受預設 <code>全部安裝</code> 即可，不過我們可以發現：</p>
<ol>
<li><strong>VirtualBox</strong>：由於 Docker Toolbox 沒有走 Hyper-V，所以必須安裝 VirtualBox</li>
<li><strong>Git for Windows</strong>：由於 Docker 主要都是要下指令，安裝 Git for Windows 只是為了其 Git Bash 方便 CLI</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<h2 id="其他設定">其他設定</h2><hr>
<p><img src="/images/docker/toolbox/docker005.png" alt="docker005"></p>
<ol>
<li>接受預設值即可，按 <code>Next</code> 繼續</li>
</ol>
<h2 id="即將安裝">即將安裝</h2><hr>
<p><img src="/images/docker/toolbox/docker006.png" alt="docker006"></p>
<ol>
<li>按 <code>Install</code> 開始安裝</li>
</ol>
<h2 id="安裝中">安裝中</h2><hr>
<p><img src="/images/docker/toolbox/docker007.png" alt="docker007"></p>
<h2 id="VirtualBox_安裝_Driver">VirtualBox 安裝 Driver</h2><hr>
<p><img src="/images/docker/toolbox/docker008.png" alt="docker008"></p>
<ol>
<li>安裝 VirtualBox 所需要的 driver，按 <code>Install</code> 繼續</li>
</ol>
<h2 id="安裝完成">安裝完成</h2><hr>
<p><img src="/images/docker/toolbox/docker009.png" alt="docker009"></p>
<ol>
<li>安裝完成，按 <code>Finish</code> 繼續</li>
</ol>
<p><img src="/images/docker/toolbox/docker010.png" alt="docker010"></p>
<p>安裝完成後，會在桌面出現 VirtualBox、Kitematic 與 Docker Quickstart Terminal。</p>
<p>其中 Docker Quickstart Terminal 是 Docker 環境已經整好的 CLI，若要下任何 Docker 指令，就在這裡下。</p>
<h2 id="第一次執行_CLI">第一次執行 CLI</h2><hr>
<p><img src="/images/docker/toolbox/docker011.png" alt="docker011"></p>
<ol>
<li>第一次執行 CLI 時，會安裝 Boot2Docker</li>
</ol>
<blockquote>
<p>Docker 基本上是 Linux 的技術，也就是 Docker 必須跑在 Linux 環境下，而 Boot2Docker 就是個極小的 Linux，會跑在 VirtualBox 上，讓我們 Docker 能有 Linux 環境執行</p>
</blockquote>
<p><img src="/images/docker/toolbox/docker012.png" alt="docker012"></p>
<ol>
<li>VirtualBox 要安裝額外套件，按 <code>Yes</code> 繼續</li>
</ol>
<p><img src="/images/docker/toolbox/docker013.png" alt="docker013"></p>
<ol>
<li><code>Waiting for an IP…</code> 會稍微久一點，是正常的</li>
</ol>
<p><img src="/images/docker/toolbox/docker014.png" alt="docker014"></p>
<ol>
<li>安裝完成，輸入 <code>docker —version</code> 能夠正確顯示 Docker 版本</li>
</ol>
<blockquote>
<p>日後要執行 Docker，就啟動 <code>Docker Quickstart Terminal</code> 即可</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然 Windows 10 Home 沒有 Hyper-V，但透過 VirtualBox + Docker Toolbox，也能夠在 Windows 10 Home 跑 Docker</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[透過 VirtualBox + Docker Toolbox]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 DataGrip 連接 PostgreSQL ?]]></title>
    <link href="http://oomusou.io/datagrip/postgresql/"/>
    <id>http://oomusou.io/datagrip/postgresql/</id>
    <published>2018-05-22T00:23:43.000Z</published>
    <updated>2018-05-22T11:03:19.584Z</updated>
    <content type="html"><![CDATA[<p>DataGrip 是 JetBrains 專業的資料庫連線工具，可以直接連上任何資料庫，當然也包含 PostgreSQL。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 18.03.0-ce-mac60 (23751)<br>PostgreSQL 10.3<br>DataGrip 2018.1</p>
<h2 id="DataGrip">DataGrip</h2><hr>
<p><img src="/images/datagrip/postgresql/grip000.png" alt="post009"></p>
<p><strong><em>View -&gt; Tool Windows -&gt; Database</em></strong></p>
<p>或熱鍵：<code>⌘ + 1</code></p>
<p><img src="/images/datagrip/postgresql/grip001.png" alt="post001"></p>
<p>左側顯示 Database View。</p>
<p><img src="/images/datagrip/postgresql/grip002.png" alt="post002"></p>
<p>DataGrip 連進 PostgreSQL。</p>
<ol>
<li>按 <code>+</code>，選擇 <code>Data Source</code></li>
<li>選擇 <code>PostgreSQL</code></li>
</ol>
<p><img src="/images/datagrip/postgresql/grip003.png" alt="post003"></p>
<p>DataGrip 支援 PostgreSQL，不過預設並沒有安裝 PostgreSQL 驅動程式。</p>
<ol>
<li>按 <code>Download</code> 下載 <code>PostgreSQL</code> 驅動程式。</li>
</ol>
<p><img src="/images/datagrip/postgresql/grip004.png" alt="post004"></p>
<ol>
<li><code>User</code> : <code>admin</code></li>
<li><code>Password</code> : <code>12345</code></li>
<li>按 <code>Test Connection</code> 測試連接，顯示 Successful</li>
</ol>
<p><img src="/images/datagrip/postgresql/grip005.png" alt="post005"></p>
<p>DataGrip 預設不會顯示所有 table。</p>
<ol>
<li>選 <code>Shemas...</code></li>
<li>勾選 <code>All schemas</code></li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/datagrip/postgresql/grip006.png" alt="post006"></p>
<ol>
<li>展開 <code>tables</code>，選擇 <code>sql_features</code> table</li>
<li>按 <code>Data Editor</code> 顯示資料</li>
</ol>
<p>如此 DataGrip 已經正確連上 PostgreSQL。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>DataGrip 為專業的資料庫管理工具，也包含各資料庫的 driver，可輕鬆連上各種資料庫</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接在 DataGrip 連接到 PostgreSQL]]>
    
    </summary>
    
      <category term="DataGrip" scheme="http://oomusou.io/tags/DataGrip/"/>
    
      <category term="PostgreSQL" scheme="http://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Rider 連接 PostgreSQL ?]]></title>
    <link href="http://oomusou.io/rider/postgresql/"/>
    <id>http://oomusou.io/rider/postgresql/</id>
    <published>2018-05-21T23:23:43.000Z</published>
    <updated>2018-05-22T10:53:52.931Z</updated>
    <content type="html"><![CDATA[<p>Rider 內建資料庫連線工具，可以直接連上任何資料庫，當然也包含 PostgreSQL。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 18.03.1-ce-mac60 (24312)<br>PostgreSQL 10.3<br>Rider 2018.1</p>
<h2 id="Rider">Rider</h2><hr>
<p><img src="/images/rider/postgresql/rider000.png" alt="post010"></p>
<p><strong><em>View -&gt; Tool Windows -&gt; Database</em></strong></p>
<p><img src="/images/rider/postgresql/rider001.png" alt="post011"></p>
<p>右側顯示 Database View。</p>
<p><img src="/images/rider/postgresql/rider002.png" alt="post012"></p>
<p>Rider 連進 PostgreSQL。</p>
<ol>
<li>按 <code>+</code>，選擇 <code>Data Source</code></li>
<li>選擇 <code>PostgreSQL</code></li>
</ol>
<p><img src="/images/rider/postgresql/rider003.png" alt="post013"></p>
<p>Rider 支援 PostgreSQL，不過預設並沒有安裝 PostgreSQL 驅動程式。</p>
<ol>
<li>按 <code>Download</code> 下載 <code>PostgreSQL</code> 驅動程式。</li>
</ol>
<p><img src="/images/rider/postgresql/rider004.png" alt="post014"></p>
<ol>
<li><code>User</code> : <code>admin</code></li>
<li><code>Password</code> : <code>12345</code></li>
<li>按 <code>Test Connection</code> 測試連接，顯示 Successful</li>
</ol>
<p><img src="/images/rider/postgresql/rider005.png" alt="post015"></p>
<p>Rider 預設不會顯示所有 table。</p>
<ol>
<li>選 <code>Shemas...</code></li>
<li>勾選 <code>All schemas</code></li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/rider/postgresql/rider006.png" alt="post016"></p>
<ol>
<li>展開 <code>tables</code>，選擇 <code>sql_features</code> table</li>
<li>按 <code>Data Editor</code> 顯示資料</li>
</ol>
<p>如此 Rider 已經正確連上 PostgreSQL。</p>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>Rider 已經自帶資料庫連線工具，也包含各資料庫的 driver，可輕鬆連上各種資料庫</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接在 Rider 內連接到 PostgreSQL]]>
    
    </summary>
    
      <category term="PostgreSQL" scheme="http://oomusou.io/tags/PostgreSQL/"/>
    
      <category term="Rider" scheme="http://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 PostgreSQL ?]]></title>
    <link href="http://oomusou.io/docker/postgres/"/>
    <id>http://oomusou.io/docker/postgres/</id>
    <published>2018-05-21T22:23:43.000Z</published>
    <updated>2018-06-04T05:54:31.597Z</updated>
    <content type="html"><![CDATA[<p>若要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker 安裝。本文除了安裝 PostgreSQL 外，還分別使用 DataGrip 與 Rider 連接 PostgreSQL。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 18.03.0-ce-mac60 (23751)<br>PostgreSQL 10.3</p>
<h2 id="建立_Container">建立 Container</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyPostgres <span class="operator">-d</span> -p <span class="number">5432</span>:<span class="number">5432</span> <span class="operator">-e</span> POSTGRES_USER=admin <span class="operator">-e</span> POSTGRES_PASSWORD=<span class="string">'12345'</span> postgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<blockquote>
<p><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process<br><code>—name</code>：替 container 取一個人能夠識別的名字 <code>MyPostgres</code> (若省略，Docker ) </p>
<p><code>-p</code> : <code>p</code>ort mapping，host port : container port</p>
<p><code>-e</code> : 設定環境變數 (<code>e</code>nvironment)，使用 <code>POSTGRES_USER</code> 與 <code>POSTGRES_PASSWORD</code> 設定 PostgreSQL 帳號與密碼</p>
<p><code>postgress</code> : image 名稱</p>
</blockquote>
<p><img src="/images/docker/postgres/post000.png" alt="post000"></p>
<h2 id="使用_Terminal_連進_PostgreSQL">使用 Terminal 連進 PostgreSQL</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyPostgres bash</span><br></pre></td></tr></table></figure>
<ol>
<li><code>exec</code> : 執行 container 的 command</li>
<li><code>-it</code> : <code>i</code> : interactive，<code>t</code> : terminal</li>
<li><code>bash</code> : <code>exec</code> 執行 bash</li>
</ol>
<p><img src="/images/docker/postgres/post001.png" alt="post012"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 Mac 最簡單使用 PostgreSQL 方式]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="PostgreSQL" scheme="http://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 FP 的 Point-Free Style]]></title>
    <link href="http://oomusou.io/ramda/point-free/"/>
    <id>http://oomusou.io/ramda/point-free/</id>
    <published>2018-05-21T12:23:43.000Z</published>
    <updated>2018-05-21T15:09:51.260Z</updated>
    <content type="html"><![CDATA[<p>Curry Function 最主要的目的在於 Function Composition，所以儘管是 <code>多</code> 個 argument，最後也可變成多個 <code>單一</code> argument 的 function 方便 composition。</p>
<p>那 argument 該怎樣的設計才適合 composition 呢 ? 這就是本文的主題：Point-Free Style。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>F# 4.1<br>ECMAScript 6<br>Ramda 0.25</p>
<h2 id="FSharp">FSharp</h2><hr>
<p>在學習 F# 時，由於 F# 是純 FP 語言，function 可自動成為 Curry Function，常發現 F# 的 function 會如此設計。</p>
<blockquote>
<p><strong>List.map()</strong><br>mapping : (‘T -&gt; ‘U) -&gt; list : ‘T list -&gt; ‘U list</p>
<p><strong>List.filter()</strong></p>
<p>predicate : (‘T -&gt; bool) -&gt; list : ‘T list -&gt; ‘T list</p>
<p><strong>List.reduce()</strong></p>
<p>reduction : (‘T -&gt; ‘T -&gt; ‘T) -&gt; list : ‘T list -&gt; ‘T</p>
</blockquote>
<p>僅管 <code>List.map()</code>、  <code>List.filter()</code> 與 <code>List.reduce()</code> 三個 function 功能都不同，input 與 return 值也不同，但最後一個 argument 一定都是 <code>list : &#39;T list</code>。</p>
<blockquote>
<p>Q : 這樣設計 argument 到底有什麼優點呢 ?</p>
</blockquote>
<p><strong>Pipeline</strong><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapSquare = List.map (<span class="keyword">fun</span> elm -&gt; elm * elm)</span><br><span class="line"><span class="keyword">let</span> filterOdd = List.filter (<span class="keyword">fun</span> elm -&gt; elm % <span class="number">2</span> = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> sum = List.reduce (<span class="keyword">fun</span> acc elm -&gt; acc + elm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calculate data = </span><br><span class="line">    data</span><br><span class="line">    |&gt; mapSquare</span><br><span class="line">    |&gt; filterOdd</span><br><span class="line">    |&gt; sum</span><br><span class="line">    </span><br><span class="line">calculate [<span class="number">1</span> .. <span class="number">3</span>] </span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br></pre></td></tr></table></figure></p>
<p>第 1 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapSquare = List.map (<span class="keyword">fun</span> elm -&gt; elm * elm)</span><br><span class="line"><span class="keyword">let</span> filterOdd = List.filter (<span class="keyword">fun</span> elm -&gt; elm % <span class="number">2</span> = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> sum = List.reduce (<span class="keyword">fun</span> acc elm -&gt; acc + elm)</span><br></pre></td></tr></table></figure>
<p><code>List.map()</code>、<code>List.filter()</code> 與 <code>List.reduce()</code> 都僅提供 1 個 argument，所以 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 都是 function。</p>
<p>第 5 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calculate data = </span><br><span class="line">    data</span><br><span class="line">    |&gt; mapSquare</span><br><span class="line">    |&gt; filterOdd</span><br><span class="line">    |&gt; sum</span><br></pre></td></tr></table></figure>
<p>將 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 透過 Pipeline 處理 data。</p>
<p>因為 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 的最後一個 argument 都是 <code>list : &#39;T list</code>，在 Pipeline 時，F# 允許省略之。</p>
<blockquote>
<p><strong>|&gt;</strong> 為 F# 的 Pipeline，<code>由左至右</code></p>
</blockquote>
<p><strong>Function Composition</strong><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapSquare = List.map (<span class="keyword">fun</span> elm -&gt; elm * elm)</span><br><span class="line"><span class="keyword">let</span> filterOdd = List.filter (<span class="keyword">fun</span> elm -&gt; elm % <span class="number">2</span> = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> sum = List.reduce (<span class="keyword">fun</span> acc elm -&gt; acc + elm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calculate = mapSquare &gt;&gt; filterOdd &gt;&gt; sum</span><br><span class="line">    </span><br><span class="line">calculate [<span class="number">1</span> .. <span class="number">3</span>] </span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p>
<p>第 1 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mapSquare = List.map (<span class="keyword">fun</span> elm -&gt; elm * elm)</span><br><span class="line"><span class="keyword">let</span> filterOdd = List.filter (<span class="keyword">fun</span> elm -&gt; elm % <span class="number">2</span> = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> sum = List.reduce (<span class="keyword">fun</span> acc elm -&gt; acc + elm)</span><br></pre></td></tr></table></figure>
<p><code>List.map()</code>、<code>List.filter()</code> 與 <code>List.reduce()</code> 都僅提供 1 個 argument，所以 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 都是 function。</p>
<p>第  5 行</p>
 <figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calculate = mapSquare &gt;&gt; filterOdd &gt;&gt; sum</span><br></pre></td></tr></table></figure>
<p>將 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>filterOdd()</code> 組合成 <code>calculate()</code> 。</p>
<p>因為 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 的最後一個 argument 都是 <code>list : &#39;T list</code>，在 Composition 時，F# 允許省略之。</p>
<blockquote>
<p><strong>&gt;&gt;</strong> 為 F# 的 Function Composition，<code>由左至右</code></p>
</blockquote>
<p>我們可以發現  F# 在設計 function 時，會 <code>故意</code> 將要處理的 <code>資料</code> 放在最後一個 argument，將 <code>條件</code> 放在前面的 argument，如此所有 function 無論要做 Pipeline 或 Composition 時，都可省略最後一個 argument，讓程式碼更加簡潔。</p>
<blockquote>
<p>Pipeline 與 Function Composition 講的其實是同一件事情，只是 F# 文化較喜歡使用  Pipeline，而 Haskell 較喜歡使用 Function Composition，稍後將統一使用 Function Composition</p>
</blockquote>
<p>當初以為這只是 F# 的 syntax sugar，後來在歐陽繼超的 <a href="https://www.tenlong.com.tw/products/9787121297243" target="_blank" rel="external">前端函數式攻城指南</a> 與 <a href="https://www.tenlong.com.tw/products/9787115335593" target="_blank" rel="external">Haskell 趣學指南</a> 這兩本書，才發現這是 FP 特有風格，稱為 <strong>Point-Free Style</strong>。</p>
<h2 id="Definition">Definition</h2><blockquote>
<p><strong>Point-Free Style</strong></p>
<p>Function 不特別將要處理的 data 放進參 argument，因此也不回傳處理過的 data，而是回傳 function，這有助於 Function Composition，也稱為 <strong>Tacit Programming</strong></p>
</blockquote>
<hr>
<blockquote>
<p>Q：為甚麼 Point-Free Style 能成立呢 ?</p>
</blockquote>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn data = List.map (<span class="keyword">fun</span> elm -&gt; elm * elm) data</span><br></pre></td></tr></table></figure>
<p>若原本 <code>fn()</code> 帶一個 argument，傳入要處理的 <code>data</code>，相當於將 <code>data</code> 傳入 <code>List.map (fun elm -&gt; elm * elm)</code>，並回傳處理過的 <code>data</code>。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = List.map (<span class="keyword">fun</span> elm -&gt; elm * elm)</span><br></pre></td></tr></table></figure>
<p>由於 F# 的 function 天生是 Curry Function，<code>fn()</code> 沒有 argument，<code>=</code> 左右將 <code>data</code> 同時消去，就相當於回傳 <code>List.map (fun elm -&gt; elm * elm)</code> function。</p>
<p>所以一個 function 將 <code>data</code> 放在最後一個 argument 時，提不提供 <code>data</code> 都成立：</p>
<ul>
<li>有提供 <code>data</code> 則回傳處理過的 <code>data</code></li>
<li>不提供 <code>data</code> 則回傳 function</li>
</ul>
<p>由於回傳是 function，特別適合做 Function Composition。</p>
<blockquote>
<p>Q：為什麼稱為 Point-Free ?</p>
</blockquote>
<p><code>Point</code> 所指的就是傳入 <code>data</code> 的 argument，<code>Point-Free</code> 就是指 function 將 <code>data</code> 放在最後一個 argument，要使用時故意將最後一個 <code>data</code> argumet 丟棄 (free)，則變成回傳 function，但若 <code>data</code> 不是最後一個 argument，則無法丟棄，因此也無法變成 function，所以也無法繼續再做 Function Composition。</p>
<blockquote>
<p>Q：為什麼 Point-Free Style 適合做 Function Composition ?</p>
</blockquote>
<p>Function Composition 事實上來自於數學的 <code>合成函數</code>，也就是 <code>fog(x) = f(g(x))</code>，其中：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fog</span><span class="params">(x)</span></span> = <span class="function"><span class="title">f</span><span class="params">(y)</span></span></span><br><span class="line">y      = <span class="function"><span class="title">g</span><span class="params">(x)</span></span></span><br></pre></td></tr></table></figure>
<p>也就是 <code>g(x)</code> 的 output 剛好為 <code>f(y)</code> 的 input，因此才能將 <code>f(g(x))</code> 合併，變成 <code>fog(x)</code>，其中的 <code>y</code> 剛好被消滅。</p>
<p>若 <code>f()</code> 與 <code>g()</code> 每個 function 的 <code>格式都一樣</code>，都是最後一個 argument 為 <code>data</code>，則可將所有 function 加以組合成一個新 function，這就是 Function Composition。</p>
<h2 id="JavaScript">JavaScript</h2><hr>
<p>前面談的都是 F#，你可能看得似懂非懂，我們就來將相同程式碼以大家熟悉的 JavaScript 改寫：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _map = fn =&gt; data =&gt; data.map(fn);</span><br><span class="line"><span class="keyword">const</span> _filter = fn =&gt; data =&gt; data.filter(fn);</span><br><span class="line"><span class="keyword">const</span> _reduce = fn =&gt; data =&gt; data.reduce(fn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapSquare = _map(elm =&gt; elm * elm);</span><br><span class="line"><span class="keyword">const</span> filterOdd = _filter(elm =&gt; elm % <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> sum = _reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = (...fns) =&gt;</span><br><span class="line">    fns.reduce((f, g) =&gt; (...args) =&gt; f(g(...args)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculate = compose(sum, filterOdd, mapSquare);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = calculate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _map = fn =&gt; data =&gt; data.map(fn);</span><br><span class="line"><span class="keyword">const</span> _filter = fn =&gt; data =&gt; data.filter(fn);</span><br><span class="line"><span class="keyword">const</span> _reduce = fn =&gt; data =&gt; data.reduce(fn);</span><br></pre></td></tr></table></figure>
<p>JavaScript 雖然都有提供 <code>map()</code>、<code>filter()</code> 與 <code>reduce()</code>，但這些都是尚未 Curry 化的 function，無法使用 Function Composition，所以我們第一步就是將這些 function 改寫成 Curry Function。</p>
<p>第 5 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapSquare = _map(elm =&gt; elm * elm);</span><br><span class="line"><span class="keyword">const</span> filterOdd = _filter(elm =&gt; elm % <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> sum = _reduce((acc, elm) =&gt; acc + elm);</span><br></pre></td></tr></table></figure>
<p>再改寫成 Point-Free Style function。</p>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = (...fns) =&gt;</span><br><span class="line">    fns.reduce((f, g) =&gt; (...args) =&gt; f(g(...args)));</span><br></pre></td></tr></table></figure>
<p>由於 JavaScript 沒有提供 <code>compose()</code> 組合 function，我們自己土炮用 <code>reduce()</code> 寫一個 <code>compose()</code>，負責將多個 Point-Free Style function 組合成單一 function。</p>
<p>12 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = compose(sum, filterOdd, mapSquare);</span><br></pre></td></tr></table></figure>
<p>將 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 組合成 <code>calculate()</code>。</p>
<p>這裡與 F# 不一樣，而是 <code>由右至左</code>。</p>
<blockquote>
<p>JavaScript 雖然寫的出來，但由於沒有直接支援 Curry Function 與 <code>compose()</code>，因此寫起來有點冗長</p>
</blockquote>
<h2 id="Ramda">Ramda</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> map <span class="keyword">from</span> <span class="string">'ramda/src/map'</span>;</span><br><span class="line"><span class="keyword">import</span> filter <span class="keyword">from</span> <span class="string">'ramda/src/filter'</span>;</span><br><span class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">'ramda/src/reduce'</span>;</span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'ramda/src/compose'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapSquare = map(elm =&gt; elm * elm);</span><br><span class="line"><span class="keyword">const</span> filterOdd = filter(elm =&gt; elm % <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> sum = reduce((acc, elm) =&gt; acc + elm, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculate = compose(sum, filterOdd, mapSquare);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = calculate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> map <span class="keyword">from</span> <span class="string">'ramda/src/map'</span>;</span><br><span class="line"><span class="keyword">import</span> filter <span class="keyword">from</span> <span class="string">'ramda/src/filter'</span>;</span><br><span class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">'ramda/src/reduce'</span>;</span><br></pre></td></tr></table></figure>
<p>從 Ramda 引入 <code>map()</code>、<code>filter()</code>、<code>reduce()</code> ，這些都是已經是 Curry Function。</p>
<p>第 4 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'ramda/src/compose'</span>;</span><br></pre></td></tr></table></figure>
<p>從 Ramda 引入 <code>compose()</code>，這樣我們就不必自己實作 <code>compose()</code> 了。</p>
<p>第 6 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapSquare = map(elm =&gt; elm * elm);</span><br><span class="line"><span class="keyword">const</span> filterOdd = filter(elm =&gt; elm % <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> sum = reduce((acc, elm) =&gt; acc + elm, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>將 Ramda 的 function 改寫成 Point-Free Style function。</p>
<p>10 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = compose(sum, filterOdd, mapSquare);</span><br></pre></td></tr></table></figure>
<p>使用 Ramda 的 <code>compose()</code> 將 <code>mapSquare()</code>、<code>filterOdd()</code> 與 <code>sum()</code> 組合成 <code>calculate()</code>。</p>
<p>這裡與 F# 不一樣，而是 <code>由右至左</code>。</p>
<blockquote>
<p>Ramda 的版本就非常精簡，我們只需實作 Point-Free Style function 再加以組合即可，整體風格已經與純 FP 的 F# 非常接近</p>
</blockquote>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Q : Function Composition 該 <code>由左至右</code>，還是該 <code>由右至左</code> 呢 ?</p>
</blockquote>
<ul>
<li>F# 的 <code>&gt;&gt;</code> 是 <code>由左至右</code>，優點是程式碼可讀性較佳</li>
<li>Haskell 的 <code>.</code> 與 Ramda 的 <code>compose()</code> 是 <code>由右至左</code>，優點是與數學的  <code>fog(x) = f(g(x))</code> 一樣 <code>由右至左</code></li>
</ul>
<p>個人是偏好 F# 的 <code>由左至右</code>，不過由於 Haskell 與 Ramda 的文化就是 <code>由右至左</code>，也只能習慣了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Point-Free Style 是 FP 設計 argument 的基本精神，這也是為什麼歐陽繼超在 <a href="https://www.tenlong.com.tw/products/9787121297243" target="_blank" rel="external">前端函數式攻城指南</a> 一書中指出 Underscore 設計錯誤，因為 Underscore 是 <code>_.map([1, 2, 3], x =&gt; x + 1)</code>，將 data 放在第 1 個  argument，這並不符合 Point-Free Style</li>
<li>FP 首重觀念，只要心裡有 Function Composition，無論是在 F# 或在 JavaScript 都可實作</li>
<li>純 JavaScript 實作稍微冗長，若使用 Ramda，則整體精簡程度已經與 F# 非常接近</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>歐陽繼超，<a href="https://www.tenlong.com.tw/products/9787121297243" target="_blank" rel="external">前端函數式攻城指南</a><br>Miran Lipovaca, <a href="https://www.tenlong.com.tw/products/9787115335593" target="_blank" rel="external">Haskell 趣學指南</a><br><a href="https://en.wikipedia.org/wiki/Main_Page" target="_blank" rel="external">Wikipedia</a>, <a href="https://en.wikipedia.org/wiki/Tacit_programming" target="_blank" rel="external">Tacit Programming</a></p>
]]></content>
    <summary type="html">
    <![CDATA[FP 設計 Argument 的基本方式]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
      <category term="FP" scheme="http://oomusou.io/tags/FP/"/>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
      <category term="Ramda" scheme="http://oomusou.io/tags/Ramda/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Angular 使用 Ramda ?]]></title>
    <link href="http://oomusou.io/ramda/angular/"/>
    <id>http://oomusou.io/ramda/angular/</id>
    <published>2018-05-17T13:23:43.000Z</published>
    <updated>2018-05-18T01:45:46.454Z</updated>
    <content type="html"><![CDATA[<p>Ramda 是 Clojure 在 JavaScript 的實作，讓我們可以將更多 FP 特性在 JavaScript 實現。</p>
<p>本文將以 Angular 與 TypeScript 為例，示範如何在 Angular 使用 Ramda。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Node.js 8.11.1<br>Angular 6.0.2<br>Ramda 0.25</p>
<h2 id="安裝_Ramda">安裝 Ramda</h2><hr>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ npm <span class="keyword">install</span> ramda</span><br></pre></td></tr></table></figure>
<p>使用 npm 安裝 <code>ramda</code>。</p>
<h2 id="安裝_Type_Definition_for_Ramda">安裝 Type Definition for Ramda</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ <span class="built_in">npm</span> install types/<span class="built_in">npm</span>-ramda --save-dev</span><br></pre></td></tr></table></figure>
<p>使用 npm 安裝 Ramda 的 type definition，由於只有開發使用，所以加上 <code>--save-dev</code>。</p>
<h2 id="使用_Ramda">使用 Ramda</h2><hr>
<p><strong>app.component.ts</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> compose from <span class="string">'ramda/src/compose'</span>;</span><br><span class="line"><span class="keyword">import</span> toUpper from <span class="string">'ramda/src/toUpper'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title = <span class="string">'app'</span>;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> classyGreeting = (firstName, lastName) =&gt;</span><br><span class="line">      <span class="string">'The name\'s '</span> + lastName + <span class="string">', '</span> + firstName + <span class="string">' '</span> + lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> yellGreeting = compose(toUpper, classyGreeting);</span><br><span class="line">    <span class="built_in">console</span>.log(yellGreeting(<span class="string">'James'</span>, <span class="string">'Bond'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose from <span class="string">'ramda/src/compose'</span>;</span><br><span class="line"><span class="keyword">import</span> toUpper from <span class="string">'ramda/src/toUpper'</span>;</span><br></pre></td></tr></table></figure>
<p>為了 Tree Shaking，將 <code>compose()</code> 與 <code>toUpper()</code> 單獨 import。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classyGreeting = (firstName, lastName) =&gt;</span><br><span class="line">      <span class="string">'The name\'s '</span> + lastName + <span class="string">', '</span> + firstName + <span class="string">' '</span> + lastName;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>classyGreeting()</code>。</p>
<p>17 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> yellGreeting = compose(toUpper, classyGreeting);</span><br></pre></td></tr></table></figure>
<p>為了將 <code>classyGreeting()</code> 的所有回傳值都變成大寫，使用了 Ramda 的 <code>toUpper()</code>，並將 <code>classyGreeting()</code> 與 <code>toUpper()</code> 兩者 <code>compose()</code> 成 <code>yellGreeting()</code> 。</p>
<blockquote>
<p>對於 Function Composition，JavaScript 並不像 Haskell 提供 <code>.</code> ，或 F# 的 <code>&gt;&gt;</code> 來組合 function，因此借助 Ramda 的 <code>compose()</code> 將 <code>toUpper()</code> 與 <code>classyGreeting()</code> 組合成 <code>yellGreeting()</code></p>
</blockquote>
<p><img src="/images/ramda/angular/ramda000.png" alt="ramda000"></p>
<h2 id="Type_Inference_缺憾">Type Inference 缺憾</h2><p><img src="/images/ramda/angular/ramda001.png" alt="ramda001"></p>
<p>由於 TypeScript 的 Type Inference 的限制，目前經過 Ramda 所 compose 的 function，在 TypeScript 只能顯示 <code>any</code>，無法如 Haskell 或 F# 能完整顯示 compose 後 function 的型別，是比較遺憾的地方。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>除了在 Angular 使用 OOP 外，有了 Ramda，我們就可以將很多 FP 技巧用在 Angular，同時發揮 OOP 與 FP 的優點</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NG6Ramda" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://medium.com/@jacobedawson" target="_blank" rel="external">Jacob E. Dawson</a>, <a href="https://medium.com/@jacobedawson/using-ramda-js-with-angular-2-angular-cli-9580f64c1794" target="_blank" rel="external">Using Ramda.js with Angular 2+/Angular CLI</a><br><a href="http://ramdajs.com" target="_blank" rel="external">Ramda</a>, <a href="http://ramdajs.com/docs/#compose" target="_blank" rel="external">compose</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 Angular 使用更多的 FP 特性]]>
    
    </summary>
    
      <category term="Angular" scheme="http://oomusou.io/tags/Angular/"/>
    
      <category term="Ramda" scheme="http://oomusou.io/tags/Ramda/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 檢查 Java 專案 ?]]></title>
    <link href="http://oomusou.io/sonarqube/java/"/>
    <id>http://oomusou.io/sonarqube/java/</id>
    <published>2018-05-17T12:23:43.000Z</published>
    <updated>2018-05-18T01:46:52.605Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。</p>
<p>SonarQube 已經內建 SonarJava，可以直接對  Java 進行檢查，本文將以 Java + Gradle 為例，並在 Eclipse 中使用 SonarLint 對  Java 專案進行檢查。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 7.1<br>SonarQube Scanner 3.1.0.1141<br>Eclipse Oxygen.3a (4.7 3a)<br>Java SE 1.8.0_171</p>
<h2 id="GitHub">GitHub</h2><hr>
<p><img src="/images/sonarqube/java/java000.png" alt="java000"></p>
<ol>
<li>本文將 Java 專案放在 <code>https://github.com/oomusou/javasonarqube</code></li>
</ol>
<h2 id="Gradle">Gradle</h2><p><strong>安裝 Gradle</strong><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install gradle</span><br></pre></td></tr></table></figure></p>
<p>Gradle 類似 JavaScript 世界的 Webpack，負責整個專案的編譯管理，使用 Homebrew 安裝。</p>
<p><strong>專案初始化</strong><br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject <span class="variable">$gradle</span> init --type java-application</span><br></pre></td></tr></table></figure></p>
<p>下載範例後，進入專案目錄，使用 Gradle 對專案初始化。</p>
<p><img src="/images/sonarqube/java/java001.png" alt="java001"></p>
<p><strong>建置專案</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyProject $ ./gradlew</span> build</span><br></pre></td></tr></table></figure></p>
<p>使用 Gradle 第一次 build 專案。</p>
<p><img src="/images/sonarqube/java/java002.png" alt="java002"></p>
<h2 id="Eclipse">Eclipse</h2><hr>
<p><strong>安裝 Plugin</strong></p>
<p><img src="/images/sonarqube/java/java003.png" alt="java003"></p>
<p><strong><em>Help -&gt; Eclipse Marketplace…</em></strong></p>
<p><img src="/images/sonarqube/java/java004.png" alt="java004"></p>
<p>請安裝以下兩個套件：</p>
<ol>
<li><strong>Buildship Gradle Integration 2.0</strong>：在 Eclipse 使用 Gradle 建置專案</li>
<li><strong>SonarLint 3.5</strong>：讓 Eclipse 能即時執行 SonarQube 檢查</li>
</ol>
<p><strong>匯入專案</strong></p>
<p><img src="/images/sonarqube/java/java005.png" alt="java005"></p>
<p><strong><em>File -&gt; Import</em></strong></p>
<p><img src="/images/sonarqube/java/java006.png" alt="java006"></p>
<ol>
<li>選擇 <strong><em>Gradle -&gt; Existing Gradle Project</em></strong></li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java007.png" alt="java007"></p>
<ol>
<li>選擇專案目錄</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java008.png" alt="java008"></p>
<ol>
<li>按 <code>Finish</code> 結束</li>
</ol>
<p><strong>新增 SonarQube Plugin</strong></p>
<p><strong>build.gradle</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * This file was generated by the Gradle 'init' task.</span><br><span class="line"> *</span><br><span class="line"> * This generated file contains a sample Java project to get you started.</span><br><span class="line"> * For more details take a look at the Java Quickstart chapter in the Gradle</span><br><span class="line"> * user guide available at https://docs.gradle.org/4.7/userguide/tutorial_java_projects.html</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// Apply the java plugin to add support for Java</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Gradle plugin to help analyzing projects with SonarQube</span></span><br><span class="line">    id <span class="string">'org.sonarqube'</span> version <span class="string">'2.6.2'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Apply the application plugin to add support for building an application</span></span><br><span class="line">    id <span class="string">'application'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the main class for the application</span></span><br><span class="line">mainClassName = <span class="string">'App'</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// This dependency is found on compile classpath of this component and consumers.</span></span><br><span class="line">    compile <span class="string">'com.google.guava:guava:23.0'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use JUnit test framework</span></span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this section you declare where to find the dependencies of your project</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">// Use jcenter for resolving your dependencies.</span></span><br><span class="line">    <span class="comment">// You can declare any Maven/Ivy/file repository here.</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>13  行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gradle plugin to help analyzing projects with SonarQube</span></span><br><span class="line">id <span class="string">'org.sonarqube'</span> version <span class="string">'2.6.2'</span></span><br></pre></td></tr></table></figure>
<p>在 Gradle 新增 SonarQube plugin，將來可透過 Gradle 執行 SonarQube。</p>
<p><img src="/images/sonarqube/java/java009.png" alt="java009"></p>
<ol>
<li>開啟 <code>build.gradle</code> 檔案</li>
<li>新增 SonarQube plugin</li>
</ol>
<p><strong>建置專案</strong></p>
<p><img src="/images/sonarqube/java/java010.png" alt="java010"></p>
<ol>
<li>右側 <code>Gradle Tasks</code></li>
<li>將 <code>build</code> 展開，執行 <code>build</code></li>
<li>在 Console 出現 <code>BUILD SUCCESSFUL</code> 表示建置成功</li>
</ol>
<blockquote>
<p>目前為止，Gradle 在 Eclipse 已經正常執行，接下來要設定 SonarQube</p>
</blockquote>
<h2 id="SonarQube">SonarQube</h2><hr>
<p><strong>安裝 SonarQube</strong><br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install sonarqube</span><br></pre></td></tr></table></figure></p>
<p>使用 Homebrew 安裝 SonarQube。</p>
<p><strong>啟動 SonarQube</strong><br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sonar <span class="built_in">console</span></span><br></pre></td></tr></table></figure></p>
<p>使用 <code>sonar console</code> 自行啟動 SonarQube。</p>
<p><img src="/images/sonarqube/java/java011.png" alt="java011"></p>
<p><strong>測試 SonarQube</strong></p>
<p><img src="/images/sonarqube/java/java012.png" alt="java012"></p>
<ol>
<li>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功</li>
<li>右上角 <code>Log in</code> 可登入管理設定 SonarQube，預設為 <code>admin/admin</code></li>
</ol>
<h2 id="SonarQube_Scanner">SonarQube Scanner</h2><hr>
<p>SonarQube 雖然已經包含 SonarJava，但必須靠 SonarQube Scanner 才能執行，預設 SonarQube 並沒有包含 Scanner，必須自行安裝。</p>
<p><strong>安裝 SonarQube Scanner</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install sonar-scanner</span><br></pre></td></tr></table></figure>
<p><strong>設定 SonarQube Server</strong></p>
<p><strong>sonar-scanner.properties</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#Configure</span> here general information about the environment, such as SonarQube server connection <span class="tag">details</span> <span class="keyword">for</span> example</span><br><span class="line"><span class="id">#No</span> information about specific project should appear here</span><br><span class="line"></span><br><span class="line">#----- Default SonarQube server</span><br><span class="line">sonar<span class="class">.host</span><span class="class">.url</span>=http:<span class="comment">//localhost:9000</span></span><br><span class="line"></span><br><span class="line">#----- Default source <span class="tag">code</span> encoding</span><br><span class="line"><span class="id">#sonar</span>.sourceEncoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>將第 5 行的 <code>#</code> 拿掉，設定 SonarQube server 的 URL 位址。</p>
<p><img src="/images/sonarqube/java/java013.png" alt="java013"></p>
<ol>
<li>將目錄移到 <code>/usr/local/Cellar/sonar-scanner/3.1.0.1141/libexec/conf</code></li>
<li>開啟 <code>sonar-scanner.properties</code></li>
<li>使用 <code>vim</code> 開啟 <code>sonar-scanner.properties</code></li>
</ol>
<p><img src="/images/sonarqube/java/java014.png" alt="java014"></p>
<ol>
<li>設定 SonarQube server</li>
</ol>
<p><strong>測試 SonarQube Scanner</strong></p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyProject</span> <span class="char">$ </span>gradle sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 Gradle 執行 SonarQube 檢查。</p>
<p><img src="/images/sonarqube/java/java015.png" alt="java015"></p>
<p><strong>SonarQube 顯示結果</strong></p>
<p><img src="/images/sonarqube/java/java016.png" alt="java016"></p>
<p>進入 SonarQube 網頁，就可看到 <code>JavaSonarQube</code> 專案已經出現 SonarQube。</p>
<blockquote>
<p>目前為止，SonarQube 已經可以正常透過 Gradle 執行，實務上可以透過 Jenkins 執行 Gradle，就可透過 CI 自動執行 SonarQube，但這種方式較被動，若發現有任何 issue，還要開 ticket 要求修改，一來一回可能好幾天，若能在開發階段就即時 SonarQube 檢查，就能「及早發現，及早治療」。</p>
</blockquote>
<h2 id="SonarLint">SonarLint</h2><hr>
<p><img src="/images/sonarqube/java/java017.png" alt="java017"></p>
<p>在 Code Smell 部分，SonarQube 已經檢查出：</p>
<ul>
<li>Move this file to a named package</li>
<li>Remove this method and declare a constant for this variable</li>
<li>Replace this use of System.out or System.err by a logger</li>
</ul>
<p>若能在 Eclipse 也能顯示這些警告訊息，那就太好了。</p>
<p><strong>連接 SonarQube Server</strong></p>
<p><img src="/images/sonarqube/java/java018.png" alt="java018"></p>
<ol>
<li>選擇專案按滑鼠右鍵</li>
<li>選擇 <code>SonarLint</code></li>
<li>選擇 <code>Bind to a SonarQube project…</code></li>
</ol>
<p><img src="/images/sonarqube/java/java019.png" alt="java019"></p>
<ol>
<li>按 <code>Connect to a SonarQube server…</code></li>
</ol>
<p><img src="/images/sonarqube/java/java020.png" alt="java020"></p>
<ol>
<li>選擇 <code>sonarqube</code></li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java021.png" alt="java021"></p>
<ol>
<li>輸入 SonarQube server 網址</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java022.png" alt="java022"></p>
<ol>
<li>選擇 <code>Username + Password</code></li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java023.png" alt="java023"></p>
<ol>
<li>輸入 SonarQube 帳號與密碼</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java024.png" alt="java024"></p>
<ol>
<li>輸入 connection 名稱</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/java/java025.png" alt="java025"></p>
<ol>
<li>按 <code>Finish</code> 完成設定</li>
</ol>
<p><img src="/images/sonarqube/java/java026.png" alt="java026"></p>
<ol>
<li>是否要 Eclipse 提供 Password hint，選 <code>No</code> 或 <code>Yes</code> 都可以</li>
</ol>
<p><img src="/images/sonarqube/java/java027.png" alt="java027"></p>
<ol>
<li>按 <code>Finish</code> 完成連接 SonarQube server 動作</li>
</ol>
<p><img src="/images/sonarqube/java/java028.png" alt="java028"></p>
<ol>
<li>顯示 SonarQube 連線正常</li>
</ol>
<p><strong>執行 SonarQube 檢查</strong></p>
<p><img src="/images/sonarqube/java/java029.png" alt="java029"></p>
<ol>
<li>選擇專案按滑鼠右鍵</li>
<li>選擇 <code>SonarLint</code></li>
<li>選擇 <code>Analyze</code></li>
</ol>
<p><img src="/images/sonarqube/java/java030.png" alt="java030"></p>
<ol>
<li>下方顯示了與 SonarQube 網頁完全相同的警告，因此 developer 在開發階段，就可以完全獲得 SonarQube 的支援</li>
</ol>
<p><img src="/images/sonarqube/java/java031.png" alt="java031"></p>
<ol>
<li>在 editor 也會即時警告</li>
<li>將滑鼠放在警告之上，也會顯示與 SonarQube 相同的警告訊息</li>
</ol>
<p><img src="/images/sonarqube/java/java032.png" alt="java032"></p>
<ol>
<li>點選 SonarLint Rule Description，會顯示該警告更詳細的解釋，甚至還有範例說明</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>我對 Java 與 Gradle 完全不熟，本篇要感謝 Carl Su 的友情幫助，才能在 Eclipse 順利執行 SonarLint</li>
<li>有了 SonarLint，developer 就能更即時的獲得 SonarQube 的建議，養成寫出 clean code 的好習慣</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/javasonarqube" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Appendix">Appendix</h2><hr>
<p><strong>JAVA_HOME</strong><br><strong>~/.bash_profile</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=$(/usr/libexec/java_home)</span><br></pre></td></tr></table></figure>
<p>這裡在執行 Gradle 時遇到一個雷，由於 Gradle 與 Eclipse 都會依賴系統變數 <code>$JAVA_HOME</code>，必須在 <code>bash_profile</code> 設定 <code>$JAVA_HOME</code> 才會讓 Gradle 與 Eclipse 順利抓到，而不能只設定在 <code>.zshrc</code> ，所以不要覺得在 iTerm 2 能 <code>echo $JAVA_HOME</code> 就沒事，畢竟 Gradle 與 Eclipse 不是吃 <code>.zshrc</code>，而是吃 <code>.bash_profile</code>。</p>
]]></content>
    <summary type="html">
    <![CDATA[持續檢查 Java 程式碼品質]]>
    
    </summary>
    
      <category term="Java" scheme="http://oomusou.io/tags/Java/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 FP 設計模式：Currying]]></title>
    <link href="http://oomusou.io/javascript/currying/"/>
    <id>http://oomusou.io/javascript/currying/</id>
    <published>2018-05-13T12:23:43.000Z</published>
    <updated>2018-05-14T01:46:00.177Z</updated>
    <content type="html"><![CDATA[<p>不只 OOP 有 Design Pattern，事實上 FP 也有不少 Pattern，而 Currying 算是 FP 最基礎、且用的最多的 Pattern。</p>
<p>一些正統 FP 語言，如 Haskell、Clojure、F#、ReasonML … 都在語言內直接支援 Currying；JavaScript 雖然沒有直接支援，但因為 JavaScript 有 First-class Function 與 Closure，使得 Currying 在 JavaScript 中使用成為可能。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p><strong>Currying</strong></p>
<p>There is a way to reduce functions of more than one argument to functions of one argument, a way called <strong>currying</strong></p>
<p>將一個多 argument 的 function 改寫成多個只有一個 argument 的 function，稱為 <strong>currying</strong></p>
<p><strong><em>Haskell B. Curry</em></strong></p>
</blockquote>
<p>Haskell B. Curry 是位數學家，為了紀念他，Haskell 語言是使用其 <code>名</code>，而 Curry 概念則是使用其 <code>姓</code>。</p>
<h2 id="Simple_Currying">Simple Currying</h2><hr>
<p><strong>NonCurrying.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="function"><span class="keyword">function</span> (<span class="params">hi, target, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = greeting(<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'Sam'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello World Sam</span></span><br></pre></td></tr></table></figure>
<p>我們以最簡單的 Hello World 為例，傳統 function 都會有多個 argument，在 <code>greeting()</code> 我們分別有 <code>hi</code>、<code>target</code> 與 <code>name</code> 3 個 argument。</p>
<p>根據 Currying 的定義，我們可將一個 function 有 3 個 argument，改寫成 3 個 function  各有 1 個 argument 。</p>
<p><strong>CurryingES5.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="function"><span class="keyword">function</span> (<span class="params">hi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = greeting(<span class="string">'Hello'</span>)(<span class="string">'World'</span>)(<span class="string">'Sam'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello World Sam</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="function"><span class="keyword">function</span> (<span class="params">hi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由於 Currying 要求每個 function 都只能有 1 個 argument，因此我們必須 <code>return</code> 兩次 function，直到最後一個 <code>return</code> 才會真正回傳值。</p>
<p>為什麼最內層的 <code>function (name)</code> 可以抓到 <code>hi</code> 與 <code>target</code> 呢 ? 拜 JavaScript 的 Closure 之賜：<code>內層 function 可以直接 reference 到 funtion 之外的變數，而不必靠 parameter 傳入</code>，因此 <code>function (name)</code> 可直接使用 <code>hi</code> 與 <code>target</code>。</p>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = greeting(<span class="string">'Hello'</span>)(<span class="string">'World'</span>)(<span class="string">'Sam'</span>);</span><br></pre></td></tr></table></figure>
<p>因此 <code>greeting(&#39;Hello&#39;)</code> 為只有 1 個 argument 的 function，可再傳入 <code>World</code>。</p>
<p>而 <code>greeting(&#39;Hello&#39;)(&#39;World&#39;)</code> 亦為一只有 1 個 argument 的 function，可再傳入 <code>Sam</code>。</p>
<p>所以 <code>greeting(&#39;Hello&#39;)(&#39;World&#39;)(&#39;Sam&#39;)</code> 其實相當於 <code>greeting(&#39;Hello&#39;, &#39;World&#39;, &#39;Sam&#39;)</code>，我們將原本 1 個 function 有 3 個 argument，變成 3 個 function 各有 1 個 argument。</p>
<p><strong>CurryingES6.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = hi =&gt; target =&gt; name =&gt; </span><br><span class="line">   hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = greeting(<span class="string">'Hello'</span>)(<span class="string">'World'</span>)(<span class="string">'Sam'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello World Sam</span></span><br></pre></td></tr></table></figure>
<p>拜 ECMAScript 2015 之賜，我們有了 Arrow Function，就不必再使用 <code>巢狀 function</code> 的寫法，程式碼更簡潔，可讀性也變高，這也使得 Currying 的實用性更高。</p>
<p>在此亂入一下 F# 的 Currying，與 JavaScript 的 Currying 比較：</p>
<p><strong>CurryingFSharp.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting hi target name =</span><br><span class="line">   hi + <span class="string">" "</span> + target + <span class="string">" "</span> + name</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> words = greeting <span class="string">"Hello"</span> <span class="string">"World"</span> <span class="string">"Sam"</span></span><br><span class="line">printfn <span class="string">"%s"</span> words</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hello World Sam</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 的 <code>const</code> 相當於 F# 的 <code>let</code>。</p>
<p>JavaScript 的 argument 寫在 <code>=</code> 之後，每個參數以 <code>=&gt;</code> 隔開；而 F# 只要在 function 名稱之後以 space 隔開即可。</p>
<p>JavaScript 的 parameter 須以 <code>()</code> 一一傳入；而 F# 只要在 function 名稱之後以 space 隔開即可。</p>
<p>ECMAScript 2015 有了 Arrow Function 之後，可讀性與簡潔性已經與正統 FP 的 F# 差距不遠。</p>
<blockquote>
<p>Q：將傳統 function 改寫成 Currying 不難，但為什麼要這樣寫呢 ?</p>
</blockquote>
<p>的確，要改寫成 Currying 並不難，尤其在 ECMAScript 2015 之後，Arrow Function 使得 Currying 寫法非常精簡，也沒有必要再因為 <code>巢狀 function</code> 可讀性不高而排斥 Currying。</p>
<p>但回到一個更基本的問題，為什麼要使用 Currying 這種設計模式呢 ? 請耐心看下去，我將一一說明。</p>
<h2 id="Why_Currying_?">Why Currying ?</h2><hr>
<h3 id="Reuse_Small_Function">Reuse Small Function</h3><blockquote>
<p>拆成眾多的小 function，以利後續 code reuse</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="function"><span class="keyword">function</span> (<span class="params">hi, target, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>若一次得傳入 3 個 parameter，我們只有一個  <code>greeting()</code> function 可用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = hi =&gt; target =&gt; name =&gt; </span><br><span class="line">   hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br></pre></td></tr></table></figure>
<p>若改用 Currying  寫法，我們總共有 3 個 function 可用：</p>
<ul>
<li><code>greeting()</code></li>
<li><code>greeting()()</code></li>
<li><code>greeting()()()</code> </li>
</ul>
<p>在原本 <code>greeting()</code>，我們要用 reuse，一次就得提供 3 個  argument，否則就無法重複使用。</p>
<p>但 Currying 過的 <code>greeting()</code>，變成了 3 個 function，我們可以依實際需求取用 <code>greeting()</code>，儘管只有 1 個  parameter，也一樣能夠使用 <code>greeting()</code>。</p>
<p>假設我們有個 function，只有 <code>name</code> 為 argument，回傳為 <code>Hello World Sam</code> 或 <code>Hello World Kevin</code>，原本 3 個 argument 的 <code>greeting()</code> 就無法被重複使用，但 Currying 過的 <code>greeting()</code> 就能被重複使用。</p>
<p><strong>ReuseSmallFunction.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = hi =&gt; target =&gt; name =&gt;</span><br><span class="line">    hi + <span class="string">' '</span> + target + <span class="string">' '</span> + name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helloWorld = greeting(<span class="string">'Hello'</span>)(<span class="string">'World'</span>);</span><br><span class="line"><span class="keyword">const</span> words = helloWorld(<span class="string">'Sam'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br></pre></td></tr></table></figure>
<p>第 4 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helloWorld = greeting(<span class="string">'Hello'</span>)(<span class="string">'World'</span>);</span><br></pre></td></tr></table></figure>
<p>藉由 <code>greeting(&#39;Hello&#39;)(&#39;World&#39;)</code> 輕鬆建立新的 <code>helloWorld()</code> ，將來只接受 1 個  argument。</p>
<p>Currying 過的 <code>greeting()</code>，因為顆粒變小，因此能被 reuse 的機會就更高了。</p>
<blockquote>
<p>回想小時候玩樂高積木，哪一種積木最好用 ?</p>
<p>就是顆粒最小的積木最好用，可以說是百搭。Currying 就是把 function 都切成顆粒最小的單一 argument function，因此可藉由 argument 的組合，由一個 function 不斷地組合出新的 function</p>
</blockquote>
<h3 id="Higher_Order_Function">Higher Order Function</h3><blockquote>
<p>可以傳入 function 或傳回 function 的 function，通常會將 <code>重複部分</code> 抽成 higher order function，將 <code>不同部分</code> 以 arrow function 傳入</p>
</blockquote>
<p>要支援 Higher Order Function 有個前提，語言必須支援 First-Class Function，這在 JavaScript 很早就支援，所以沒有問題。</p>
<p><strong>BeforeRefactoring.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prices = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculatePrice1 = prices =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = prices  =&gt;</span><br><span class="line">        prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum(prices) - <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculatePrice2 = prices =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = prices  =&gt;</span><br><span class="line">        prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum(prices) * <span class="number">0.9</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calculatePrice1(prices));</span><br><span class="line"><span class="built_in">console</span>.log(calculatePrice2(prices));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 50</span></span><br><span class="line"><span class="comment">// 54</span></span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculatePrice1 = prices =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = prices  =&gt;</span><br><span class="line">        prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum(prices) - <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>與</p>
<p>10 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculatePrice2 = prices =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = prices  =&gt;</span><br><span class="line">        prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum(prices) * <span class="number">0.9</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>非常類似，最少已經看到以下這部分重複：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = prices  =&gt;</span><br><span class="line">    prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum(prices)</span><br></pre></td></tr></table></figure>
<p>所以想將這部分抽成 Higher Order Function。</p>
<p><strong>HigherOrderFunction.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prices = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = prices =&gt;</span><br><span class="line">    prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculate = prices =&gt; action =&gt;</span><br><span class="line">    action(sum(prices));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calculatePrice = calculate(prices);</span><br><span class="line"><span class="built_in">console</span>.log(calculatePrice(sum =&gt; sum - <span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(calculatePrice(sum =&gt; sum * <span class="number">0.9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 50</span></span><br><span class="line"><span class="comment">// 54</span></span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = prices =&gt;</span><br><span class="line">    prices.reduce((acc, elm) =&gt; acc + elm);</span><br></pre></td></tr></table></figure>
<p>將 <code>sum()</code> 先抽成 function。</p>
<p>第 6 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = prices =&gt; action =&gt;</span><br><span class="line">    action(sum(prices));</span><br></pre></td></tr></table></figure>
<p>將共用部分抽成 <code>calculate()</code> higher order function，argument 除了原本的 <code>prices</code> 外，還多了 <code>action</code>，其中 <code>action</code> 正是 <code>不同部分</code>。</p>
<p>將 <code>sum(prices)</code> 運算結果傳給 <code>action()</code>。</p>
<p> 第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculatePrice = calculate(prices);</span><br></pre></td></tr></table></figure>
<p>由於 <code>calculate()</code> 已經 currying 過，因此 <code>calculate(prices)</code> 回傳為 funciton。</p>
<p>第 10 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(calculatePrice(sum =&gt; sum - <span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(calculatePrice(sum =&gt; sum * <span class="number">0.9</span>));</span><br></pre></td></tr></table></figure>
<p>將 <code>不同部分</code> 分別以 <code>sum =&gt; sum -10</code> 與 <code>sum =&gt; sum * 0.9</code> 帶入 <code>calculate()</code> higher order function，正式計算其值。</p>
<blockquote>
<p>若我們不將 <code>calculate()</code> currying 過，則無法傳回 function，只能回傳值，如此就無法將 <code>不同部分</code> 以 arrow function 傳入</p>
</blockquote>
<h3 id="Function_Composition">Function Composition</h3><blockquote>
<p>將小 function 組合成功能強大的新 function</p>
</blockquote>
<p><strong>ComposeFailed.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prices = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> discount = (rate, prices) =&gt;</span><br><span class="line">    prices.map(elm =&gt; elm * rate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = prices =&gt;</span><br><span class="line">    prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = (...fns) =&gt;</span><br><span class="line">    fns.reduce((f, g) =&gt; (...args) =&gt; f(g(...args)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = compose(sum, discount(<span class="number">0.8</span>));</span><br><span class="line"><span class="built_in">console</span>.log(action(prices));</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> discount = (rate, prices) =&gt;</span><br><span class="line">    prices.map(elm =&gt; elm * rate);</span><br></pre></td></tr></table></figure>
<p>宣告 <code>discount()</code> ，使用傳統 2 個 argument 的寫法。</p>
<p>第 6 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = prices =&gt;</span><br><span class="line">    prices.reduce((acc, elm) =&gt; acc + elm);</span><br></pre></td></tr></table></figure>
<p>宣告 <code>sum()</code>，使用 <code>reduce()</code> 計算 array 的總和。</p>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = (...fns) =&gt;</span><br><span class="line">    fns.reduce((f, g) =&gt; (...args) =&gt; f(g(...args)));</span><br></pre></td></tr></table></figure>
<p>自己寫一個 <code>compose()</code> ，目的將所有 function 組合成一個新的 function。</p>
<blockquote>
<p>實務上可以使用 Ramda.js 的 <code>R.compose()</code> 將 function 組合</p>
</blockquote>
<p>12 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = compose(sum, discount(<span class="number">0.8</span>));</span><br><span class="line"><span class="built_in">console</span>.log(action(prices));</span><br></pre></td></tr></table></figure>
<p>這裡會出問題，因為 <code>discount()</code> 尚未 currying，必須一次提供 2 個 argument，無法單獨只提供 <code>0.8</code> 一個 argument。</p>
<blockquote>
<p>在純 FP 語言如 Haskell、F# 會自動 currying，所以不是問題，但 JavaScript 必須手動 currying，或者使用 Ramda.js 的 <code>R.curry()</code> 將原本的 function 加以 currying</p>
</blockquote>
<p><strong>CurryingCompose.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prices = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> discount = rate =&gt; prices =&gt;</span><br><span class="line">    prices.map(elm =&gt; elm * rate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = prices =&gt;</span><br><span class="line">    prices.reduce((acc, elm) =&gt; acc + elm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = (...fns) =&gt;</span><br><span class="line">    fns.reduce((f, g) =&gt; (...args) =&gt; f(g(...args)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = compose(sum, discount(<span class="number">0.8</span>));</span><br><span class="line"><span class="built_in">console</span>.log(action(prices));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 48</span></span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> discount = rate =&gt; prices =&gt;</span><br><span class="line">    prices.map(elm =&gt; elm * rate);</span><br></pre></td></tr></table></figure>
<p>將 <code>discount()</code> 改成 currying 寫法後，就可以使用 <code>compose()</code> 將 <code>sum()</code> 與 <code>discount()</code> 組合成一個新的 <code>action()</code>。</p>
<blockquote>
<p>為了使用 Function Composition，我們會將多個 argument 的 function，currying 成眾多單一 argument 的 function，然後再加以組合</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JavaScript 不像其他 FP 語言支援自動 currying，但所幸 JavaScript 支援 First-Class Function 與 Closure，因此仍然可以手動將 function 加以 currying，或者使用 Ramda.js 的 <code>R.curry()</code></li>
<li>Currying 會將 function 的顆粒拆成更小，更有利於 reuse 與 compose，亦可透過 currying 回傳 Higher Order Function，避免程式碼重複</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/JavaScriptCurrying" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p>歐陽繼超，<a href="http://www.books.com.tw/products/CN11381868" target="_blank" rel="external">前端函數式攻城指南</a><br><a href="https://medium.com/@martinnovk_22870" target="_blank" rel="external">Martin Novak</a>, <a href="https://medium.com/front-end-hacking/javascript-es6-curry-functions-with-practical-examples-6ba2ced003b1" target="_blank" rel="external">JavaScript ES6 curry functions with practical examples</a><br><a href="https://blog.benestudio.co/@adambene" target="_blank" rel="external">Adam Beme</a>, <a href="https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400" target="_blank" rel="external">Currying in JavaScript ES6</a><br><a href="https://www.youtube.com/channel/UCbGZKLIHpox2l0whz6_RYyg" target="_blank" rel="external">techsith</a>, <a href="https://www.youtube.com/watch?v=oU3LzOO0OGA&amp;t=592s" target="_blank" rel="external">JavaScript Currying function (method) explained Tutorial</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Currying 是 FP 最常用的設計模式]]>
    
    </summary>
    
      <category term="FP" scheme="http://oomusou.io/tags/FP/"/>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 .NET Core 發佈到 Linux ?]]></title>
    <link href="http://oomusou.io/netcore/linux-deployment/"/>
    <id>http://oomusou.io/netcore/linux-deployment/</id>
    <published>2018-05-07T12:23:43.000Z</published>
    <updated>2018-05-11T08:52:56.943Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為跨平台解決方案，我們可在 macOS 或 Windows 開發 .NET Core App，最後再發佈到 Linux 主機上。</p>
<p>.NET Core 提供 FDD 與 SCD 兩種發佈方式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.0.7<br>Docker for Mac 18.03.1-ce-mac65 (24312)<br>Ubuntu 16.04 LTS</p>
<h2 id="建立_Ubuntu_Container">建立 Ubuntu Container</h2><hr>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker run --name <span class="constant">MyUbuntu</span> -dt -v /<span class="constant">Users</span>/<span class="constant">Oomusou</span>/<span class="constant">Code</span><span class="symbol">:/var/code</span> <span class="symbol">ubuntu:</span><span class="number">16.04</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<ul>
<li><strong>–name</strong> : 替 container 取一個人能夠識別的名字 <code>MyUbuntu</code> ( 若省略，Docker 將隨機命名 )</li>
<li><strong>-d</strong> : <code>d</code>etach，建立 container 後，就脫離目前 process</li>
<li><strong>-t</strong> : <code>t</code>erminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><strong>-v</strong> : <code>v</code>olumn，定義 container 與 host os 的共用路徑，<code>:</code> 左側的 <code>/Users/Oomusou/Code</code> 為 host os 的路徑； <code>:</code> 右側的 <code>/var/code</code> 為 Ubuntu container 內部的路徑</li>
<li><strong>ubuntu:16.04</strong> : Ubuntu 的官方 image 名稱，特別指定版本 16.04</li>
</ul>
<blockquote>
<p>因為目前 Ubuntu 18.04 LTS 已經發布，但 .NET Core SCD 尚未支援 Ubuntu 18.04，所以先暫時使用 Ubuntu 16.04</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux000.png" alt="linux000"></p>
<ol>
<li>輸入 <code>docker run</code> 下載 Ubuntu 16.04 LTS image 並執行 container</li>
</ol>
<p><strong>進入 Ubuntu</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><strong>-i</strong> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><strong>-t</strong> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><strong>MyUbuntu</strong> : Container 名稱</li>
<li><strong>bash</strong> : 對 container 下的指令</li>
</ul>
<p><img src="/images/netcore/linux-deployment/linux001.png" alt="linux001"></p>
<ol>
<li>輸入 <code>docker exec -it MyUbuntu bash</code> 進入 Ubuntu</li>
<li>顯示 Ubuntu command prompt</li>
</ol>
<p><strong>安裝 Linux Library</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">0677</span>c0f17607 $ apt-get update</span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ apt-get install -y libunwind8 liblttng-ust0 libcurl3 libssl1<span class="number">.0</span><span class="number">.0</span> libuuid1 libkrb5-<span class="number">3</span> zlib1g libicu55</span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>.NET Core 要能執行在 Linux，除了 .NET Core Runtime Library 外，有些 Linux 的 Library 也必須具備。</p>
<p>根據 <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a> 所建議，一個能執行 .NET Core 的 Ubuntu，必須具備以下 library：</p>
<ul>
<li>libunwind8</li>
<li>liblttng-ust0</li>
<li>libcurl3</li>
<li>libssl1.0.0</li>
<li>libuuid1</li>
<li>libkrb5-3</li>
<li>zlib1g</li>
<li>libicu52 (for 14.X)</li>
<li>libicu55 (for 16.X)</li>
<li>libicu57 (for 17.X)</li>
</ul>
<blockquote>
<p>一般 Ubuntu Desktop 或 Ubuntu Server，這些 library 都已經內建，不用另外安裝，但 Ubuntu Docker 則需要另外安裝這些 library</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux002.png" alt="linux002"></p>
<ol>
<li>輸入 <code>apt-get update</code> 更新本機套件清單</li>
<li>輸入 <code>apt-get …</code> 安裝 Linux library</li>
</ol>
<blockquote>
<p>安裝完 Linux library 後，輸入 <code>exit</code> 暫時離開 container 回到 host os</p>
</blockquote>
<h2 id="建立_-NET_Core_App">建立 .NET Core App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>dotnet new</code> 建立專案。</p>
<ul>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/linux-deployment/linux003.png" alt="linux003"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 建立 .NET Core App</li>
</ol>
<h2 id="SCD">SCD</h2><hr>
<blockquote>
<p>SCD</p>
<p>Self-Contained Deployment</p>
<p>Linux 不需事先安裝 .NET Core SDK，直接將檔案複製到 Linux 即可執行</p>
</blockquote>
<p><strong>以 SCD 發佈</strong><br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="char">$ </span>cd <span class="class">MyConsole</span></span><br><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>dotnet publish -c <span class="class">Release</span> -r linux-x64</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
<li><strong>-r</strong>：<code>r</code>untime，根據指定參數整理成該平台 SCD 所需要的所有檔案，其中 <code>linux-x64</code> 為 Linux 平台</li>
</ul>
<p><img src="/images/netcore/linux-deployment/linux004.png" alt="linux004"></p>
<ol>
<li>進入專案目錄內</li>
<li>輸入 <code>dotnet publish -c Release -r linux-x64</code> 以 SCD 發佈</li>
<li>發佈到 <code>/bin/Release/netcoreapp2.0/linux-x64/publish</code> 目錄下</li>
</ol>
<p><img src="/images/netcore/linux-deployment/linux013.png" alt="linux013"></p>
<p>由於 SCD 不要求 Linux 預先安裝 .NET Core SDK，因此 <code>publish</code> 目錄下多達 178 個檔案。</p>
<p><strong>再次進入 Ubuntu</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux005.png" alt="linux006"></p>
<ol>
<li>輸入 <code>docker exec -it MyUbuntu bash</code> 再次進入 Ubuntu</li>
<li>顯示 Ubuntu command prompt</li>
</ol>
<p><strong>執行 .NET Core App</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>cd /var/code/<span class="constant">CSharp/MyConsole/</span>bin/<span class="constant">Release/</span>netcoreapp2.<span class="number">0</span>/linux-x64</span><br><span class="line">/publish</span><br><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>./<span class="constant">MyConsole</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於目前 Ubuntu container 與 host os 共用目錄，因此不用特別將檔案複製到 Ubuntu 內，直接將目錄切換到 <code>/var/code/CSharp/MyConsole/bin/Release/netcoreapp2.0/linux-x64 /publish</code> 執行 <code>MyConsole</code>。</p>
<p><img src="/images/netcore/linux-deployment/linux006.png" alt="linux006"></p>
<ol>
<li>將目錄切換到  <code>publish</code> 目錄下</li>
<li>執行 <code>MyConsole</code></li>
<li>成功顯示  <code>Hello World!</code></li>
</ol>
<blockquote>
<p>注意此時 Ubuntu 並未安裝任何 .NET Core Runtime，只安裝了 .NET Core 所要求的 library 而已，一般 Ubuntu Desktop 或 Ubuntu Server 甚至連 library 都不用安裝，可以說真的將 <code>publish</code> 複製到 Ubuntu 即可執行</p>
</blockquote>
<h2 id="FDD">FDD</h2><hr>
<blockquote>
<p>FDD</p>
<p>Framework-Dependent Deployment</p>
<p>須先在該平台安裝 .NET Core SDK，然後將相關 DLL 複製過去即可執行</p>
</blockquote>
<p><strong>安裝 Curl Library</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>apt-get install curl</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於需使用 <code>curl</code> 下載 .NET Core SDK，先安裝 <code>curl</code> library。</p>
<p><img src="/images/netcore/linux-deployment/linux007.png" alt="linux007"></p>
<p><strong>安裝 microsoft.qpg</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">0677</span>c0f17607 $ curl https:<span class="comment">//packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span></span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ mv microsoft<span class="class">.gpg</span> /etc/apt/trusted<span class="class">.gpg</span><span class="class">.d</span>/microsoft<span class="class">.gpg</span></span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<ol>
<li>輸入 <code>curl …</code> 下載 <code>microsoft.qpg</code> 到本機</li>
<li>將 <code>microsoft.qpg</code> 移到適當目錄</li>
<li>加入 Microsoft 套件庫位置</li>
</ol>
<p><strong>安裝 .NET Core SDK</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>安裝 <code>apt-transport-https</code> 套件。</p>
<p><img src="/images/netcore/linux-deployment/linux008.png" alt="linux008"></p>
<ol>
<li>輸入 <code>apt-get install apt-transport-https</code> 安裝 <code>apt-transport-https</code>套件</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>apt-get update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於剛剛新加入了 Microsoft 自己的套件庫，所以需要在執行 <code>apt-get update</code> 更新一次本機套件清單。</p>
<p><img src="/images/netcore/linux-deployment/linux009.png" alt="linux009"></p>
<ol>
<li>輸入 <code>apt-get update</code> 更新本機套件清單</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">0677</span>c0f17607 $ apt-get install -y dotnet-sdk-<span class="number">2.1</span><span class="number">.4</span></span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>正式安裝 .NET Core SDK 2.1.4。</p>
<p><img src="/images/netcore/linux-deployment/linux010.png" alt="linux010"></p>
<ol>
<li>輸入 <code>apt-get install -y dotnet-sdk-2.1.4</code> 安裝 .NET Core SDK</li>
</ol>
<blockquote>
<p>安裝完 .NET Core SDK 後，輸入 <code>exit</code> 暫時回到 host os</p>
</blockquote>
<p><strong>以 FDD 發佈</strong></p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="char">$ </span>cd <span class="class">MyConsole</span></span><br><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>dotnet publish -c <span class="class">Release</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<blockquote>
<p>若不加 <code>-r</code>，預設即為 <code>FDD</code></p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux011.png" alt="linux011"></p>
<ol>
<li>進入專案目錄內</li>
<li>輸入 <code>dotnet publish -c Release</code> 以 FDD 發佈</li>
<li>發佈到 <code>/bin/Release/netcoreapp2.0/publish</code> 目錄下</li>
</ol>
<p><img src="/images/netcore/linux-deployment/linux014.png" alt="linux014"></p>
<p>FDD 只需 4 個檔案而已。</p>
<p><strong>再次進入 Ubuntu</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux005.png" alt="linux006"></p>
<ol>
<li>輸入 <code>docker exec -it MyUbuntu bash</code> 再次進入 Ubuntu</li>
<li>顯示 Ubuntu command prompt</li>
</ol>
<p><strong>執行 .NET Core App</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>cd /var/code/<span class="constant">CSharp/MyConsole/</span>bin/<span class="constant">Release/</span>netcoreapp2.<span class="number">0</span>/publish</span><br><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>dotnet <span class="constant">MyConsole.</span>dll</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於目前 Ubuntu container 與 host os 共用目錄，因此不用特別將檔案複製到 Ubuntu 內，直接將目錄切換到 <code>/var/code/CSharp/MyConsole/bin/Release/netcoreapp2.0/publish</code> 執行 <code>MyConsole</code>。</p>
<p><img src="/images/netcore/linux-deployment/linux012.png" alt="linux012"></p>
<ol>
<li>將目錄切換到  <code>publish</code> 目錄下</li>
<li>以 <code>dotnet</code> 執行 <code>MyConsole.dll</code></li>
<li>成功顯示  <code>Hello World!</code></li>
</ol>
<h2 id="Summary">Summary</h2><hr>
<p>我們可發現 SCD 與 FDD 各有優點：</p>
<ol>
<li>SCD 不需 client 事先安裝 .NET Core SDK，但所需檔案數很多</li>
<li>FDD 所需檔案數很少，但 client 必須事先安裝 .NET Core SDK</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>SCD 與 FDD 都能使 .NET Core App 達成跨平台到 Linux 執行</li>
<li>若是開發 Linux Console App，則建議使用 SCD，畢竟 user 不見的有安裝 .NET Core SDK</li>
<li>若是要將 ASP.NET Core 安裝到到 Linux，則使用 SCD 或 FDD 皆可</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以 SCD 與 FDD 發佈到 Linux]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 JavaScript 之 Mixin]]></title>
    <link href="http://oomusou.io/javascript/mixin/"/>
    <id>http://oomusou.io/javascript/mixin/</id>
    <published>2018-05-06T12:23:43.000Z</published>
    <updated>2018-05-07T03:02:03.054Z</updated>
    <content type="html"><![CDATA[<p>實務上常會發現需要兩個物件的 method，但礙於 JavaScript 只能 <code>單一繼承</code> 於 prototype，我們無法同時繼承兩個物件；但透過 Mixin，我們可實現類似 <code>多重繼承</code> 的功能。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Mixin</p>
<p>將物件中所有 method 複製到其他物件，讓該物件馬上擁有新的 method</p>
</blockquote>
<p>實務上我們可能會想要 code reuse 其他物件的 method，直覺會想到 <code>繼承</code>，但：</p>
<ol>
<li>JavaScript 只能單一繼承於 prototype，若我想要 code reuse 到兩個以上的物件呢？</li>
<li>根據 <code>里氏替換原則</code>：<code>父類別能被子類別取代</code>，也就是我們該以 <code>多型</code> 為前提使用繼承，而不該以 <code>code reuse</code> 使用繼承</li>
</ol>
<p>但實務上的確有 code reuse 的需求，既然不能用 <code>繼承</code>，我們該用什麼呢 ?</p>
<p>答案就是：Mixin</p>
<h2 id="Object_Mixin">Object Mixin</h2><hr>
<p><strong>Mixin1.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = &#123;</span><br><span class="line">    area: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LogMixin = &#123;</span><br><span class="line">    startLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    stopLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Button.prototype, CircleMixin, LogMixin);</span><br><span class="line"><span class="comment">// Button.prototype = &#123;...Button.prototype, ...CircleMixin, ...LogMixin&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start log...</span></span><br><span class="line"><span class="comment">// 78.53981633974483</span></span><br><span class="line"><span class="comment">// End log...</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = &#123;</span><br><span class="line">    area: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>CircleMixin</code>，其本質為 object，擁有 <code>area()</code> method。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = &#123;</span><br><span class="line">    startLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    stopLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>LogMixin</code>，其本質亦為 object，擁有 <code>startLog()</code> 與 <code>stopLog()</code> method。</p>
<p>17 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>宣告 <code>Button</code> constructor function，也可使用 ECMAScript 2015 的 <code>class</code> 與 <code>constructor</code>。</p>
<blockquote>
<p>Class 與 construcor function 本質相同，只是 syntax sugar</p>
</blockquote>
<p>27 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(Button.prototype, CircleMixin, LogMixin);</span><br></pre></td></tr></table></figure>
<p>如今我們希望 <code>Button</code> class 同時有 <code>CircleMixin</code> 的 <code>area()</code>，又有 <code>LogMixin</code> 的 <code>startLog()</code> 與 <code>stopLog()</code>。</p>
<p>若使用繼承，JavaScript 無法同時繼承 <code>CircleMixin</code> 與  <code>LogMixin</code>。</p>
<p>且 <code>Button</code> 無論繼承 <code>CircleMixin</code> 與 <code>LogMixin</code> 都違反 <code>里氏替換原則</code>，因為 <code>Button</code> 並非 <code>CircleMixin</code> 或 <code>LogMixin</code> 多型體系下的成員。</p>
<p>但透過 <code>Object.assign()</code>，我們能輕易將 <code>CircleMixin</code> 與 <code>LogMixin</code> 的所有 method 複製到 <code>Button.prototype</code>，讓 <code>Button</code> class 瞬間有了新的 method。</p>
<p>28 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.prototype = &#123;...Button.prototype, ...CircleMixin, ...LogMixin&#125;;</span></span><br></pre></td></tr></table></figure>
<p>亦可使用 ECMAScript 2015 的 <code>…</code> object spread operator，將所有物件 property 展開，重新合併重新的物件給 <code>Button.prototype</code>。</p>
<p>30 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br></pre></td></tr></table></figure>
<p>經過 Mixin 之後，<code>button</code> 物件就有了 <code>startLog()</code>、<code>area()</code> 與 <code>stopLog()</code> 三個 method，重點還是來自於不同的 Mixin 物件。</p>
<blockquote>
<p>我們可發現 Mixin 為 object，以 Object Composition 方式組合出新功能，與 GoF  所謂的 <code>多用組合，少用繼承</code> 想法不謀而合，同時也解決了 <code>單一繼承</code> 與 <code>里氏替換原則</code> 所面臨的挑戰</p>
</blockquote>
<h2 id="Class_Mixin">Class Mixin</h2><hr>
<p><strong>Mixin2.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    area() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LogMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    startLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stopLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">LogMixin</span>(<span class="title">CircleMixin</span>(<span class="title">Base</span>)) </span>&#123;</span><br><span class="line">    constructor(radius) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start log...</span></span><br><span class="line"><span class="comment">// 78.53981633974483</span></span><br><span class="line"><span class="comment">// End log...</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    area() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>CircleMixin</code>，其本質為 function，回傳擁有 <code>area()</code> 的 class。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    startLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stopLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>LoginMixin</code>，其本質為 function，回傳擁有 <code>startLog()</code> 與  <code>stopLog()</code> 的 class。</p>
<p>17 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">LogMixin</span>(<span class="title">CircleMixin</span>(<span class="title">Base</span>)) </span>&#123;</span><br><span class="line">    constructor(radius) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>extends</code> 透過 <code>CircleMixin()</code> 與 <code>LogMixin()</code>，達成類似 <code>多重繼承</code> 的效果。</p>
<blockquote>
<p>語法上雖然看似 <code>繼承</code>，實則為 Class Composition，與 Object Mixin 差異在於：</p>
<ul>
<li>Object Mixin 是建立 object 後再 <code>組合</code> object</li>
<li>Class Mixin 是先組合 class 再建立 object</li>
</ul>
</blockquote>
<p>26 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br></pre></td></tr></table></figure>
<p>對 client 而言，使用 Object Mixin 與 Class Mixin ，用起來都一樣。</p>
<h2 id="Functional_Mixin">Functional Mixin</h2><hr>
<p><strong>Mixin3.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.area = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LogMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.stopLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">CircleMixin.call(Button.prototype);</span><br><span class="line">LogMixin.call(Button.prototype);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start log...</span></span><br><span class="line"><span class="comment">// 78.53981633974483</span></span><br><span class="line"><span class="comment">// End log...</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.area = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 <code>CircleMixin</code> 由 object 改成 function。</p>
<p>使用 <code>this.area</code> 宣告物件的 method。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.stopLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 <code>LoginMixin</code> 由 object 改成 function。</p>
<p>使用 <code>this.startLog</code> 與 <code>this.stopLog</code> 宣告物件的 method。</p>
<p>17 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>宣告 <code>Button</code> constructor function，也可使用 ECMAScript 2015 的 <code>class</code> 與 <code>constructor</code>。</p>
<p>27 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CircleMixin.call(Button.prototype);</span><br><span class="line">LogMixin.call(Button.prototype);</span><br></pre></td></tr></table></figure>
<p>在 <code>CircleMixin()</code> 與 <code>LoginMixin()</code> 中都使用了 <code>this</code>，在 JavaScript 中，最重要的就是 <code>this</code> 到底是誰 ?</p>
<p>我們使用 <code>Function.call()</code> 將 <code>this</code> 指向 <code>Button.prototype</code>，因此 <code>area()</code>、<code>startLog()</code> 與 <code>stopLog()</code> 就自然成為 <code>Button</code> 的 method。</p>
<p>30 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br></pre></td></tr></table></figure>
<p>對 client 而言，無論使用 Object Mixin 、Class Mixin 或 Functional Mixin，用起來都一樣。</p>
<blockquote>
<p>Functional Mixin 使用了 <code>this</code>，因此必須搭配 <code>Function.call()</code> 指定 <code>this</code> 為何物件</p>
</blockquote>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Q：Mixin 的價值何在？</p>
</blockquote>
<ol>
<li>解決 <code>單一繼承</code> 所面臨的難題</li>
<li>解決 <code>里氏替換原則</code> 將 <code>繼承</code> 用在 <code>多型</code> 的限制</li>
</ol>
<blockquote>
<p>Q：Mixin 實務上該用在哪裡 ?</p>
</blockquote>
<ol>
<li>單純為了 code reuse，且之間並沒有 <code>多型</code> 的關係，因此不適合使用 <code>繼承</code></li>
<li>需要實現 Composition</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有別於 <code>繼承</code>，Mixin 提供了以 Composition 為基礎的解決方案</li>
<li>Functional Mixin 需要有 <code>this</code> 與 <code>call</code> 觀念，門檻較高</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/JavaScriptMixin" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://twitter.com/angusTweets" target="_blank" rel="external">Angus Croll</a>, <a href="https://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/" target="_blank" rel="external">A fresh look at JavaScript Mixins</a><br><a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">MDN web docs</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">Classes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[動態組合物件取代繼承]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Higher Order Function 抽出共用 ?]]></title>
    <link href="http://oomusou.io/csharp/higer-order-function/"/>
    <id>http://oomusou.io/csharp/higer-order-function/</id>
    <published>2018-05-04T13:23:43.000Z</published>
    <updated>2018-05-04T15:16:52.215Z</updated>
    <content type="html"><![CDATA[<p>無論使用 TDD 或 Design Pattern，最後一定會經歷 Refactoring 階段，處理程式碼共用部分，避免違反 DRY 原則。</p>
<p>在傳統 OOP，我們會使用 <code>Pull Member Up</code> 將共用 method 抽到 abstract class；但若使用 FP，我們則有新的武器：將共用部分抽成 Higher Order Function，將不共用部分以 Lambda 傳入。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.0.7<br>C# 7.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p><strong>Apple.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Apple;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _discount = <span class="number">0.9</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> PadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _discount * _products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Nintendo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Nintendo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nintendo</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _minus = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Nintendo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Switch(),</span><br><span class="line">                <span class="keyword">new</span> Zelda()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _products.Sum(product =&gt; product.GetPrice()) - _minus;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Apple.cs</code> 與 <code>Nintendo.cs</code> 都實踐相同的 <code>IPrice</code>，且我們已經看到有兩處程式碼非常相近：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br></pre></td></tr></table></figure>
<p>都具有 <code>_products</code> List。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _discount * _products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _products.Sum(product =&gt; product.GetPrice()) - _minus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也非常相近，都共用 <code>Products.Sum(product =&gt; product.GetPrice())</code>。</p>
<h2 id="OOP_Refactoring">OOP Refactoring</h2><hr>
<p><strong>ComboBase.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComboBase</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> List&lt;IPrice&gt; Products;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽出 <code>ComboBase</code> abstract class，將重複部分全放在 parent class。</p>
<p>但無論怎麼抽 class，一樣都實踐 <code>IPrice</code> interface，因此對 client 沒有影響，符合 <code>開放封閉原則</code>。</p>
<p><strong>Apple.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Apple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _discount = <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> PadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _discount * <span class="keyword">base</span>.GetPrice();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 8 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">ComboBase</span></span><br></pre></td></tr></table></figure>
<p>從原本實踐 <code>IPrice</code> interface，改繼承 <code>ComboBase</code>。</p>
<p>由於 <code>ComboBase</code> 也是實踐 <code>IPrice</code>，因此對 client 沒有影響，符合 <code>開放封閉原則</code>。</p>
<p>22 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _discount * <span class="keyword">base</span>.GetPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於 <code>ComboBase.GetPrice()</code> 已經實作 <code>Products.Sum(product =&gt; product.GetPrice())</code>，因此使用 <code>base.GetPrice()</code> 呼叫 parent class 的 <code>GetPrice()</code>。</p>
<p><strong>Nintendo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Nintendo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nintendo</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _minus = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Nintendo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Switch(),</span><br><span class="line">                <span class="keyword">new</span> Zelda()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">base</span>.GetPrice() - _minus;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>21 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">base</span>.GetPrice() - _minus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣使用 <code>base.GetPrice()</code> 呼叫 parent class 的 <code>GetPrice()</code>，只是在此是 <code>- _minus</code> 。</p>
<blockquote>
<p>這就是 OOP 典型的手法，將共用部分 <code>Pull Member Up</code> 到 parent class，並將 method 開成 <code>virtual</code>，再有 child class 去 <code>override</code> method，且使用 <code>base</code> 去呼叫 parent class 的 method</p>
</blockquote>
<h2 id="FP_Refactoring">FP Refactoring</h2><hr>
<p>在 FP 由於有了 Higher Order Function，解決 DRY 有了新的手法：</p>
<blockquote>
<p>將共用部分抽成 Higher Order Function，將不共用部分以 Lambda 傳入</p>
</blockquote>
<p><strong>ComboBase.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComboBase</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> List&lt;IPrice&gt; Products;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">GetSumOfPrice</span>(<span class="params">Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; action</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> action(Products.Sum(product =&gt; product.GetPrice()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">GetSumOfPrice</span>(<span class="params">Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; action</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> action(Products.Sum(product =&gt; product.GetPrice()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將共用部分抽成 <code>GetSumOfPrice()</code>，<code>action</code> 參數部分則傳入不共用部分。</p>
<p>將共用的 <code>Products.Sum(product =&gt; product.GetPrice())</code> 傳入 <code>action()</code> 的參數。</p>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure>
<p>原本 <code>GetPrice()</code> 使用 <code>abstract</code> 即可，由 child class 負責實作。</p>
<p><strong>Apple.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Apple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _discount = <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> PadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> GetSumOfPrice(sum =&gt; _discount * sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>21 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetSumOfPrice(sum =&gt; _discount * sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 parent class 的 <code>GetSumOfPrice()</code> ，回傳即為 lambda 的第一個參數 <code>sum</code> ，既然拿到 <code>sum</code>，我們就能在 <code>=&gt;</code> 之後做任何我們想做的運算。</p>
<p><strong>Nintendo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Nintendo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nintendo</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _minus = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Nintendo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Switch(),</span><br><span class="line">                <span class="keyword">new</span> Zelda()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> GetSumOfPrice(sum =&gt; sum - _minus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣呼叫 parent class 的 <code>GetSumOfPrice()</code> ，回傳即為 lambda 的第一個參數 <code>sum</code> ，既然拿到 <code>sum</code>，我們就能在 <code>=&gt;</code> 之後做任何我們想做的運算。</p>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Q : 兩種抽共用的方式都可行，有什麼差別呢 ?</p>
</blockquote>
<p>若以結果論，的確 OOP 與 FP 方法都可行，但 FP 方式語意較佳。</p>
<h3 id="OOP">OOP</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OOP 為了要使用 <code>virtual</code> 與 <code>override</code> ，使用同一個 method 名稱，硬將 <code>Products.Sum(product =&gt; product.GetPrice())</code> 抽到 parent class 的 <code>GetPrice()</code>。</p>
<p>實務上常會發現，為了抽共用，常將與 method 名稱不符的 code 抽到 parent class。</p>
<p>如 <code>Products.Sum(product =&gt; product.GetPrice())</code> 與 <code>GetPrice()</code> 並不相符，應該要取名 <code>GetSumOfPrice()</code> 較為恰當。</p>
<p>此外，將 <code>Products.Sum(product =&gt; product.GetPrice())</code> 放到 parent class 的 <code>GetPrice()</code>，會使得 code 被綁在 <code>IPrice</code> 繼承體系，這段 code 將來幾乎無法再重構。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _discount * <span class="keyword">base</span>.GetPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Child class 無法藉由 <code>base.GetPrice()</code> 得知語意，一定得 trace 進 parent class 才知道 <code>base.GetPrice()</code> 到底在幹什麼。</p>
<h3 id="FP">FP</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">GetSumOfPrice</span>(<span class="params">Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; action</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> action(Products.Sum(product =&gt; product.GetPrice()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GetSumOfPrice()</code> 與  <code>Products.Sum(product =&gt; product.GetPrice())</code> 名實相符。</p>
<p>且 <code>GetSumOfPrice()</code> 並非 <code>IPrice</code> 繼承體系的一員，將來很容易將 <code>GetSumOfPrice()</code> 重構到其他 class，甚至重構到 static helper class，非常靈活。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetSumOfPrice(sum =&gt; _discount * sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Child class 也非常清楚看到 <code>GetSumOfPrice()</code>，且回傳值就是 <code>sum</code>，語意非常清楚，不必 trace 到 parent class。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Pull Member Up</code> 是典型 OOP 的重構手法，但藉由 FP 的 Higher Order Function，一樣可以實踐 DRY 原則，且更為靈活</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 FP 方式處理共用]]>
    
    </summary>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 iTunes 不要對 iOS Device 備份 ?]]></title>
    <link href="http://oomusou.io/macos/ItunesNotBackup/"/>
    <id>http://oomusou.io/macos/ItunesNotBackup/</id>
    <published>2018-05-04T12:23:43.000Z</published>
    <updated>2018-05-04T09:44:44.093Z</updated>
    <content type="html"><![CDATA[<p>若要對 iOS device 同步 mp3，預設會先對 iOS device 備份，會浪費很多時間，如何讓 iTune 永遠不要備份呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>iTunes 12.7.4.80</p>
<h2 id="Recipe">Recipe</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com<span class="class">.apple</span><span class="class">.iTunes</span> DeviceBackupsDisabled -bool true</span><br></pre></td></tr></table></figure>
<p>在 terminal 貼上以上指令，iTunes 就永遠不再備份了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>不備份 iOS 當然也有風險，不過實務上建議將重要資料直接備份在雲端，如 iCloud 或 Dropbox，而不用整個 iOS device 備份</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[必須在 terminal 下指令]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 Finder 顯示隱藏檔 ?]]></title>
    <link href="http://oomusou.io/macos/finder-show-hidden-files/"/>
    <id>http://oomusou.io/macos/finder-show-hidden-files/</id>
    <published>2018-05-02T12:23:43.000Z</published>
    <updated>2018-05-02T06:06:25.921Z</updated>
    <content type="html"><![CDATA[<p>Finder 預設不會顯示隱藏檔，也沒有 GUI 可以設定，必須直接在 terminal 下指令。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4</p>
<h2 id="Recipe">Recipe</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults <span class="command">write</span> com.apple.finder AppleShowAllFiles -<span class="type">boolean</span> <span class="constant">true</span> ; killall Finder</span><br></pre></td></tr></table></figure>
<p>在 terminal  貼上以上指令，Finder 就會顯示隱藏檔了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>對初學者不顯示隱藏檔是安全的，但對 power user 卻不方便，透過以上設定，Finder 就可正常顯示隱藏檔了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[必須在 terminal 下指令]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決 SonarLint 的 Analyzer Not Loaded 錯誤訊息 ?]]></title>
    <link href="http://oomusou.io/sonarqube/sonarlint-analyzer-not-loaded/"/>
    <id>http://oomusou.io/sonarqube/sonarlint-analyzer-not-loaded/</id>
    <published>2018-04-30T14:23:43.000Z</published>
    <updated>2018-04-30T02:57:49.875Z</updated>
    <content type="html"><![CDATA[<p>當在 IntelliJ 平台使用 SonarLint 時，只要在 <code>SonarLint General Settings</code> 下按 <code>Update Binding</code> 就會出現 <code>Analyzer Not Loaded</code> 的錯誤訊息，這該如何解決呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 6.7.2 LTS<br>SonarTS 1.6<br>PhpStorm 2018.1<br>SonarLint 3.3.0.2482</p>
<h2 id="Sympton">Sympton</h2><hr>
<p><img src="/images/sonarqube/sonarlint-analyzer-not-loaded/sonarts000.png" alt="sonarts000"></p>
<p><strong><em>PhpStorm -&gt; Other Settings -&gt; SonarLint General Settings</em></strong></p>
<ol>
<li>當按下 <code>Update binding</code>，欲將 SonarQube server 上的 project lists、rules、profile 下載到本機</li>
<li>出現 <code>Analyzers Not Loaded</code> 錯誤訊息</li>
</ol>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p>SonarLint 3.3.0.2482 必須搭配使用 SonarTS 1.5 以上，但是 SonarQube 6.7.2 LTS 預設提供為 SonarTS 1.1，因此 SonarLint 無法載入 TypeScript analyzer。</p>
<blockquote>
<p>SonarQube 7.1 預設就提供 SonarTS 1.6，就不會有這個問題</p>
</blockquote>
<h2 id="Recipe">Recipe</h2><p><img src="/images/sonarqube/sonarlint-analyzer-not-loaded/sonarts001.png" alt="sonarts001"></p>
<ol>
<li>到 SonarTS 的 <a href="https://github.com/SonarSource/SonarTS/releases" target="_blank" rel="external">GitHub</a> 下載最新版 SonarTS 1.6</li>
<li>選擇 <code>.jar</code> 格式下載</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-analyzer-not-loaded/sonarts002.png" alt="sonarts002"></p>
<ol>
<li>到 SonarQube 安裝目錄下的 <code>extensions/plugins</code> </li>
<li>將原本的 <code>sonar-typescript-plugin-1.1.0.1079.jar</code> 刪除，以 <code>sonar-typescript-plugin-1.6.0.2388.jar</code> 取代之</li>
<li>重新啟動 SonarQube</li>
</ol>
<p>在 PhpStorm 重新 <code>Update binding</code> 就不會出現錯誤訊息了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若使用 SonarQube 最新版就不會有這個問題，但若使用 SonarQube LTS，因為 SonarTS 的版本較舊，與 SonarLint 搭配就會有問題</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[SonarTS 版本太舊所導致]]>
    
    </summary>
    
      <category term="SonarLint" scheme="http://oomusou.io/tags/SonarLint/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何重灌 macOS High Sierra ?]]></title>
    <link href="http://oomusou.io/macos/install-clean-high-sierra/"/>
    <id>http://oomusou.io/macos/install-clean-high-sierra/</id>
    <published>2018-04-30T13:23:43.000Z</published>
    <updated>2018-04-30T02:45:59.428Z</updated>
    <content type="html"><![CDATA[<p>High Sierra 引入 APFS 新的磁碟格式後，優點是對 SSD 最佳化，效率很高，缺點是 APFS 使的 Time Machine 之前的備份面臨了極大的挑戰，除了無法整顆硬碟還原外，連要重新安裝 High Sierra 也很不方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>MacBook Pro Retina, 15”, Mid 2014<br>macOS 10.13.4</p>
<h2 id="Sympton">Sympton</h2><hr>
<ol>
<li>雖然一直更新到 High Sierra，也都一直有做 Time Machine 備份，但真的要整顆 SSD 還原時卻無法還原，出現 <code>An error occurred while restoring from the backup</code> 錯誤訊息</li>
<li>因為還原之前已經選擇 erase 整顆 SSD，因此只能選擇 reinstall macOS 一途</li>
<li>真的重灌 High Sierra 時，到最後會出現 <code>Could not create preboot volumn for APFS install</code></li>
</ol>
<p>也就是面臨進退兩難，退無法使用 Time Machine 還原，進也無法重灌 High Sierra 的窘境。</p>
<blockquote>
<p>這些問題都是我在 MBPR Mid 2014 所遇到，不確定其他 MBPR 是否也如此</p>
</blockquote>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p>所有的問題都出在 APFS。</p>
<ol>
<li>Time Machine 目前對於 APFS  的支援，之前舊的備份無法整顆 SSD 還原</li>
<li>High Sierra 無法直接安裝在 APFS 格式的 SSD，僅能由 <code>Mac OS Extented (Journaled)</code> 格式的 SSD 安裝，在升級成 APFS 格式</li>
</ol>
<p><code>1</code> 基本上無解，只能將原本 Time Machine 備份砍掉後，然後備份重新開始。</p>
<p><code>2</code> 可自行將 SSD 重新格式化成 <code>Mac OS Extented (Journaled)</code> 格式後即可重灌。</p>
<h2 id="Recipe">Recipe</h2><hr>
<blockquote>
<p>由於無法截圖，只能以文字描述</p>
</blockquote>
<ul>
<li>以 ⌘ + R 開機，在 <code>Disk Utility</code> 將 APFS 格式的 SSD 刪除，使 MBPR 處於沒有 SSD 狀態</li>
</ul>
<blockquote>
<p>SSD 一旦被格式化成 APFS 之後，就無法格式化成其他格式，因此只能將 SSD 刪除</p>
</blockquote>
<ul>
<li>再以 ⌘ + R 重新開機，因為已經沒 SSD 可以開機，BIOS 會自動要求連上網路，下載最小可開機所需要的檔案</li>
<li>進入 <code>Disk Utility</code>，將 SSD 格式化成 <code>Mac OS Extented (Journaled)</code></li>
<li>離開 <code>Disk Utility</code>，進入 <code>Reinstall OS X</code>，會出現 <code>OS X Yosemite</code> 安裝畫面</li>
</ul>
<blockquote>
<p>這裡預估不同 MBPR 的版本會不同，當時 MBPR Mid 2014 所附的版本就是 Yosemite</p>
</blockquote>
<ul>
<li>Yosemite 安裝完成後，再由 App Store 更新成 High Sierra</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>APFS 格式雖然適合 SSD，但對於 Resintall OS X 與 Time Machine 並不友善，尤其舊的備份竟然無法在 APFS 整顆 SSD 還原</li>
<li>High Sierra 無法直接安裝在 APFS，雖然可以手動格式化成 <code>Mac OS Extented (Journaled)</code>，但要先安裝 Yosemite，才能升級為 High Sierra，這也使得 Reinstall OS X 變得非常麻煩</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[因為 APFS 所導致的問題]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
</feed>
