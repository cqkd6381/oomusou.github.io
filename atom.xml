<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://oomusou.io/"/>
  <updated>2018-10-18T10:08:21.966Z</updated>
  <id>https://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Haskell 之 Function]]></title>
    <link href="https://oomusou.io/haskell/function/"/>
    <id>https://oomusou.io/haskell/function/</id>
    <published>2018-10-18T13:23:43.000Z</published>
    <updated>2018-10-18T10:08:21.966Z</updated>
    <content type="html"><![CDATA[<p>Function 為 Haskell 最重要的元素，首先來看 Haskell 如何定義 function，也順便複習 F# 、ECMAScript 與 C#。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>GHC 8.4.3</p>
<h2 id="Haskell">Haskell</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foo</span> x y = x + y</span><br><span class="line"><span class="title">too</span> = \x y -&gt; x + y</span><br></pre></td></tr></table></figure>
<ul>
<li>直接定義 <code>foo</code> function，parameter 以 space 隔開，而 parameter 與 body 之間以 <code>=</code> 隔開</li>
<li>使用 Lambda Function，Haskell 規定一開始用 <code>\</code> 表示 Lambda Function，而 parameter 與 body 之間以 <code>-&gt;</code> 隔開</li>
</ul>
<h2 id="FSharp">FSharp</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo x y = x + y</span><br><span class="line"><span class="keyword">let</span> too = <span class="keyword">fun</span> x y -&gt; x + y</span><br></pre></td></tr></table></figure>
<p>F# 與 Haskell 已經非常類似：</p>
<ul>
<li><p>直接定義 <code>foo</code> function，一開始使用 <code>let</code>，之後寫法與 Haskell 相同</p>
</li>
<li><p>使用 Lambda Function，F# 規定一開始使用 <code>fun</code>，之後寫法與 Haskell 相同</p>
</li>
</ul>
<h2 id="ECMAScript">ECMAScript</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> too = (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<ul>
<li>ES5 使用 Anonymous Function 定義 function</li>
<li>ES6 使用 Arrow Function 表示定義 function</li>
</ul>
<h2 id="CSharp">CSharp</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; foo = (x, y) =&gt; x + y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">too</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span>=&gt; x + y;</span><br></pre></td></tr></table></figure>
<ul>
<li>C# 3 使用 Func 使用 Delegate 定義 function</li>
<li>C# 7 使用 Local Function 定義 fuction</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>各語言間只是語法稍有差異，但使用 function 的觀念都是相同的</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[學而時習之，不亦悅乎]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何執行 Haskell ?]]></title>
    <link href="https://oomusou.io/haskell/ghc/"/>
    <id>https://oomusou.io/haskell/ghc/</id>
    <published>2018-10-17T15:23:43.000Z</published>
    <updated>2018-10-18T01:38:55.799Z</updated>
    <content type="html"><![CDATA[<p>Haskell 提供各種執行方式，除了可編譯之外，還提供 REPL、Script，也可直接在 IDE 內執行，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.14<br>GHC 8.4.3<br>Haskell for Mac 1.6.0</p>
<h2 id="安裝_GHC">安裝 GHC</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install ghc</span><br></pre></td></tr></table></figure>
<p>使用 Homebew 安裝 GHC。</p>
<h2 id="執行_GHCi">執行 GHCi</h2><hr>
<p>預設 prompt 為 <code>Prelude&gt;</code>，可自行修改成 <code>GHCi&gt;</code>。</p>
<p><strong>.ghci</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="operator"><span class="keyword">set</span> <span class="keyword">prompt</span> <span class="string">"GHCi&gt; "</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc000.png" alt="ghc000"></p>
<ul>
<li>在 home directory 建立 <code>.ghci</code>，設定 prompt 為 <code>GHCi</code>。</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ghci</span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc001.png" alt="ghc001"></p>
<ol>
<li>輸入 <code>ghci</code></li>
<li>Prompt 為 <code>GHCi</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ghci</span>&gt; <span class="pseudo">:q</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc002.png" alt="ghc002"></p>
<ol>
<li>輸入 <code>:q</code> 離開 GHCi。</li>
</ol>
<h2 id="編譯執行_Haskell">編譯執行 Haskell</h2><hr>
<p>GHC 可將 Haskell 編譯成執行檔執行。</p>
<p><strong>HelloWorld.hs</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = </span><br><span class="line">  print <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>以 Haskell 印出簡單的 <code>Hello World</code>。</p>
<blockquote>
<p>main 為 Haskell 執行檔第一個執行的 function</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ghc <span class="constant">HelloWorld.</span>hs</span><br></pre></td></tr></table></figure>
<p>使用 <code>ghc</code> 編譯 <code>HelloWorld.hs</code>。</p>
<p><img src="/images/haskell/ghc/ghc003.png" alt="ghc003"></p>
<p><img src="/images/haskell/ghc/ghc004.png" alt="ghc004"></p>
<ol>
<li>編譯出 <code>HelloWorld</code> 執行檔，也一併編譯出 <code>.hi</code>與 <code>.o</code> 等中間檔</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./<span class="constant">HelloWorld</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc005.png" alt="ghc005"></p>
<ol>
<li>直接執行 <code>hello-world</code> 執行檔。</li>
</ol>
<h2 id="以_GHCi_執行_Haskell">以 GHCi 執行 Haskell</h2><hr>
<p>Haskell 亦可以使用 REPL 方式執行。</p>
<p><img src="/images/haskell/ghc/ghc010.png" alt="ghc010"></p>
<ol>
<li>輸入 <code>ghci</code> 進去 GHCi</li>
<li>輸入 <code>:l</code> + <code>檔名</code> 載入檔案</li>
<li>在 GHCi 執行 function</li>
</ol>
<h2 id="以_runghc_執行_Script">以 runghc 執行 Script</h2><hr>
<p>Haskell 也可以不用編譯，直接以 script 形式執行。</p>
<p><img src="/images/haskell/ghc/ghc011.png" alt="ghc011"></p>
<ol>
<li><code>runghc</code> + <code>檔案名稱</code> 即可立即執行</li>
</ol>
<h2 id="直接執行_Script">直接執行 Script</h2><hr>
<p>也可如同 Bash 一樣，直接執行 script。</p>
<p><strong>HelloWorld.hs</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#!/usr/bin/env runghc</span></span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = </span><br><span class="line">  print <span class="string">"Hello World!"</span></span><br></pre></td></tr></table></figure>
<p>在第一行加上 <code>#!/usr/bin/env runghc</code></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x <span class="constant">HelloWorld.</span>hs</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 設定 <code>HelloWorld.hs</code> 能被執行。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./<span class="constant">HelloWorld.</span>hs</span><br></pre></td></tr></table></figure>
<p>直接執行 <code>HelloWorld.hs</code>。</p>
<p><img src="/images/haskell/ghc/ghc008.png" alt="ghc008"></p>
<h2 id="Haskell_for_Mac">Haskell for Mac</h2><hr>
<p><img src="/images/haskell/ghc/ghc006.png" alt="ghc006"></p>
<ol>
<li>建立 <code>HelloWorld.hs</code></li>
<li>在左側建立 <code>main</code> function</li>
<li>在右側 <code>Run Playground</code> 執行 function，相當於 GHCi</li>
<li>下方顯示結果</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Haskell 除了可編譯外，尚提供 REPL 與 Script 模式，無論你習慣編譯式語言或者 Script，都可以找到自己習慣的方式</li>
<li>Haskell 也可以類似 Bash 方式直接執行</li>
<li>若使用 Haskell for Mac 這類 IDE，也類似 GHCi，可以每個 function 單獨測試</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Haskell 除了編譯，也提供 REPL 與 Script]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Asynchronous]]></title>
    <link href="https://oomusou.io/ecmascript/asynchronous/"/>
    <id>https://oomusou.io/ecmascript/asynchronous/</id>
    <published>2018-10-07T13:23:43.000Z</published>
    <updated>2018-10-07T14:46:06.077Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 對 Asynchronous 總共有 Promise、Generator 與 Async Await 三種支援，其中 Generator 屬於較進階的應用，主要是在寫 library，但 Promise 與 Async Await 則非常重要，寫 application 也很常用到。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015 (Promise)<br>ECMAScript 2017 (Async Await)</p>
<h2 id="API">API</h2><hr>
<p><strong>productApi.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; API &#125; <span class="keyword">from</span> <span class="string">'../environment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  fetchProducts: () =&gt; axios.get(<span class="string">`<span class="subst">$&#123;API&#125;</span>/products`</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>實務上我們會將 API 部分另外寫在 <code>api</code> 目錄下，且另外寫 <code>fetchXXX()</code> method，但 <code>axios.get()</code> 回傳的到底是什麼型別呢？</p>
<p>是 ECMAScript 2015 新的 <code>Promise</code> 型別。</p>
<h2 id="Promise">Promise</h2><hr>
<p>由於 Asynchronous 在所有 Synchronous 執行完才會執行，因此對於 AJAX 回傳的資料，對於 Synchronous 而言，屬於一種 <code>未來值</code>。</p>
<p>也就是 AJAX 所回傳的資料，將來一定會有，但具體時間未知，只能先回傳 <code>Promise</code> 物件給你，一旦 AJAX 抓到資料，你就可以用 Promise 去換真實的資料。</p>
<p><img src="/images/ecmascript/async/async000.jpg" alt="async000"></p>
<p>就類似你去麥當勞買漢堡，錢都給了，但漢堡還沒做好，但未來一定會有，也是 <code>未來值</code>，因此店員會給你 <code>取餐單</code>，將來你可以用 <code>取餐單</code> 去換漢堡。</p>
<p><code>取餐單</code> 就是 Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">const</span> response = res =&gt;</span><br><span class="line">    <span class="keyword">this</span>.products = res.data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> error = e =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> done = () =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line"></span><br><span class="line">  productApi</span><br><span class="line">    .fetchProducts()</span><br><span class="line">    .then(response)</span><br><span class="line">    .catch(error)</span><br><span class="line">    .finally(done);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>fetchProducts()</code> 會回傳 <code>Promise</code> 物件，該物件總共有 3 個  operator (也是 Higher Order Function)。</p>
<ul>
<li><strong>then()</strong>：傳入要獲取 AJAX 資料的 function，當 AJAX 抓到資料後，會自己執行 function</li>
<li><strong>catch()</strong>：傳入若 AJAX 錯誤所執行的 function，當 AJAX 出錯時，會自己執行 function</li>
<li><strong>finally()</strong>：傳入 AJAX 最後所執行的 function，當 AJAX 執行完正，會自己執行 function</li>
</ul>
<blockquote>
<p><code>finally()</code> 目前在 ECMAScript 定義為 stage 4，也就是即將 ECMAScript 正式定義，重要是 Babel 已經率先支援，因此可安心使用</p>
</blockquote>
<h2 id="Async_Await">Async Await</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> mounted() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> productApi.fetchProducts();</span><br><span class="line">    <span class="keyword">this</span>.products = response.data;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Promise 屬於 FP 觀念下的產物  (也就是 Monad Pattern)，若你習慣 Imperative 思維，也可以透過 <code>Async Await</code> 將 Asynchronous 寫的很 Synchronous。</p>
<p>將 function 前面宣告 <code>async</code>，表示此為 Asynchronous Function，也就是內部將使用 <code>await</code>。</p>
<p><code>response</code> 為 <code>productApi.fetchProducts()</code> 所回傳的 Promise，是 <code>未來值</code>，<code>觀念上</code> 會 await 等 <code>response</code> 成真後才會繼續執行。</p>
<p>因為看起來很像 Synchronous 寫法，因此可以使用原本的 <code>try catch finally</code>。</p>
<blockquote>
<p>Async Await 只是程式碼看起來很像 Synchronous，但起本質仍然是 Asynchronous，因為 await 一定要對方回傳 Promise 才能使用，所以是百分之百的 Syntax Sugar</p>
<p>Async Await 來自於 C# 5，在 ECMAScript 2017 正式定案，Babel 也完美支援</p>
</blockquote>
<h2 id="Why_Promise_?">Why Promise ?</h2><hr>
<p>由 JavaScript 的 Event Loop Model 可知，有三種屬於 Asynchronous：</p>
<ul>
<li>DOM</li>
<li>AJAX (XMLHttpRequest)</li>
<li>setTimeout()</li>
</ul>
<p>由於前端一定要使用 AJAX 呼叫 API，這屬於 Asynchronous 行為，會被安排在 Callback Queue ，等 Synchronous 執行完，最後才執行 Asynchronous。</p>
<p>在 ES5 之前，若 Asynchronous 之間有相依的先後關係，在 jQuery + Callback 只能這樣寫：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'/products'</span>, (err, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> product = ret.json();</span><br><span class="line">        $.get(<span class="string">'/product/$&#123; product[0].id&#125;'</span>, (err, res) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> item = res.json();</span><br><span class="line">                <span class="built_in">console</span>.log(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這就是有名的 <strong>Callback Hell</strong>：</p>
<ul>
<li>很容易寫出巢狀很深的 code 難以維護</li>
<li>每個 Callback 都要自己維護 Exception</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/products'</span>)</span><br><span class="line">  .then(res =&gt; res.json())</span><br><span class="line">  .then(product =&gt; fetch(<span class="string">'/products/$&#123; prdouct[0].id&#125;'</span>))</span><br><span class="line">  .then(res =&gt; res.json())</span><br><span class="line">  .then(item =&gt; <span class="built_in">console</span>.log(item));</span><br><span class="line">  .catch(e =&gt; <span class="built_in">console</span>.log(e));</span><br></pre></td></tr></table></figure>
<p>使用 Promise 後：</p>
<ul>
<li>程式碼風格改成 Pipeline 方式容易閱讀</li>
<li>每個 <code>then()</code> 都回傳一個全新的 Promise</li>
<li>統一處理 Exception</li>
</ul>
<blockquote>
<p>Callback 雖然也能解決 Asynchronous，但會造成 Callback Hell，應盡量避免使用，且隨著 ECMAScript 2015 將 Promise 定為標準，越來越多 Library 直接回傳 <code>Promise</code> 型別 (Axios、Protractor …)，且 Async Await 也是基於 Promise 技術，所以 Promise 已經成為不能不會的東西</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Async Await 只是讓你程式碼看起來很像 Synchronous，但其本質仍然是 Asynchronous，因為 Async Await 一定要搭配 Promise，而 Promise 就是 Asynchronous，因此 Async Await 算是 Syntax Sugar</li>
<li>雖然 Async Await 是 ECMAScript 2017 較新的東西，但個人認為 <code>語意</code> 其實並沒有 Promise 好，Async Await 會讓你使用 Imperative 方式思考，而 Promise  會讓你使用 Pipeline 方式思考，個人較喜歡 Promise</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/vue-promise" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/tc39" target="_blank" rel="external">TC39</a>, <a href="https://github.com/tc39/proposal-promise-finally" target="_blank" rel="external">Promise.prototype.finally</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">Promise</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="external">async function</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="external">await</a></p>
]]></content>
    <summary type="html">
    <![CDATA[解釋 Promise 與 Async Await]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Event Loop Model]]></title>
    <link href="https://oomusou.io/ecmascript/event-loop-model/"/>
    <id>https://oomusou.io/ecmascript/event-loop-model/</id>
    <published>2018-10-07T12:23:43.000Z</published>
    <updated>2018-10-07T14:42:12.966Z</updated>
    <content type="html"><![CDATA[<p>由於 JavaScript 是 Single Thread 語言，由於其 Single Thread 特色，對於繁重的運算動作，就無法如 C# 使用 Multi Thread 解決，因此 Asynchronous 在 JavaScript 格外重要。</p>
<p>Browser 使用獨特的 Event Loop Model 實現 Asynchronous，要能徹底了解其背後運作原理，才能掌握 JavaScript 的 Asynchronous。</p>
<a id="more"></a>
<h2 id="Single_Thread">Single Thread</h2><hr>
<ul>
<li>One call stack</li>
<li>One thing at a time</li>
</ul>
<p>JavaScript 最大的特色就是 Runtime 為 Single Thread，也就是只有一個  Call Stack，因此一個時間只能做一件事情。</p>
<p>也由於只有一個 Thread，只要遇到 <code>大量運算</code>，JavaScript 就會停住等待，因此使用者體驗就會不好。</p>
<blockquote>
<p>C# 只要遇到 <code>大量運算</code>，我們就會使用 Multi Thread，但 JavaScript 為 Single Thread，因此這招不能用在 JavaScript</p>
</blockquote>
<p>因此 Browser 做了擴充，有些東西並不是由 JavaScript Runtime 實作，而是由 Browser 提供：</p>
<ul>
<li>DOM</li>
<li>AJAX (XMLHttpRequest)</li>
<li>setTimout()</li>
</ul>
<p>也就是這三類 Browser 所提供的 API，屬於 Asynchronous 部分。</p>
<h2 id="Event_Loop_Model">Event Loop Model</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span>);</span><br><span class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Sam'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'World '</span>);</span><br><span class="line"><span class="comment">// Hello World Sam</span></span><br></pre></td></tr></table></figure>
<p>當 <code>setTimeout()</code> 為 <code>0</code> 秒時，會先執行 <code>console.log(&#39;Sam&#39;)</code> 還是 <code>console.log(&#39;World &#39;)</code> ?</p>
<blockquote>
<p>既然 dealy <code>0</code> 秒，且寫在前面，應該先執行吧 ?</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">concole.log(<span class="string">'Hello '</span>);</span><br><span class="line">$.get(<span class="string">'url'</span>, data =&gt; <span class="built_in">console</span>.log(data)); <span class="comment">// &#123; name: 'Sam' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">' World'</span>);</span><br><span class="line"><span class="comment">// Hello World &#123; name: 'Sam' &#125;</span></span><br></pre></td></tr></table></figure>
<p>當使用 AJAX 時，也會發現 <code>console.log(&#39; World&#39;)</code> 會先執行。</p>
<p><img src="/images/ecmascript/event-loop-model/loop000.svg" alt="eventloop000"></p>
<p>會先執行 Stack 內的 function，直到 Stack 都執行完，才會執行 Event Loop，將 Callback Queue 內的 function 執行完。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/images/ecmascript/event-loop-model/loop001.svg" alt="loop001"></p>
<ul>
<li><code>console.log(&#39;Hello &#39;)</code> 進 Stack</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop002.svg" alt="loop002"></p>
<ul>
<li>清空 Stack，在 Console 顯示 <code>Hello</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Sam'</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/images/ecmascript/event-loop-model/loop003.svg" alt="loop003"></p>
<ul>
<li><code>setTimeout()</code> 進 Stack</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop004.svg" alt="loop004"></p>
<ul>
<li>清空 Stack，執行 Browser Thread 的 <code>timer(0)</code> </li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop005.svg" alt="loop005"></p>
<ul>
<li><code>timer(0)</code> 時間一到，將 <code>callback</code> 塞進 Callback Queue</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'World '</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/images/ecmascript/event-loop-model/loop006.svg" alt="loop006"></p>
<ul>
<li><code>console.log(&#39;World &#39;)</code> 進 Stack</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop007.svg" alt="loop007"></p>
<ul>
<li>清空 Stack，在 Console 顯示 <code>Hello World</code></li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop008.svg" alt="loop008"></p>
<ul>
<li>所有 Synchronous Function 都已經執行完，開始執行 Event Loop</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop009.svg" alt="loop009"></p>
<ul>
<li>清空 Callback Queue，在 Console 顯示 <code>Hello World Sam</code></li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Asynchronous Function 會將 Callback 先塞進 Callback Queue，不會立即執行</li>
<li>等所有 Synchronous Function 都執行完，才開始執行 Event Loop 清空 Callback Queue 執行 Asynchronous Function</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Philp Robers : <a href="https://youtu.be/8aGhZQkoFbQ" target="_blank" rel="external">What the heck is the event loop anyway ?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[解釋 JavaScript 非同步的運作原理]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 ES Module]]></title>
    <link href="https://oomusou.io/ecmascript/module/"/>
    <id>https://oomusou.io/ecmascript/module/</id>
    <published>2018-10-04T12:23:43.000Z</published>
    <updated>2018-10-12T07:43:24.226Z</updated>
    <content type="html"><![CDATA[<p>ES5 很難寫大程式，主要是因為 JavaScript 沒有 Module 概念，常常一個檔案寫兩三千行程式，且大量使用 Global Variable 造成 Side Effect 很難維護。</p>
<p>早期 JavaScript 是使用 Module Pattern 解決，稍後更有 CommonJS 與 AMD 試圖制定 Module 標準，一直到 TC39 出手，在 ECMAScript 2015 定義 Module 後，JavaScript 的模組化總算塵埃落定，是 JavaScript 發展的重要里程碑。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Why_Module_?">Why Module ?</h2><hr>
<p>在 ES5 時代，Scope 只有兩種概念：Global 與 Function，而沒有如 C# 的 Namespace 或 Java 的 Package，因此很難將程式碼加以模組化，造成 JavaScript 很難寫大程式。</p>
<p>Module 須提供兩大功能：</p>
<ul>
<li>將 data 或 function 封裝在 Module 內</li>
<li>將 interface 暴露在 Module 外</li>
</ul>
<p>ES5 在語言層級並沒有提供以上支援。</p>
<h2 id="Module_Pattern">Module Pattern</h2><hr>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MouseCounterModule = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">const</span> handleClick = () =&gt;</span><br><span class="line">  	<span class="built_in">console</span>.log(++numClicks);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    countClick: () =&gt;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, handleClick);</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>當語言不支援時，第一個會想用的就是 Design Pattern 自救。</p>
<p>JavaScript 什麼都是用 function，Module 也用 function 就不意外了。</p>
<ul>
<li><strong>將 data 或 function 封裝在 Module 內</strong>：使用了 Closure + IIFE</li>
<li><strong>將 interface 暴露在 Module 外</strong>：return 全新 object</li>
</ul>
<blockquote>
<p><strong>IIFE</strong></p>
<p>Immediately Invoked Function Expression<br>定義 function 的同時，也順便執行 function，若配合 Closure，可將 data 封裝在 function 內，避免 data 暴露在 Global Scope</p>
</blockquote>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"MouseCounterModule.js"</span>/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"texty/javascript"</span>&gt;</span><span class="undefined"></span><br><span class="line">  MouseCounterModule.counterClick();    </span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>使用 HTML 載入 Dependency Module，此時 JavaScript 的載入順序就很重要，需要自行控制。</p>
<h2 id="AMD">AMD</h2><hr>
<blockquote>
<p><strong>AMD</strong></p>
<p>Asynchronous Module Defintion<br>針對 Browser 所設計的  Module 解決方案，使用 Asynchronous 方式載入 Module</p>
</blockquote>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'MouseCounterModule'</span>, [<span class="string">'jQuery'</span>], $ =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> handleClick = () =&gt; </span><br><span class="line">    <span class="built_in">console</span>.log(++numClicks);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    countClick: () =&gt;</span><br><span class="line">      $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, handleClick);</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>define()</code> 為 AMD 所提供的 function：</p>
<ul>
<li>第一個參數：定義 Module 的 ID 作為識別</li>
<li>第二個參數：陣列，傳入其他 Dependency Module 的 ID</li>
<li>第三個參數：用來建立 Module 的 function</li>
</ul>
<p>除了 <code>define()</code> 外，該寫的 Module function 還是要寫。</p>
<ul>
<li><strong>將 data 或 function 封裝在 Module 內</strong>：在 function 內使用 Closure 封裝</li>
<li><strong>將 interface 暴露在 Module 外</strong>：return 全新 object</li>
</ul>
<p>不必再使用 IIFE，<code>define()</code> 會幫你執行。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'MouseCounterModule'</span>], mouseCounterModule =&gt;</span><br><span class="line">    mouseCounterModule.countClick();</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>require()</code> 為 AMD 所提供的 function：</p>
<ul>
<li>第一個參數：相依的外部 Module ID</li>
<li>第二個參數：使用 Module 的 function</li>
</ul>
<p>AMD 有以下特色：</p>
<ul>
<li>自動解析 Module 的 dependency，不用在乎 JavaScript 載入順序</li>
<li>Module 以 asynchronous 載入，不會 blocking 影響使用者體驗</li>
<li>允許一個檔案有多個 Module，也就是多個 <code>define()</code></li>
</ul>
<p>也因為 AMD 的 asynchronous 特性，特別適合在 Browser 使用。</p>
<h2 id="CommonJS">CommonJS</h2><hr>
<blockquote>
<p><strong>CommonJS</strong></p>
<p>為一般性 JavaScript 環境所設計的解決方案，Node.js 使用</p>
</blockquote>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jQuery'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClick = () =&gt; </span><br><span class="line">  <span class="built_in">console</span>.log(++numClicks);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  countClick: () =&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, handleClick);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>require()</code> 為 CommonJS 所提供的 function，負責載入 Dependency Module。</p>
<ul>
<li><p><strong>將 data 或 function 封裝在 Module 內</strong>：<code>numClicks</code> 與 <code>handleClick()</code> 看似 Global，但事實上其 scope 只有 Module level，不用特別使用 function 與 Closure 寫法就能達成封裝 data 與 function</p>
</li>
<li><p><strong>將 interface 暴露在 Module 外</strong>：將全新 object  指定給 <code>module.exports</code> 即可，不需特別 return</p>
</li>
</ul>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MouseCounterModule = <span class="built_in">require</span>(<span class="string">'MouseCounterModule.js'</span>);</span><br><span class="line"></span><br><span class="line">MouseCounterModule.counterClick();</span><br></pre></td></tr></table></figure>
<p>使用 <code>require()</code> 載入 Dependency Module 後即可使用，也不用搭配 Callback function。</p>
<p>CommonJS 有以下特色：</p>
<ul>
<li>Data 與 function 不需再使用 Closure，雖然看起來像 Global，但 CommonJS 會封裝在 Module 內</li>
<li>使用 <code>module.exports</code> 公開 interface</li>
<li>一個檔案就是一個 Module</li>
<li>語法比 AMD 優雅</li>
</ul>
<p>但 CommonJS 也有幾個缺點：</p>
<ul>
<li>但 <code>require()</code> 為 Synchronous，因此適合在 server 端使用</li>
<li>Browser 並未提供 <code>module</code> 與 <code>exports</code>，因此還要透過 <code>Browserify</code> 作轉換</li>
</ul>
<h2 id="ES_Module">ES Module</h2><hr>
<p>由於 JavaScript 社群存在這兩大 Module 標準，TC39 決定融合 AMD 與 CommonJS 的優點制定出 ES6 Module，至此 JavaScript 有了正式的 Module 規格。</p>
<ul>
<li>學習 CommonJS，一個檔案就是一個 Module</li>
<li>學習 CommonJS 簡單優雅的語法</li>
<li>學習 AMD 以 Asynchronous 載入 Module</li>
</ul>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ from <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClick = () =&gt;</span><br><span class="line">  <span class="built_in">console</span>.log(++numClicks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  countClick: () =&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, handleClick);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>import</code> 為 ECMAScript 2015 所提供的 keyword，負責載入 Dependency Module，可以 Synchronous 也可 Asynchronous。</p>
<p><code>export</code>  為 ECMAScript 2015 所提供的 keyword，負責暴露 interface 於 Module 外。</p>
<ul>
<li><p><strong>將 data 或 function 封裝在 Module 內</strong>：<code>numClicks</code> 與 <code>handleClick()</code> 看似 Global，但事實上其 scope 只有 Module level，不用特別使用 function 與 Closure 寫法就能達成封裝 data 與 function，這點與 CommonJS 一樣</p>
</li>
<li><p><strong>將 interface 暴露在 Module 外</strong>：將全新 object  透過 <code>export</code> 即可，不需特別 return</p>
</li>
</ul>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MouseCounterModule <span class="keyword">from</span> <span class="string">'MouseCounterModule.js'</span>;</span><br><span class="line"></span><br><span class="line">MouseCounterModule.counterClick();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import</code> 載入 Dependency Module 後即可使用，也不用搭配 Callback function，這點與 CommonJS 一樣。</p>
<p>ES Module 有以下特色：</p>
<ul>
<li>提供 <code>export</code> 與 <code>import</code> 兩個 keyword 就解決</li>
<li>語法比 CommonJS 優雅</li>
</ul>
<h2 id="Definition">Definition</h2><hr>
<p>你可以將 data (variable、object、function、class) 加以 import 或 export。</p>
<p>Export 分為 Named Export 與 Default Export：</p>
<ul>
<li><strong>Named Export</strong>：data 必須有名稱</li>
<li><strong>Default Export</strong>：data 沒有名稱 (Anonymous Object、Anonymous Function、Anonymous Class)</li>
<li>一個 Module 只能有一個 Default Export，但能有無限多個 Named Export</li>
</ul>
<blockquote>
<p>Default Export 的 data 也可以有名稱，但因為會由 import 決定名稱，所以通常會使 data 沒有名稱</p>
</blockquote>
<h2 id="Named_Export">Named Export</h2><hr>
<h3 id="Variable">Variable</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> y = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>可直接對 <code>let</code> 與 <code>const</code> 變數加以 export 。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; x &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; y &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>可對變數分別 import，但 Named Import 要搭配 <code>{}</code>。</p>
<h3 id="Object">Object</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; x, y &#125;;</span><br></pre></td></tr></table></figure>
<p>可直接對 object 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; x, y &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>可對 object 直接 import，使用 Destructing Assignment 方式對 object 直接解構。</p>
<h3 id="Function">Function</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>add()</code> 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 function 加以 Named Import 要加上 <code>{}</code>。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<p>將 <code>add()</code> Arrow Function 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 Arrow Function 加以 Named Import 也要加上 <code>{}</code>。</p>
<h3 id="Class">Class</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>Counter</code> class 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Counter &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">const counter = new Counter(1, 1);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 class 加以 Named Import 要加上 <code>{}</code>。</p>
<blockquote>
<p>無論對 variable / object / function / class 加以 Named Export，都會事先明確命名，然後在 Named Import 時都加上 <code>{}</code></p>
</blockquote>
<h2 id="Default_Export">Default Export</h2><hr>
<h3 id="Variable-1">Variable</h3><p>ES 6 無法對 <code>var</code>、<code>let</code> 與 <code>const</code> 使用 Default Export。</p>
<h3 id="Object-1">Object</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; x, y &#125;;</span><br></pre></td></tr></table></figure>
<p>對於 Anonymous Object 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyObject <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(MyObject.x);</span><br><span class="line"><span class="built_in">console</span>.log(MyObject.y);</span><br></pre></td></tr></table></figure>
<p>對 Anonymous Object 使用 Default Import，由於 Anonymous Object 本來就沒有名字，要在 Default Import 重新命名。</p>
<p>Default Import 不用加上 <code>{}</code>。</p>
<h3 id="Function-1">Function</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>對於 Anonymous Function 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br></pre></td></tr></table></figure>
<p>對 Anonymous Function 使用 Default Import，由於 Anonymous Function 本來就沒有名字，要在 Default Import 重新命名。</p>
<p>Default Import 不用加上 <code>{}</code>。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<p>對於 Arrow Function 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br></pre></td></tr></table></figure>
<p>對 Arrow Function 使用 Default Import，由於 Arrow Function 本來就沒有名字，要在 Default Import 重新命名。</p>
<h3 id="Class-1">Class</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>對於 Anonymous Class 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">const counter = new Counter(1, 1);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br></pre></td></tr></table></figure>
<p>對 Anonymous Class 使用 Default Import，由於 Anonymous Class 本來就沒有名字，要在 Default Import 重新命名。</p>
<blockquote>
<p>無論對 variable / object / function / class 加以 Default Export，可不用事先明確命名 (當然要事先命名亦可，但沒有太大意義)，然後在 Named Import 時不用加上 <code>{}</code></p>
<p>React 與 Vue 喜歡使用 Default Export，優點是可由 user 自行命名，彈性最高；Angular 則喜歡使用 Named Export，由 Framework 事先命名，優點是整個 community 名稱統一</p>
</blockquote>
<h2 id="Named_+_Default_Export">Named + Default Export</h2><p>一個 Module 只允許一個 Default Export，但可以有多個 Named Export。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'Sam'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>name</code> 與 <code>add()</code> 為 Named Export，但 Anonymous Class 為 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> Counter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br><span class="line"><span class="comment">// Sam</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>Named Export 要搭配 Named Import。</p>
<p>Default Export 則搭配 Default Export。</p>
<h2 id="Import_Entire_Module">Import Entire Module</h2><hr>
<p>實務上一個 Module 可能有很多 Export，要一個一個 Import 很辛苦，可以將整個 Module 都 Import 進來。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> MyModule <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(MyModule.name);</span><br><span class="line"><span class="built_in">console</span>.log(MyModule.add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> MyModule.default(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br></pre></td></tr></table></figure>
<p>對於 Named Export 沒問題，名字會維持原來的名稱。</p>
<p>但對於沒有名稱的 Default Export，會以 <code>default</code> 為名稱。</p>
<h2 id="Alias">Alias</h2><hr>
<p>若對原本 data 名稱覺得不滿意，在 Named Export 或 Named Import 時都可以重新取別名。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add <span class="keyword">as</span> sum &#125;;</span><br></pre></td></tr></table></figure>
<p>在 Named Export 時，已經使用 <code>as</code> 將 <code>add</code> 取別名為 <code>sum</code>，需搭配  <code>{}</code>。</p>
<p><strong>main.js</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; from <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>既然已經取別名為 <code>sum</code>，就以 <code>sum</code> 為名稱 import 進來。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<p>直接使用 Named Export 將 <code>add()</code> export 出來。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add <span class="keyword">as</span> sum &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(sum(1, 1));</span><br></pre></td></tr></table></figure>
<p>在 Named Import 時才使用 <code>as</code> 取別名亦可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>ES6 Module 語法很簡單，只有 <code>export</code> 與 <code>import</code> 兩個 keyword</li>
<li>ES6 Module 分成 Named Export 與 Default Export，一個 Module 只能有一個 Default Export，但可以有多個 Named Export</li>
<li>可以使用 <code>import * as module</code> ，將整個 Module 都 import 進來</li>
<li><code>export</code> 與 <code>import</code> 都可搭配 <code>as</code> 取別名</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://en.wikipedia.org/wiki/John_Resig" target="_blank" rel="external">John Resig</a>, <a href="https://www.manning.com/books/secrets-of-the-javascript-ninja-second-edition" target="_blank" rel="external">Secret of the JavaScript Ninja, 2nd</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="external">export</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="external">import</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Module 是 ECMAScript 發展的重要里程碑]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Refactor to LINQ => Select]]></title>
    <link href="https://oomusou.io/linq/select/"/>
    <id>https://oomusou.io/linq/select/</id>
    <published>2018-10-01T14:23:43.000Z</published>
    <updated>2018-10-01T01:54:05.479Z</updated>
    <content type="html"><![CDATA[<p>LINQ 是 C# 3.0 實現 FP 重要里程碑，提供大量的 Operator，讓我們以 Pure Function 將 data 以 Dataflow 與 Pipeline 方式實現。本系列將先以 Imperative 實作，然後再重構成 FP，最後再重構成 LINQ Operator。</p>
<p>本文將討論 <code>Select</code> Operator。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.2.3</p>
<h2 id="Imperative">Imperative</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(item * <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Enumerable.Range()</code> 產生 <code>1, 2, 3</code>，建立暫存的 <code>result</code> List，將所有元素都乘以 <code>2</code>，最後使用 <code>foreach()</code> 印出每個值。</p>
<p>由於資料的改變，建立新的暫存 List 處理，是 Imperative 慣用手法。</p>
<h2 id="Refactor_to_HOF">Refactor to HOF</h2><p>實務上這種建立新暫存 List 處理的作法，常常會遇到，若每次都使用 <code>foreach</code> 這種 statement 寫法，重複使用能力為 0，就每次都要不斷的寫 <code>foreach</code>。</p>
<p>若我們能將這種 <code>foreach</code> 配合新暫存 List 處理做法，抽成 <code>MyMap()</code> Higher Order Function，我們就能不斷 reuse <code>MyMap()</code>，只要將不同的商業邏輯以 function 傳進 <code>MyMap()</code> 即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = MyMap(data, Double);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(func(item));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Add(func(item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己以 <code>MyMap()</code> 實作出 <code>foreach</code> statement + 暫存 List 處理的 Higher Order Function 版本。</p>
<p>第一個參數為 data，第二個參數為 function。</p>
<p>如此 <code>MyMap()</code> function 就能被重複使用。</p>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = MyMap(data, Double);</span><br></pre></td></tr></table></figure>
<p>原來的 <code>foreach()</code> statement 重構成 <code>MyMap()</code> Higher Order Function，將 data 與 <code>Double</code> Local Function 傳入即可。 </p>
<h2 id="Refactor_to_Yield_Return">Refactor to Yield Return</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = MyMap(data, Double);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>但要建立暫存 List 會影響執行效率，也浪費記憶體，尤其暫存 List 只是中繼資料，並不是最後執行結果</p>
</li>
<li><p><code>MyMap()</code> 還要重新執行一次 <code>foreach</code> loop，也會影響執行效率</p>
</li>
</ul>
<p>因此改用 <code>yield return</code> 實現 Lazy Evaluation，直到真正需要結果時，才會執行 <code>func(item)</code>，如此就不用建立暫存 List，既能解省記憶體，又能減少一次 <code>foreach</code> loop 執行，能大幅增進執行效率。</p>
<h2 id="Refactor_to_Generics">Refactor to Generics</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = MyMap(data, Double);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 <code>MyMap()</code> 不只適用於 <code>int</code>，而且可適用於任何型別，因此重構成 <code>&lt;T, R&gt;</code>。</p>
<h2 id="Refactor_to_Extension_Method">Refactor to Extension Method</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .MyMap(Double)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(Console.WriteLine);</span><br><span class="line">                </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyMap()</code> 需要兩個參數，使用上不是那麼方便，而且也無法 Pipeline 般使用，因此將第一個參數加上 <code>this</code>，成為 Extension Method。</p>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumerable</span><br><span class="line">    .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    .MyMap(Double)</span><br><span class="line">    .ToList()</span><br><span class="line">    .ForEach(Console.WriteLine);</span><br></pre></td></tr></table></figure>
<p>如此 <code>MyMap()</code> 就與 <code>Range()</code> 串起來了，而且也減少了一個參數。</p>
<h2 id="Refactor_to_LINQ">Refactor to LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(Double)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(Console.WriteLine);</span><br><span class="line">                </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 LINQ 早已提供 <code>Select()</code>，不必我們自己實作，其功能完全等效於自己實作的 <code>MyMap()</code>。</p>
<blockquote>
<p>一般 FP 世界，將這種 operator 稱為 Map，如 ECMAScript 有<code>Array.prototype.map()</code>，F# 有 <code>List.map()</code>，在 LINQ 則稱為 <code>Select()</code></p>
</blockquote>
<h2 id="Refactor_to_Using_Static">Refactor to Using Static</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(Double)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>using static</code> 之後，則 <code>Range()</code> 與 <code>WriteLine()</code> 可進一步縮短，更符合 FP 風格。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>就算自己重構，也會重構出 <code>Select()</code> Higher Order Function，只是因為太常使用，LINQ 已經內建 <code>Select()</code></li>
<li>Yield return 可實現 Lazy Evaluation，繼可節省記憶體，又可增進執行效率</li>
<li>善用 <code>using static</code>，可讓 class 的 static method 更像 function</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LINQSelect" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以重構角度探討 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Const]]></title>
    <link href="https://oomusou.io/ecmascript/const/"/>
    <id>https://oomusou.io/ecmascript/const/</id>
    <published>2018-09-30T13:23:43.000Z</published>
    <updated>2018-09-30T12:00:38.024Z</updated>
    <content type="html"><![CDATA[<p><code>const</code> 也是 ECMAScript 2015+ 的代表 keyword，應盡量使用 <code>const</code> 避免 Side Effect，除非真的要修改變數。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Definition">Definition</h2><hr>
<p>宣告常數於 block <code>{}</code> 內。</p>
<blockquote>
<p>與 <code>let</code> 差異只有 <code>let</code> 是 <code>變數</code>，而 <code>const</code> 是 <code>常數</code>，且都是 block level</p>
</blockquote>
<h2 id="Scope">Scope</h2><hr>
<p><strong>scope01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">constTest();</span><br><span class="line"><span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>
<p>與 <code>let</code> 一樣都是 <code>block</code> level，由於 <code>x = 2</code> 修改 <code>x</code> ，因此 SyntaxError。</p>
<p><strong>scope02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">'global'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.x);</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>在 global level 使用 const，也不會污染 DOM 的 <code>window</code> object。</p>
<h2 id="Initialization">Initialization</h2><hr>
<p><strong>initialization01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 可先宣告，然後再給值，但 <code>const</code> 一定要 <code>宣告同時給值</code>。</p>
<p>只能寫成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因為 const 強調不能被 reassign，因此 <code>宣告同時給值</code> 合理</p>
</blockquote>
<h2 id="Not_Immutable">Not Immutable</h2><hr>
<p><strong>not-immutable.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">data.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data.name);</span><br><span class="line"><span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure>
<p><code>const</code> 並不代表 data 是 Immutable，只代表變數不能被 reassign。</p>
<h2 id="Define_Function">Define Function</h2><hr>
<p><strong>define-function.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = (x, y) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>理論上也可以使用 <code>let</code> 定義 function，但因為 function 經過定義後就不會被 reassign，所以實務上都是使用 <code>const</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>應優先使用 <code>const</code>  避免 Side Effect，也同時養成 Declarative Programming 習慣，盡量避免 Imperative 方式一直修改變數</li>
<li><code>const</code> 並不是 Immutable，僅是變數不能被 reassign</li>
<li>實務上建議使用 <code>const</code> 定義 function</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ecmascript_let" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN JavaScript</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="external">const</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 const 讓變數不會被 reassign]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FP 之 Yield 與 Lazy Evaluation]]></title>
    <link href="https://oomusou.io/fp/lazy-evaluation/"/>
    <id>https://oomusou.io/fp/lazy-evaluation/</id>
    <published>2018-09-30T12:23:43.000Z</published>
    <updated>2018-10-07T14:02:43.696Z</updated>
    <content type="html"><![CDATA[<p>為了使 function 重複使用能力更高，我們會盡量將 function 寫成 composable function，也因為如此，function 之間不斷地建立 data，且每個 function 又必須各自執行  <code>for</code> loop，這些都是執行效能殺手，而 <code>Yield</code> 與 <code>Lazy Evaluation</code> 讓我們優雅的解決這兩大難題。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.4</p>
<h2 id="Composable_Function">Composable Function</h2><hr>
<p>一個 function 若要能跟其他 function 完美組合，需達成 4 個條件：</p>
<ul>
<li><strong>Pure</strong> : function 不能有 Side Effect</li>
<li><strong>Chainable</strong> : 也就是 Pipeline，讓 data 以 Dataflow 方式一直流下去</li>
<li><strong>General</strong> : function 要越 <code>一般化</code>，越 <code>針對性</code> 則越難 Compose 重複使用</li>
<li><strong>Shape-preserving</strong> : funciton 要能保持原本資料結構，才能在相同型別下繼續 Compose 與 Pipeline</li>
</ul>
<p>很多人對於 FP 的 Chainable 有兩點疑慮：</p>
<ol>
<li>Function 之間不斷的傳遞 data，則必須在記憶體建立一份新 data，這將大幅影響執行效能</li>
<li>每個 function 都要再重新執行一次 <code>for</code> loop，這將大幅影響執行效能</li>
</ol>
<p>也由於這兩個因素，雖然 FP 更為優雅，因為效能因素，很多人對 FP 採取懷疑態度。</p>
<p>但 FP 引進 Lazy Evaluation 之後，這兩個疑慮都將獲得解決。</p>
<h2 id="Imperative">Imperative</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .Each(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">                result.Add(mapper(iter));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">                <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Add(iter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Each&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Each : "</span> + iter);</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">        .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        .Each(WriteLine);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p>假設我們自行實現 <code>Map()</code> 與 <code>Filter()</code> ，則結果如預期為 <code>6</code> 與 <code>9</code>。</p>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">        result.Add(mapper(iter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們會先建立一個新的 <code>List</code>，執行一次 <code>foreach</code> loop，並將 <code>mapper()</code> 結果新增至 <code>List</code>，最後再 return <code>List</code>。</p>
<p>這是典型 Imperative 常用手法。</p>
<p>30 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            result.Add(iter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也一樣建立一個新 <code>List</code>，執行一次 <code>foreach</code> loop，再根據 <code>predicate()</code> 篩選後的結果新增至 List，最後再 return <code>List</code>。</p>
<p>也一樣是 Imperative 常用手法。</p>
<p><img src="/images/fp/lazy-evaluation/yield000.png" alt="yield000"></p>
<p>執行結果也如預期，先執行完 <code>Map()</code>，再執行 <code>Filter()</code>，最後 <code>Each()</code>。</p>
<p>目前的 <code>Map()</code> 與 <code>Filter()</code>，已經達成 Composable Function 的要求，只是執行效率並不好：</p>
<ul>
<li><p><code>Map()</code> 與 <code>Filter()</code> 都要不斷建立新的 <code>List</code></p>
</li>
<li><p><code>Map()</code> 與 <code>Filter()</code> 都要各自再跑一次 <code>foreach</code> loop</p>
</li>
</ul>
<h2 id="Lazy_Evaluation">Lazy Evaluation</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .Each(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">mapper</span>(<span class="params">iter</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">                <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Each&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Each : "</span> + iter);</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">mapper</span>(<span class="params">iter</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>List</code> 拿掉，將新增至 <code>List</code> 重構成 <code>yield</code>。</p>
<p>26 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>List</code> 拿掉，將新增至 <code>List</code> 重構成 <code>yield</code>。</p>
<p><img src="/images/fp/lazy-evaluation/yield001.png" alt="yield001"></p>
<p>執行結果完全一樣，但執行方式已經完全不一樣。</p>
<p>我們發現執行順序變成每個數字各自執行 <code>Map() -&gt; Filter() -&gt; Each()</code>，而不是原本整個<code>List</code> 全部一起 <code>Map() -&gt; Filter() -&gt; Each()</code>。</p>
<p>當使用 <code>yield</code> 時，<code>Map()</code> 與 <code>Filter()</code> 並未執行，而是等 <code>Each()</code> 的 Side Effect : <code>WriteLine()</code> 執行時，才去呼叫 <code>Filter()</code>，然後 <code>Filter()</code> 去呼叫 <code>Map()</code>，<code>Map()</code> 才真正開始執行，<code>Map()</code> 執行完再立即將結果傳給 <code>Filter()</code>，最後再傳給 <code>Each()</code> 執行<code>WriteLine()</code> 達成需求。</p>
<p>這就是所謂 <strong>Lazy Evaluation</strong>，function 的所有計算，都因為 Side Effect 發動後才會開始。</p>
<p>Lazy Evaluation 有兩大優點 :</p>
<ul>
<li><strong>不需建立中繼 Data</strong>：Lazy Evaluation 使 Function 之間不需傳遞 data，因此也不用建立 data，省下建立 data 時間與記憶體</li>
<li><strong>直執行一次 Loop</strong>：Imperative 方式每個 funtion 都要自己執行 Loop，影響執行效能，但 Lazy Evaluation 只有一次 loop</li>
</ul>
<h2 id="使用_LINQ">使用 LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Select(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Where(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可再將程式碼重構成 LINQ，<code>Map()</code> 相當於 LINQ 的 <code>Select()</code>，而 <code>Filter()</code> 相當於 <code>Where()</code>。</p>
<p><img src="/images/fp/lazy-evaluation/yield002.png" alt="yield002"></p>
<ol>
<li>事實上 LINQ 內部就是使用 <code>yield</code> 實現，這也是 LINQ 高效的原因</li>
</ol>
<h2 id="使用時機">使用時機</h2><hr>
<ul>
<li>當 FP 寫 Higher Order Function 時，由於要不斷的將 data 傳給下一個 Higher Order Function，此時就是適合使用 <code>yield</code> 與 Lazy Evaluation，避免 function 間的不斷建立 data 與 多次 loop 影響執行效能</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>yield</code> 是眾多程式語言都具備的基礎功能，PHP 也有 <code>yield</code>，在 ECMAScript 2015 則稱為 Generator，但大部分人都採用 Imperative 方式寫程式，很少人會使用Lazy Evaluation 思考；事實上如 Haskell，所有 function 都是 Lazy Evaluation，這對 FP 的執行效能有非常大的幫助</li>
<li>是否覺得 Lazy Evaluation 很有 Agile 的味道呢 ? XDD</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LazyEvaluation" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[Yield 是實現 Lazy Evaluation 最簡單的方式]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Let]]></title>
    <link href="https://oomusou.io/ecmascript/let/"/>
    <id>https://oomusou.io/ecmascript/let/</id>
    <published>2018-09-27T13:23:43.000Z</published>
    <updated>2018-09-28T02:08:18.626Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 2015 是 JavaScript 歷史上最重要的一次升級，也讓 JavaScript 終於趕上主流程式語言的高度，若要明顯的分辨 ES5 與 ES6，最明顯的方式的方式就是看有沒有使用 <code>let</code>。</p>
<a id="more"></a>
<h2 id="Verson">Verson</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Let">Let</h2><hr>
<p>宣告變數於 block <code>{}</code> 內。</p>
<blockquote>
<p><code>var</code> 宣告變數於 function 內或 function 外 (global)</p>
</blockquote>
<h2 id="Scope">Scope</h2><hr>
<p><strong>scope01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varTest();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varTest();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>因為 Hoisting，<code>var x</code> 被移到最上層，scope 為 function 內，因此離開 <code>if (true)</code> 仍然為 <code>2</code>。</p>
<p><strong>scope02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">letTest();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>ES5 沒有 <code>let</code> 無法執行。</p>
<p>第 4 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>let</code> 後，其 scope 為 block <code>{}</code>，只有在 <code>{}</code> 為 <code>2</code>，離開 <code>{}</code> 就變回 <code>1</code>。</p>
<blockquote>
<p>以主流程式語言而言，變數的 scope 都是 block <code>{}</code>，而非 function，因此 ECMAScript 的 <code>let</code> 較符合大家的習慣，如此就可如 C# 一樣，將變數宣告在程式碼要用的地方，而不是宣告在 function 最前面，因此 TC39 建議全面使用 <code>let</code> 取代 <code>var</code></p>
</blockquote>
<p><strong>scope03.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// 22</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>let b = 22</code>，為 block level。</p>
<p>13 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>var b = 2</code>，為 global level。</p>
<p><strong>scope04.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">cnt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p><code>var</code> 為 function level，因此 <code>for</code> loop 執行完還存在。</p>
<p><strong>scope05.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">cnt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 為 block level，超出 <code>for</code> loop 就抓不到了。</p>
<blockquote>
<p><code>for</code> loop 應全面使用 <code>let</code> 避免 Side Effect</p>
</blockquote>
<p><strong>scope06.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="string">'global'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.y);</span><br><span class="line"><span class="comment">// global</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><code>var</code> 與 <code>let</code> 雖然都可建立 global 變數，但 <code>var</code> 會污染 DOM 的 <code>window</code> object，但 <code>let</code> 不會。</p>
<blockquote>
<p>若要使用 global 變數，應全面使用 <code>let</code> 取代 <code>var</code></p>
</blockquote>
<h2 id="Redeclaration">Redeclaration</h2><hr>
<p><strong>redeclaration01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可以執行。</p>
<p><code>var</code> 允許對變數重複宣告。</p>
<p><strong>redeclaration02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都無法執行。</p>
<p><code>let</code> 不允許對變數重複宣告。</p>
<p><strong>redeclaration03.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">var</span> y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行時</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>var</code> 會 Hoisting，所以允許 redeclaration。</p>
<p><strong>redeclaration04.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>若將 <code>var</code> 改成 <code>let</code>，則 ES5 與 ES6 都無法執行。</p>
<p>因為 let 認 <code>{}</code> 為 scope，不允許 redeclaration。</p>
<p><strong>redeclaration05.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>在每個 <code>case</code> 加上 <code>{}</code>，則可以 redeclaration。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>var</code> 為 function level 或 global level；而 <code>let</code> 為 block level</li>
<li><code>var</code> 的 global 變數會污染 DOM 的 <code>window</code> object，但 <code>let</code> 不會</li>
<li>實務上建議全面使用 <code>let</code> 取代 <code>var</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ecmascript_let" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN JavaScript</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="external">let</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 let 宣告變數]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[發現 JavaScript 本質]]></title>
    <link href="https://oomusou.io/ecmascript/essence/"/>
    <id>https://oomusou.io/ecmascript/essence/</id>
    <published>2018-09-27T12:23:43.000Z</published>
    <updated>2018-09-27T22:54:10.073Z</updated>
    <content type="html"><![CDATA[<p>大家在學習 JavaScript 時，是否覺得 JavaScript 跟主流 OOP 程式語言，如 C++ / Java / C# 不太一樣？為什麼 JavaScript 沒有 interface？為什麼 JavaScript 很難使用 OOP Design Pattern ？為什麼我會從很討厭 JavaScript 到很喜歡 JavaScript？</p>
<p>這要從 JavaScript 的本質談起，因為我看到了JavaScript 可愛的一面。</p>
<a id="more"></a>
<h2 id="Feature">Feature</h2><hr>
<p>JavaScript 有兩大語言特色：</p>
<ol>
<li>JavaScript 是動態語言</li>
<li>JavaScript 是以 Function 為核心的語言</li>
</ol>
<h2 id="JavaScript_是動態語言">JavaScript 是動態語言</h2><hr>
<ul>
<li>JavaScript 可輕易為 object 建立新的 property，這在 C# <code>很難做到</code></li>
<li>JavaScript  可以輕易改變 <code>變數型別</code>，這在 C# <code>無法做到</code></li>
</ul>
<p>這種動態特性是好是壞見仁見智：</p>
<p>優點：</p>
<ul>
<li>對於 library 開發者，動態特性可以實現很多黑魔法，在 run-time 改變很多行為，Vue 就是善用 JavaScript 這種特性</li>
</ul>
<p>缺點：</p>
<ul>
<li>對於 application 開發者，動態特性有太多黑魔法不容易維護</li>
<li>太多行為都是 run-time 決定，不利於開發工具分析與重構</li>
</ul>
<blockquote>
<p>JavaScript 族群也分兩派，一派很喜歡動態特型，另外一派則完全不使用其動態特性，這一類族群最後會偏向使用 TypeScript  (Angular、RxJS、VS Code)</p>
<p>以我個人而言，若寫 application 時，我不會使用動態特性；若開發 library，為了 library 好用，會選擇性使用其動態特性</p>
</blockquote>
<h2 id="JavaScript_是以_Function_為核心的語言">JavaScript 是以 Function 為核心的語言</h2><hr>
<p>以下幾點可以證明 JavaScript 是以 Function 為核心的語言，而非 Class：</p>
<ul>
<li>JavaScript 雖然有 Java 字眼，但本質與 Java 完全不同，就如同 <code>林志玲</code> 與 <code>林志炫</code> 的關係 (就是沒有關係)</li>
<li>JavaScript 原型來自於 Scheme，而 Scheme 來自於 LISP，這都是典型的 Functional Programming Language，而非從 C++ 或 Java</li>
<li>ES5 雖然有 class 觀念，但卻是利用 Constructor Function 模擬出來的</li>
<li>ES5 雖然有 Inheritance 觀念，但卻是用 Function Prototype 實踐</li>
<li>ES6 雖然有 class 與 extends，但其本質仍然是 Constructor Function 與 Function Prototype</li>
</ul>
<blockquote>
<p>也就是 OOP 並非 JavaScript 的核心價值，僅僅提供最基本的 OOP 支援，而且 ECMAScript 2016 之後的發展，也沒再對 OOP 有更進一步的支援，但 ECMAScript 對 FP 的支援卻越來越完整</p>
<p>也就是 JavaScript 對 OOP 支援僅屬於 Entry Level，連 C# 1.0 都不如</p>
<p>而 JavaScript 也沒打算對 OOP 有進一步支援，如 OOP 必備的 Interface、Generics 都不可能出現在 ECMAScript，因為這些都不是 JavaScript 的核心價值，這也是為什麼會有 TypeScript 出現</p>
<p>但 JavaScript 對 FP 支援則越來越完整，FP 的代表性功能都將陸續出現在新版 ECMAScript 中</p>
</blockquote>
<h2 id="JavaScript_的世界觀">JavaScript 的世界觀</h2><hr>
<p>JavaScript 雖然也有 <code>物件</code>，但其世界觀與 OOP 的 <code>物件</code> 並不相同：</p>
<ul>
<li><strong>OOP</strong>：強調 <code>資料</code> 與 <code>功能</code> 合一，都封裝在 class 內，以 class 為封裝的最小單位，寫程式就是在寫 class，<code>資料</code> 就是 field，<code>功能</code> 就是 method，因為 field 的內容不同，因此有 object</li>
<li><strong>JavaScript</strong>：強調 <code>資料</code> 與 <code>功能</code> 分家，<code>資料</code> 就是 object，<code>功能</code> 就是 function，以 function 為封裝的最小單位，寫程式就是在寫 function，若要將資料封裝在 function 內，會使用 closure</li>
</ul>
<blockquote>
<p>也就是同樣是 <code>物件</code>，OOP 認為 class 是 <code>資料</code> 與 <code>功能</code> 的抽象，也因為有 <code>功能</code>，所以才必須要有 interface 定義 <code>功能</code> 的 <code>合約</code></p>
<p>但 JavaScript 認為 <code>功能</code> 只放 <code>資料</code> 即可，<code>功能</code> 寫在 function 內，也因為 object 沒有 <code>功能</code>，所以不需要 interface 作為 <code>合約</code></p>
<p>Q : JavaScript 的 object 明明可以放 function，這與 class 的 method 不是很類似嗎 ?</p>
</blockquote>
<p>JavaScript 認為 <code>Function as Data</code>，也稱為 <code>First Class Function</code>，因此 function 可以如 data 傳進其他 function，也可如 data 回傳 function，甚至將 function 放在 array 中，也就是你怎麼處理 data，就能怎麼處理 function。</p>
<p>也因為 <code>Function as Data</code>    ，function 是被當成 data 掛進 object 中，而不是 class 的 method。</p>
<blockquote>
<p>C# 雖然也可以將 function 傳入到其他 function，但必須透過 Delegate，也就是將 function 封裝成 Delegate 物件後，才能提供類似 JavaScript 功能，因為 C# 本質是 OOP</p>
</blockquote>
<h2 id="JavaScript_與_OOP">JavaScript 與 OOP</h2><hr>
<p>JavaScript 只是把 <code>物件</code> 用在處理 data，而不是如 OOP 將 <code>物件</code> 當成 <code>抽象</code> 使用，這是 JavaScript 與其他 OOP 語言最大的差異。</p>
<p>這也是為什麼 OOP 的 Design Pattern 套用在 JavaScript 都很奇怪，但 FP 的 Design Pattern 套用在 JavaScript 都很順利。</p>
<p>因為 JavaScript 的本質是 FP，不是 OOP，而且 ECMAScript 也沒打算將 JavaScript 繼續往 OOP 邁進。</p>
<blockquote>
<p>假如還是希望能以 OOP 寫 JavaScript，那就要挑選 TypeScript，TypeScript 持續對 OOP 進行強化，也有 Interface 與 Generics</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JavaScript 的 object 僅用來處理 data，不是拿來當 <code>抽象</code> 使用</li>
<li><code>Funtion as Data</code>，在 JavaScript 中，function 被視為 data 使用</li>
<li>由於 JavaScript 語言特性不同，若以 OOP 語言，如 C++ / C# / Java 思維去思考 JavaScript，就會很難進步，會覺得 JavaScript 是很糟糕的語言</li>
<li>但若以 FP 語言，如 F# / ReasonML / Haskell 思維去思考 JavaScript，就會豁然開朗，會覺得 JavaScript 是很棒的語言</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[JavaScript 可愛的一面]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Var]]></title>
    <link href="https://oomusou.io/ecmascript/var/"/>
    <id>https://oomusou.io/ecmascript/var/</id>
    <published>2018-09-26T12:23:43.000Z</published>
    <updated>2018-09-27T09:03:21.685Z</updated>
    <content type="html"><![CDATA[<p><code>var</code> 從 ES5 就存在，也是 ES5 的代表 keyword，看到 <code>var</code> 就可以判斷為 JavaScript。</p>
<p>但 <code>var</code> 在 ES6 有了一些改變，重要性也不若以往，TC39 甚至建議完全不要使用 <code>var</code>，改用 <code>let</code> 與 <code>const</code>。</p>
<a id="more"></a>
<h2 id="Verson">Verson</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Var">Var</h2><hr>
<p>宣告變數於 function 內或 function 外 (global)。</p>
<ul>
<li><strong>Scope</strong>：為 execution context，分 function (function 內) 與 global (function 外)，而非 <code>{}</code></li>
<li><strong>Auto Global</strong>：若沒 <code>var</code> 一個變數，會自動 <code>升級</code> 成 global 變數 (ES5 ok、但 ES6 廢除)</li>
<li><strong>Undefined</strong>：有 <code>var</code> 但未指定值，就是 <code>undefined</code></li>
<li><strong>Hoisting</strong>：無論你寫在 function 內第幾行，都會在 code 執行 <code>前</code> 先宣告變數</li>
<li><strong>Re-declare</strong>：若重新 <code>var</code> 一個變數，原來的值仍會存在</li>
</ul>
<h2 id="Scope">Scope</h2><hr>
<p><strong>scope01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> z = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(z);</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都無法執行。</p>
<p><code>z</code> 的 execution context 為 function 內，所以 function 外部抓不到 <code>z</code>，會在 run-time 跳出 <code>ReferenceError</code>。</p>
<p><strong>scope02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">z = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 可執行，ES6 會噴 <code>ReferenceError</code>。</p>
<p>在 ES5 允許 global variable 不使用 <code>var</code> 宣告變數，但 ES6 會啟動 <code>strict mode</code>，儘管是 global variable，也一定要使用 <code>var</code>。</p>
<h2 id="Auto_Global">Auto Global</h2><hr>
<p><strong>auto-global.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  y = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 可執行，ES6 會噴 <code>ReferenceError</code>。</p>
<p><code>y</code> 在 ES5 會自動升級為 global 變數，還是會印出 <code>1</code>，但 ES6 會啟動 <code>strict mode</code>，<code>y</code> 無法升級成 global 變數，會在 run-time 跳出 <code>ReferenceError</code>。</p>
<h2 id="Undefined">Undefined</h2><hr>
<p><strong>undefined01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'still going...'</span>);</span><br><span class="line"><span class="comment">// RefferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都無法執行。</p>
<p>Run-time <code>ReferenceError</code>，因為 <code>a</code> 沒有 <code>var</code> 宣告。</p>
<p><strong>undefined02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'still going...'</span>);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// still going...</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p><code>a</code> 只宣告但沒有給值，因此為 <code>undefined</code>。</p>
<blockquote>
<p>ECMAScript 對於變數，沒有 <code>預設值</code>，也不是 <code>null</code>，而是特有 <code>undefined</code></p>
<p>有些瀏覽器為 <code>&quot;&quot;</code></p>
</blockquote>
<h2 id="Hoisting">Hoisting</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bla = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> bla;</span><br></pre></td></tr></table></figure>
<p>但實際執行時為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bla;</span><br><span class="line">bla = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>也就是無論是 ES5 或 ES6，都會自動將 <code>var</code> 移到程式碼的最前面先執行。</p>
<p><strong>hoisting01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">111</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 111</span></span><br></pre></td></tr></table></figure>
<p>實際執行時</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">  bar = <span class="number">111</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 111</span></span><br></pre></td></tr></table></figure>
<p>無論 ES5 或 ES6，因為 <code>var bar</code> 會被 Hoisting 到 function 的最前面，因此為 <code>undefined</code>。</p>
<blockquote>
<p>因為 var 會 Hoisting，導致 JavaScript 的程式碼風格與 C# 迥異：</p>
<ul>
<li>JavaScript 會變數宣告在 function 內一開始</li>
<li>C# 會在使用才宣告變數</li>
</ul>
</blockquote>
<p><strong>hoisting02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y, y = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + y); </span><br><span class="line"><span class="comment">// undefinedA</span></span><br></pre></td></tr></table></figure>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">var</span> y;</span><br><span class="line">x = y;</span><br><span class="line">y = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + y); </span><br><span class="line"><span class="comment">// undefinedA</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>var y</code> 會先被 Hoisting，所以 <code>x = y</code> 時，<code>y</code> 還是 <code>undefined</code>，因此 <code>x</code> 也是 <code>undefined</code>。</p>
<blockquote>
<p>實務上建議一行只 <code>var</code> 一個變數</p>
</blockquote>
<h2 id="Redeclaration">Redeclaration</h2><hr>
<p><strong>redeclaration01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>因此 <code>var x</code> 被 Hoisting，所以結果都是 <code>2</code>。</p>
<p><strong>redeclaration02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>由於 Hoisting 機制，JavaScript 允許 re-declare。</p>
<blockquote>
<p>C# 無法這樣寫，compile 就會報錯</p>
<p>Babel 可編譯也可執行，SonarQube 會抓出來</p>
<p>但實務上不建議使用 re-declare 機制</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>在 ES6，無論 function 內的 variable 或 global variable，一律要使用 <code>var</code>，否則會噴 <code>ReferenceError</code></li>
<li>JavaScript 有獨特的 <code>undefined</code>，只要變數沒有給定值都是 <code>undefined</code></li>
<li>由於 JavaScript 獨特的 Hoisting 機制，導致變數宣告都集中在 function 的最前面，與 C# 不同</li>
<li>由於 Hoisting 機制，JavaScript 允許 re-declare，與 C# 不同，但 SonarQube 會抓到錯誤，且實務上不建議這樣寫</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ecmascript_var" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">JavaScript MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" target="_blank" rel="external">var</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 var 宣告變數]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Refactor to LINQ => ForEach]]></title>
    <link href="https://oomusou.io/linq/foreach/"/>
    <id>https://oomusou.io/linq/foreach/</id>
    <published>2018-09-25T13:23:43.000Z</published>
    <updated>2018-09-26T16:11:05.824Z</updated>
    <content type="html"><![CDATA[<p>LINQ 是 C# 3.0 實現 FP 重要里程碑，提供大量的 Operator，讓我們以 Pure Function 將 data 以 Dataflow 與 Pipeline 方式實現。本系列將先以 Imperative 實作，然後再重構成 FP，最後再重構成 LINQ Operator。</p>
<p>首先從最基本的 <code>ForEach</code> Operator 談起。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.2.3</p>
<h2 id="Imperative">Imperative</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Enumerable.Range()</code> 產生 <code>1, 2, 3</code>，最後使用 <code>foreach()</code> 印出每個值。</p>
<p><code>foreach</code> statement 是 Imperative 慣用手法。</p>
<h2 id="Refactor_to_HOF">Refactor to HOF</h2><hr>
<p>實務上這種 <code>foreach</code> 天天都要用到，但用 <code>foreach</code> 這種 statement 寫法，重複使用能力為 0，就每天都要不斷的寫 <code>foreach</code>。</p>
<p>若我們能將 <code>foreach</code> 抽成 <code>ForEach()</code> Higher Order Function，我們就能不斷 reuse <code>ForEach()</code>，只要將不同的商業邏輯以 function 傳進 <code>ForEach()</code> 即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            </span><br><span class="line">            MyForEach(data, Console.WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyForEach</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Action&lt;<span class="keyword">int</span>&gt; action</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                action(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyForEach</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Action&lt;<span class="keyword">int</span>&gt; action</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        action(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己以 <code>MyForEach()</code> 實作出 <code>foreach</code> statement 的 Higher Order Function 版本。</p>
<p>第一個參數為 data，第二個參數為 function。</p>
<p>將 <code>foreach</code> statement 包進 <code>MyForEach()</code> function，如此 <code>foreach</code> statement 就能被重複使用。</p>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyForEach(data, Console.WriteLine);</span><br></pre></td></tr></table></figure>
<p>原來的 <code>foreach</code> statement 重構成 <code>MyForEach()</code> Higher Order Function，只要將 data 與 <code>Console.WriteLine</code> 傳入即可。</p>
<h2 id="Refactor_to_Generics">Refactor to Generics</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            </span><br><span class="line">            MyForEach(data, Console.WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                action(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        action(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 <code>MyForEach()</code> 不只適用於 <code>int</code>，而且可適用於任何型別，因此重構成 <code>&lt;T&gt;</code>。</p>
<h2 id="Refactor_to_Extension_Method">Refactor to Extension Method</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .MyForEach(Console.WriteLine);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                action(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        action(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyForEach()</code> 需要兩個參數，使用上不是那麼方便，而且也無法 Pipeline 般使用，因此將第一個參數加上 <code>this</code>，成為 Extension Method，</p>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enumerable</span><br><span class="line">    .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    .MyForEach(Console.WriteLine);</span><br></pre></td></tr></table></figure>
<p>如此 <code>MyForEach()</code> 就與 <code>Range()</code> 串起來了，而且也減少了一個參數。</p>
<h2 id="Refactor_to_LINQ">Refactor to LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(Console.WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 LINQ 早已提供 <code>ForEach()</code>，不必我們自己實作。</p>
<blockquote>
<p>因為 <code>ForEach()</code> 為 <code>List</code> 所提供的 operator，因此必須先將 <code>IEnumerable</code> 由 <code>ToList()</code> 轉成 <code>List</code>。</p>
</blockquote>
<h2 id="Refactor_to_Using_Static">Refactor to Using Static</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>using static</code> 之後，則 <code>Range()</code> 與 <code>WriteLine()</code> 可進一步縮短，更符合 FP 風格。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>就算自己重構，也會重構出 <code>ForEach()</code> Higher Order Function，只是因為太常使用，LINQ 已經內建 <code>ForEach()</code></li>
<li>善用 <code>using static</code>，可讓 class 的 static method 更像 function</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LINQForEach" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以重構角度探討 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FP 之 Pure Function 與 Side Effect]]></title>
    <link href="https://oomusou.io/fp/pure-function/"/>
    <id>https://oomusou.io/fp/pure-function/</id>
    <published>2018-09-24T12:23:43.000Z</published>
    <updated>2018-10-07T14:03:07.036Z</updated>
    <content type="html"><![CDATA[<p>Functional Programming 要求 Data 與 Function 分離，其中 Data 要求的是 Immutability，而 Function 要求的就是 Pure Function。這是 FP 的兩大基石，所有其他的特性都是由這兩個基本原則展開。</p>
<p>Pure Function 最簡單的定義就是 <code>不能產生 Side Effect</code>，但究竟什麼是 Side Effect 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>C# 7.2</p>
<blockquote>
<p>本文為 <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Funtional Programming in C#</a> 一書第二章的讀後心得</p>
</blockquote>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p><strong>Pure Function</strong></p>
<ul>
<li>與 Mathematical Function 一致</li>
<li>Ouput 僅與 Input Argument 相關</li>
<li>不會產生 Side Effect</li>
</ul>
</blockquote>
<p>與 Pure Function 相對的，就是 Impure Function：</p>
<blockquote>
<p><strong>Impure Function</strong></p>
<ul>
<li>大部分 Programming Function </li>
<li>除了 Input Argument 外，尚有其他因素影響 Output (Field、Exception、I/O)</li>
<li>會產生 Side Effect</li>
</ul>
</blockquote>
<p>我們可發現 Pure Function 與 Impure Function 是相對的，其他定義都很容易理解，唯獨 Side Effect 需要另外解釋。</p>
<h2 id="Side_Effect">Side Effect</h2><hr>
<ul>
<li>Mutate Global State</li>
<li>Mutate Input Argument</li>
<li>Throw Exception</li>
<li>Perform I/O Operation</li>
</ul>
<h3 id="Mutate_Global_State">Mutate Global State</h3><p>凡在 function 以外的 scope，就算是 Global State，如 OOP 的 field，也被視為 Global State。</p>
<p>修改 Global State 被視為有 Side Effect。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">var</span> count = counter.AddOne()</span><br><span class="line">                           .AddOne()</span><br><span class="line">                           .Count;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 <code>counter</code> 增加 2 次，結果為 <code>2</code>。</p>
<p><strong>Counter.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Count &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Counter</span>(<span class="params"><span class="keyword">int</span> count</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Counter <span class="title">AddOne</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OOP 強調 Data 與 Function 合一，所以會將 <code>Count</code> 視為 field，封裝在 <code>Counter</code> class 內。</p>
<p><code>AddOne()</code> 被視為有 Side Effect，因為其修改了 function 外部的 <code>Count</code> field，屬於 Global State。</p>
<p>為了做 Fluent Interface，OOP 會以 <code>return this</code> 方式。</p>
<p><strong>Counter.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Count &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Counter</span>(<span class="params"><span class="keyword">int</span> count</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CounterExt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Counter <span class="title">AddOne</span>(<span class="params"><span class="keyword">this</span> Counter counter</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Counter(counter.Count + <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FP 強調 Data 與 Function 分家，因此 Data 屬於 <code>Counter</code> class，而 Function 屬於 <code>CounterExt</code> class。</p>
<p><code>AddOne()</code> 沒有 Side Effect，因為根據 argument 得到目前的 count，計算後回傳新的 <code>Counter</code> object，完全與 function 外部無關。</p>
<p>FP 藉由 Extension Method 達成 Fluent Interface。</p>
<blockquote>
<p>儘管由 OOP 改用 FP，但 client 的寫法完全沒有改變</p>
</blockquote>
<h3 id="Mutate_Input_Argument">Mutate Input Argument</h3><p>修改 function 的 argument，而造成 function 外界的 data 被修改，也視為 Side Effect。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">decimal</span> <span class="title">RecomputeTotal</span>(<span class="params">Order order, List&lt;OrderLine&gt; linesToDelete</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> line <span class="keyword">in</span> order.OrderLines)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.Quantity == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            linesToDelete.Add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result += line.Product.Price * line.Quantity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RecomputeTotal</code> 被視為有 Side Effect，因為新增了<code>linesToDelete</code> List，造成對 <code>RecomputeTotal()</code> function 外部的 data 有影響。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">decimal</span>, IEnumerable&lt;OrderLine&gt;) RecomputeTotal(Order)</span><br><span class="line">    =&gt; (order.OrderLines.Sum(x =&gt; x.Product.Price * x.Quantity)),</span><br><span class="line">        order.OrderLines.Where(x =&gt; x.Quantity == <span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<p>使用回傳 <code>order.OrderLines.Where(x =&gt; x.Quantity == 0)</code> 取代新增 <code>linesToDelete</code> List，如此不會影響 function 外部 data，因此沒有 Side Effect。</p>
<h3 id="Throw_Exception">Throw Exception</h3><p>因為以下兩個原因，Throw Exception 也被視為 Side Effect：</p>
<ul>
<li>Exception 屬於 function 外部 scope，也算 Global State</li>
<li>Throw Exception 後，其他 fuction 必須去 <code>try catch</code> 處理，由於不是來自於 function argument，會使得其他 function 不是 Pure Function</li>
</ul>
<blockquote>
<p>FP 也有自己的 Exception 處理機制，如 F# 的 <code>Result</code>、Haskell 的 <code>Either</code></p>
</blockquote>
<h3 id="Perform_I/O_Operation">Perform I/O Operation</h3><p>在現實世界中，不可能所有 function 都在計算或者 mapping，如</p>
<ul>
<li>呼叫 API</li>
<li>寫入資料庫、寫到 console</li>
<li>讀出系統時間</li>
</ul>
<p><img src="/images/fp/pure-function/pure000.png" alt="pure000"></p>
<p>這些都屬於無法避免的 Side Effect，但我們可將 Side Effect 集中在 Pure Function 前後，而不是在 function 內隨意的 Side Effect。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Pure Function 與 Side Effect 為 FP 的入門磚，看似基本，但實務上並不容易實現，常常一不小心就寫出 Impure Function</li>
<li>I/O 是無法避免的 Side Effect，但 FP 能將 Side Effect 集中，不要散佈到各處</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/MutateGlobalState" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[定義 Pure Function 與 Side Effect]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 設定 ECMAScript 2015+ 與 File Watcher ?]]></title>
    <link href="https://oomusou.io/webstorm/es6-file-watcher/"/>
    <id>https://oomusou.io/webstorm/es6-file-watcher/</id>
    <published>2018-09-19T12:23:43.000Z</published>
    <updated>2018-09-19T04:38:40.669Z</updated>
    <content type="html"><![CDATA[<p>雖然可以搭配 Webpack 將 ECMAScript 2015+ 編譯成 ES5，但有時只是想簡單學習 ECMAScript 2015+，此時可以透過 WebStorm 內建的 File Watcher，只要 ECMAScript 一存檔，WebStorm 就會自動呼叫 Babel 幫我們編譯成 ES5。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>WebStorm 2018.2.3<br>Babel CLI 6.26.0<br>Babel-preset-env 1.7.0</p>
<h2 id="Babel_CLI">Babel CLI</h2><hr>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="built_in">global</span> <span class="keyword">add</span> babel-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/es6-file-watcher/es6000.png" alt="es6000"></p>
<p>WebStorm 必須依賴 Babel 才能將 ECMAScript 2015+ 編譯，因此必須先安裝 transpiler。</p>
<p>以 global 方式安裝 <code>bable-cli</code>。</p>
<p><img src="/images/webstorm/es6-file-watcher/es6001.png" alt="es6001"></p>
<h2 id="建立專案">建立專案</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6004.png" alt="es6004"></p>
<ol>
<li>建立一個簡單的專案，使用 <code>Empty Project</code> 即可</li>
<li>設定專案所建立的目錄位置</li>
</ol>
<h2 id="Babel-preset-env">Babel-preset-env</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="built_ins">add</span> babel-preset-<span class="built_ins">env</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/es6-file-watcher/es6002.png" alt="es6002"></p>
<p>Babel CLI 只是包含 transpiler，但 ECMAScript 每年都有新的語言定義，因此要另外安裝 Babel-preset-env。</p>
<p>將 <code>babel-preset-env</code> 安裝在專案目錄下。</p>
<p><img src="/images/webstorm/es6-file-watcher/es6003.png" alt="es6003"></p>
<h2 id="支援_ECMAScript_2015+">支援 ECMAScript 2015+</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6009.png" alt="es6009"></p>
<ol>
<li><strong><em>Preferences -&gt; Language &amp; Frameworks -&gt; JavaScript</em></strong></li>
<li><strong>JavaScript language version</strong> ： <code>ECMAScript 6</code></li>
</ol>
<h2 id="File_Watcher">File Watcher</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6005.png" alt="es6005"></p>
<ol>
<li><strong><em>Preferences -&gt; Tools -&gt; File Watchers</em></strong></li>
<li>按 <code>+</code> 新增 File Watcher</li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6006.png" alt="es6006"></p>
<ol>
<li>WebStorm 預設提供了很多 File Watcher 設定，選擇 <code>Babel</code></li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6007.png" alt="es6007"></p>
<ol>
<li>接受預設值即可，按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6008.png" alt="es6008"></p>
<ol>
<li>成功新增了 Babel File Watcher</li>
</ol>
<h2 id="Hello_World">Hello World</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6010.png" alt="es6010"></p>
<ol>
<li>使用 ECMAScript 2015 語法的 <code>HelloWorld.js</code></li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6011.png" alt="es6011"></p>
<ol>
<li>只要一存檔，File Watcher 就會啟動 Babel，編譯成 ES5 的 <code>HelloWorld.js</code></li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6012.png" alt="es6012"></p>
<ol>
<li>使用 Node.js 執行 ES5 版本的 <code>HelloWorld.js</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 ECMAScript 2015+ 需要 transpile，因此很多人卻步，事實上在 WebStorm 只要配合 File Watcher，就會自動呼叫 Babel 編譯，開發體驗與 ES5 完全一樣</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://blog.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm Blog</a>, <a href="https://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/" target="_blank" rel="external">ECMAScript 6 in WebStorm: Transpiling</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 WebStorm 自動編譯 ECMAScript 2015+]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
      <category term="WebStorm" scheme="https://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 DefaultIfEmpty() 取代 null 判斷]]></title>
    <link href="https://oomusou.io/linq/defaultifempty/"/>
    <id>https://oomusou.io/linq/defaultifempty/</id>
    <published>2018-09-06T13:23:43.000Z</published>
    <updated>2018-09-08T02:11:15.000Z</updated>
    <content type="html"><![CDATA[<p>在使用 LINQ 的 <code>Where()</code>，大部分人都會再搭配 <code>FirstOrDefault()</code>，如此 <code>Where()</code> 找不到時就不會拋出 Exception，而是改判斷 <code>null</code> 。</p>
<p>但判斷 <code>null</code> 也不是什麼好事，因為 <code>null</code> 就像癌細胞，只要出現 <code>null</code>，就到處都要判斷 <code>null</code>，而且還很容易忘記判斷 <code>null</code> 導致 run-time 錯誤。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.2</p>
<h2 id="Imperative">Imperative</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> members = <span class="keyword">new</span> List&lt;Member&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"You"</span>, Password = <span class="string">"4567"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> user = <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> member = members</span><br><span class="line">                .Where(x =&gt; x.Username == user.Username &amp;&amp; x.Password == user.Password)</span><br><span class="line">                .FirstOrDefault();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">string</span> result;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (member != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result = member.Username;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine($<span class="string">"Welcome &#123;result&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = members</span><br><span class="line">  .Where(x =&gt; x.Username == user.Username &amp;&amp; x.Password == user.Password)</span><br><span class="line">  .FirstOrDefault();</span><br></pre></td></tr></table></figure>
<p>大部分人會採用 <code>Where()</code> 搭配 <code>FirstOrDefault()</code> 寫法。</p>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (member != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    result = member.Username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    result = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後再搭配 <code>null</code> 判斷。</p>
<p>這是典型 Imperative 寫法。</p>
<h2 id="FP">FP</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> members = <span class="keyword">new</span> List&lt;Member&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"You"</span>, Password = <span class="string">"4567"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> user = <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;;</span><br><span class="line"></span><br><span class="line">            members</span><br><span class="line">                .Where(IsMember(user))</span><br><span class="line">                .DefaultIfEmpty(DefaultMember())</span><br><span class="line">                .Select(ToFormat)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line"></span><br><span class="line">            Func&lt;Member, <span class="keyword">bool</span>&gt; IsMember(Member member)</span><br><span class="line">                =&gt; x =&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br><span class="line"></span><br><span class="line">            <span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">ToFormat</span>(<span class="params">Member x</span>) </span>=&gt; $<span class="string">"Welcome : &#123;x.Username&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">members</span><br><span class="line">    .Where(IsMember(user))</span><br><span class="line">    .DefaultIfEmpty(DefaultMember())</span><br><span class="line">    .Select(ToFormat)</span><br><span class="line">    .ToList()</span><br><span class="line">    .ForEach(WriteLine);</span><br></pre></td></tr></table></figure>
<p>一樣使用 <code>Where()</code>，但 <code>IsMember()</code> 為 Higher Order Function，傳入 <code>user</code> 後，會傳回 <code>Where()</code> 所需要的 Predicate Function。</p>
<p>為了避免 <code>Where()</code> 找不到資料，馬上加上 <code>DefaultIfEmpty()</code>，指定什麼叫做 Default，這樣就不用判斷 <code>null</code> 了，找不到的資料就是 Default。</p>
<p>然後執行 <code>Select()</code> 轉換要顯示的格式。</p>
<p>目前為止都屬於 FP 的 Pure Function 部分，沒有 Side Effect。</p>
<p>最後要印出來，屬於 Side Effect 部分，從 <code>IEnumerable</code> 轉成 <code>List</code> ，呼叫 <code>ForEach()</code> 執行 Side Effect 的 <code>WriteLine</code>。</p>
<p>全部以 Data Flow 方式執行，非常漂亮。</p>
<p>27 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Member, <span class="keyword">bool</span>&gt; IsMember(Member member)</span><br><span class="line">    =&gt; x =&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br></pre></td></tr></table></figure>
<p>此為 Higher Order Function，目的在傳回 <code>Func&lt;Member, bool&gt;</code> ，提供 <code>Where()</code> 所需要的 Predicate Function，可傳入任何 user 資料。</p>
<p>30 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">    </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br></pre></td></tr></table></figure>
<p>提供 <code>DefaultIfEmpty()</code> 所需要的 Default Member。</p>
<p>33 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">ToFormat</span>(<span class="params">Member x</span>) </span>=&gt; $<span class="string">"Welcome : &#123;x.Username&#125;"</span>;</span><br></pre></td></tr></table></figure>
<p>提供 <code>Select()</code> 所需要的 Selector Function。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於使用了 <code>DefaultIfEmpty()</code>，我們就不用再判斷 <code>null</code> ，可以使用 FP 的 Data Flow 方式加以處理，完全 Pure Function 沒有 Side Effect，直到最後 <code>Select()</code> 完，才呼叫 <code>ForEach()</code> 執行 Side Effect 的 <code>WriteLine</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LINQDefaultIfEmpty" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[更 FP 的方式使用 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 .NET Core 開發 Web API (GET) ?]]></title>
    <link href="https://oomusou.io/netcore/webapi/get/"/>
    <id>https://oomusou.io/netcore/webapi/get/</id>
    <published>2018-09-06T12:23:43.000Z</published>
    <updated>2018-09-06T10:31:45.000Z</updated>
    <content type="html"><![CDATA[<p>當前後端分離後，後端退守 API，使用 .NET Core 實現 Web API 為最常見的功能，本文將以實務上常使用的 <code>查詢會員</code> 為範例，示範如何實作出 GET action 的 Web API。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>Rider 2018.2<br>Paw 3.1.5</p>
<h2 id="Check_API_(GET)">Check API (GET)</h2><hr>
<h3 id="Is_Member">Is Member</h3><p><img src="/images/netcore/webapi/get/post000.png" alt="post000"></p>
<ol>
<li><p>使用 <code>GET</code>，<code>http://localhost:5001/api/exists/Sam</code> 查詢</p>
</li>
<li><p>回傳</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    exists: "true"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若為會員，會回傳 <code>exists</code> 為 <code>true</code>。</p>
<h3 id="Not_Member">Not Member</h3><p><img src="/images/netcore/webapi/get/post001.png" alt="post001"></p>
<ol>
<li><p>使用 <code>GET</code>，<code>http://localhost:5001/api/exists/Kevin</code></p>
</li>
<li><p>回傳</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     exists: "false"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若為會員，會回傳 <code>exists</code> 為 <code>false</code>。</p>
<p><strong>ExistsController.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Exists.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exists.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [Route(<span class="string">"api/[controller]"</span>)]</span><br><span class="line">    [ApiController]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExistsController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members</span><br><span class="line">            = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET api/exists/:username</span></span><br><span class="line">        [HttpGet(<span class="string">"&#123;username&#125;"</span>)]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">CheckMember</span>(<span class="params"><span class="keyword">string</span> username</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _members</span><br><span class="line">                .Where(IsMember)</span><br><span class="line">                .DefaultIfEmpty(DefaultMember())</span><br><span class="line">                .Select(Result)</span><br><span class="line">                .First();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>) </span>=&gt; x.Username == username;</span><br><span class="line"></span><br><span class="line">            <span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Response &#123;Exists = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members </span><br><span class="line">    = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>為簡化起見，就沒從 database 判斷 username 與 password，暫時將資料放在 <code>List</code> 內。</p>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HttpGet(<span class="string">"&#123;username&#125;"</span>)]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">CheckMember</span>(<span class="params"><span class="keyword">string</span> username</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>HttpGet</code> attribute 描述 <code>LoginMember</code> 使用 GET action</li>
<li>回傳值 <code>Response</code> 自訂型別，被包在 .NET Core 規定的 <code>ActionResult</code> 內</li>
</ul>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> _members</span><br><span class="line">    .Where(IsMember)</span><br><span class="line">    .DefaultIfEmpty(DefaultMember())</span><br><span class="line">    .Select(Result)</span><br><span class="line">    .First();</span><br></pre></td></tr></table></figure>
<p><code>Where()</code>：判斷資料是否在 <code>List</code> 內</p>
<blockquote>
<p>LINQ 的 <code>Where()</code> 相當於 FP 的 <code>filter()</code></p>
</blockquote>
<p><code>DefaultIfEmpty()</code> ：<code>Where()</code> 一定可能找不到資料，因此會回傳 <code>null</code>，但 <code>null</code> 相當於癌細胞，只要一使用到 <code>null</code>，就必須到處判斷 <code>null</code> ，非常麻煩，而且只要有一個地方沒判斷到 <code>null</code>，程式就可能在 run-time 出錯。</p>
<p>比較好的方式是在 <code>Where()</code> 之後馬上配上 <code>DefaultIfEmpty()</code> 描述，只要 <code>Where()</code> 找不到資料，就不會回傳 <code>null</code>，而是回傳 default object。</p>
<blockquote>
<p><code>DefaultIfEmpty()</code> 就是 LINQ 支援 <strong>Null Object Pattern</strong> / <strong>Default Object Pattern</strong> 的一種實現</p>
</blockquote>
<p><code>Select()</code>：我們要回傳的是 <code>Response</code> 自訂型別，而不是 <code>Member</code> 型別，勢必要做轉換，<code>Select()</code> 幫我們將 <code>Member</code> 自訂型別轉成 <code>Result</code> 自訂型別。</p>
<blockquote>
<p>LINQ 的 <code>Select()</code> 相當於 FP 的 <code>map()</code></p>
</blockquote>
<p><code>First()</code>：別忘了 <code>Select()</code> 的轉換有個特色：原本是 <code>Collection</code>，<code>Select()</code> 之後還是 <code>Collection</code>，但我們要的是 <code>Response</code>，因此使用 <code>First()</code> 只取一筆 <code>Response</code>。</p>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>) </span>=&gt; x.Username == username;</span><br></pre></td></tr></table></figure>
<p><code>IsMember()</code> Local Function，提供 <code>Where()</code> 的 Predicate Function。</p>
<blockquote>
<p>Q : Parameter 使用 <code>x</code> 符合 Clean Code 原則 ?</p>
</blockquote>
<p>Local Function 與 Lambda 強調的就是 function 要短要小，且常常配合 Body Expression，若 parameter 名稱取太長，Lambda 就不美了。</p>
<p>由於 Lambda 來自於數學，一般會採用數學 <code>y = f(x)</code> 習慣，使用 <code>x</code>、<code>y</code>、<code>z</code> 即可。</p>
<p><code>x</code> 會難閱讀嗎 ? 由於 Local Function 與 Lambda 很短，很容易看到看到其型別定義，所以沒有閱讀與維護的問題。</p>
<p>27 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">    </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br></pre></td></tr></table></figure>
<p><code>DefaultMember()</code> Local Function，主要提供 <code>DefaultIfEmpty()</code> 所需要的 default object。</p>
<p>32 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">  </span>=&gt; <span class="keyword">new</span> Response</span><br><span class="line">  &#123;</span><br><span class="line">    Success = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username),</span><br><span class="line">    Username = x.Username</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><code>Result()</code> Local Function，主要提供 <code>Select()</code> 所需要的 data 與型別轉換。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core 提供了  <code>HttpGet</code> attribute，讓我們簡單的將 Controller 的 Method 提供 Web API 的 GET 服務</li>
<li>使用 LINQ 的 <code>Where()</code> 與 <code>DefaultIfEmpty()</code> 讓我們避開 <code>null</code> 魔咒，不用再到處判斷 <code>null</code>，也就是所謂的 Null Object Pattern 或 Default Object Pattern 的實踐</li>
<li>Local Function 與 Lambda 的 parameter 可以打破 OOP 與 Imperative 的習慣，以 <code>x</code>、<code>y</code>、<code>z</code> 命名即可，因為 Lambda 功能都很單一，且 function 很短，不像 Imperative 會拉很長，因此才需要取有意義的 parameter 名稱</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/WebAPIGET" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 GET 實現查詢會員 API]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
      <category term="Web API" scheme="https://oomusou.io/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 .NET Core 開發 Web API (POST) ?]]></title>
    <link href="https://oomusou.io/netcore/webapi/post/"/>
    <id>https://oomusou.io/netcore/webapi/post/</id>
    <published>2018-09-05T12:23:43.000Z</published>
    <updated>2018-09-06T10:34:24.000Z</updated>
    <content type="html"><![CDATA[<p>當前後端分離後，後端退守 API，使用 .NET Core 實現 Web API 為最常見的功能，本文將以實務上常使用的 <code>會員登入</code> 為範例，示範如何實作出 POST action 的 Web API。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>Rider 2018.2<br>Paw 3.1.5</p>
<h2 id="Login_API_(POST)">Login API (POST)</h2><hr>
<h3 id="Login_Success">Login Success</h3><p><img src="/images/netcore/webapi/post/post000.png" alt="post000"></p>
<ol>
<li>使用 <code>POST</code>，<code>http://localhost:5001/api/login</code></li>
<li>傳入 </li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    username: "Sam",</span><br><span class="line">    password: "1234"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>回傳</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    success: "true",</span><br><span class="line">    username: "Sam"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若 login 成功，會回傳 <code>success</code> 為 <code>true</code>，與 <code>username</code> 為 user 名稱。</p>
<h3 id="Login_Failed">Login Failed</h3><p><img src="/images/netcore/webapi/post/post001.png" alt="post001"></p>
<ol>
<li>使用 <code>POST</code>，<code>http://localhost:5001/api/login</code></li>
<li>傳入 </li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    username: "Kevin",</span><br><span class="line">    password: "1234"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>回傳</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    success: "false",</span><br><span class="line">    username: ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若 login 失敗，會回傳 <code>success</code> 為 <code>false</code>，與 <code>username</code> 為 <code>空白</code>。</p>
<p><strong>LoginController.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Login.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Login.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [Route(<span class="string">"api/[controller]"</span>)]</span><br><span class="line">    [ApiController]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members </span><br><span class="line">            = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// POST api/login</span></span><br><span class="line">        [HttpPost]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">LoginMember</span>(<span class="params">[FromBody] Member member</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _members</span><br><span class="line">                .Where(IsMember)</span><br><span class="line">                .DefaultIfEmpty(DefaultMember())</span><br><span class="line">                .Select(Result)</span><br><span class="line">                .First();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>)</span><br><span class="line">                </span>=&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br><span class="line"></span><br><span class="line">            <span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Response</span><br><span class="line">                &#123;</span><br><span class="line">                    Success = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username),</span><br><span class="line">                    Username = x.Username</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members</span><br><span class="line">    = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>為簡化起見，就沒從 database 判斷 username 與 password，暫時將資料放在 <code>List</code> 內。</p>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">LoginMember</span>(<span class="params">[FromBody] Member member</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>HttpPost</code> attribute 描述 <code>LoginMember</code> 使用 POST action</li>
<li>使用 <code>FromBody</code> attribute 描述 data 來自於 Body，並且自動轉型 <code>Member</code> 自訂型別</li>
<li>回傳值 <code>Response</code> 自訂型別，被包在 .NET Core 規定的 <code>ActionResult</code> 內</li>
</ul>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> _members</span><br><span class="line">    .Where(IsMember)</span><br><span class="line">    .DefaultIfEmpty(DefaultMember())</span><br><span class="line">    .Select(Result)</span><br><span class="line">    .FirstOrDefault();</span><br></pre></td></tr></table></figure>
<p><code>Where()</code>：判斷資料是否在 <code>List</code> 內</p>
<blockquote>
<p>LINQ 的 <code>Where()</code> 相當於 FP 的 <code>filter()</code></p>
</blockquote>
<p><code>DefaultIfEmpty()</code> ：<code>Where()</code> 一定可能找不到資料，因此會回傳 <code>null</code>，但 <code>null</code> 相當於癌細胞，只要一使用到 <code>null</code>，就必須到處判斷 <code>null</code> ，非常麻煩，而且只要有一個地方沒判斷到 <code>null</code>，程式就可能在 run-time 出錯。</p>
<p>比較好的方式是在 <code>Where()</code> 之後馬上配上 <code>DefaultIfEmpty()</code> 描述，只要 <code>Where()</code> 找不到資料，就不會回傳 <code>null</code>，而是回傳 default object。</p>
<blockquote>
<p><code>DefaultIfEmpty()</code> 就是 LINQ 支援 <strong>Null Object Pattern</strong> / <strong>Default Object Pattern</strong> 的一種實現</p>
</blockquote>
<p><code>Select()</code>：我們要回傳的是 <code>Response</code> 自訂型別，而不是 <code>Member</code> 型別，勢必要做轉換，<code>Select()</code> 幫我們將 <code>Member</code> 自訂型別轉成 <code>Result</code> 自訂型別。</p>
<blockquote>
<p>LINQ 的 <code>Select()</code> 相當於 FP 的 <code>map()</code></p>
</blockquote>
<p><code>First()</code>：別忘了 <code>Select()</code> 的轉換有個特色：原本是 <code>Collection</code>，<code>Select()</code> 之後還是 <code>Collection</code>，但我們要的是 <code>Response</code>，因此使用 <code>First()</code> 只取一筆 <code>Response</code>。</p>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>)</span><br><span class="line">    </span>=&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br></pre></td></tr></table></figure>
<p><code>IsMember()</code> Local Function，提供 <code>Where()</code> 的 Predicate Function。</p>
<blockquote>
<p>Q : Parameter 使用 <code>x</code> 符合 Clean Code 原則 ?</p>
</blockquote>
<p>Local Function 與 Lambda 強調的就是 function 要短要小，且常常配合 Body Expression，若 parameter 名稱取太長，Lambda 就不美了。</p>
<p>由於 Lambda 來自於數學，一般會採用數學 <code>y = f(x)</code> 習慣，使用 <code>x</code>、<code>y</code>、<code>z</code> 即可。</p>
<p><code>x</code> 會難閱讀嗎 ? 由於 Local Function 與 Lambda 很短，很容易看到看到其型別定義，所以沒有閱讀與維護的問題。</p>
<p>28 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">    </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br></pre></td></tr></table></figure>
<p><code>DefaultMember()</code> Local Function，主要提供 <code>DefaultIfEmpty()</code> 所需要的 default object。</p>
<p>31 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">  </span>=&gt; <span class="keyword">new</span> Response</span><br><span class="line">  &#123;</span><br><span class="line">    Success = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username),</span><br><span class="line">    Username = x.Username</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><code>Result()</code> Local Function，主要提供 <code>Select()</code> 所需要的 data 與型別轉換。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core 提供了  <code>HttpPost</code> attribute 與  <code>FromBody</code> attribute，讓我們簡單的將 Controller 的 Method 提供 Web API 的 POST 服務</li>
<li>使用 LINQ 的 <code>Where()</code> 與 <code>DefaultIfEmpty()</code> 讓我們避開 <code>null</code> 魔咒，不用再到處判斷 <code>null</code>，也就是所謂的 Null Object Pattern 或 Default Object Pattern 的實踐</li>
<li>Local Function 與 Lambda 的 parameter 可以打破 OOP 與 Imperative 的習慣，以 <code>x</code>、<code>y</code>、<code>z</code> 命名即可，因為 Lambda 功能都很單一，且 function 很短，不像 Imperative 會拉很長，因此才需要取有意義的 parameter 名稱</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/WebAPIPOST" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 POST 實現會員登入 API]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
      <category term="Web API" scheme="https://oomusou.io/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何不啟用 SonarQube 內建的 Rule ?]]></title>
    <link href="https://oomusou.io/sonarqube/deactivate-rule/"/>
    <id>https://oomusou.io/sonarqube/deactivate-rule/</id>
    <published>2018-09-03T12:23:43.000Z</published>
    <updated>2018-09-03T07:18:41.000Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 內建很多檢查 rule，但有些 rule 可能不適合團隊，暫時不想啟用，該如何在 SonarQube 設定呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.06.1-ce-mac59 (26764)<br>SonarQube 7.1 (build 11001)</p>
<h2 id="Rules">Rules</h2><hr>
<p><img src="/images/sonarqube/deactivate-rule/rule000.png" alt="rule000"></p>
<p><strong><em>Rule -&gt; C#</em></strong></p>
<p>若第一個 rule :  <code>=+ should not be used instead of +=</code>  不適合團隊，想暫時不啟用檢查。</p>
<blockquote>
<p>並不是這個 rule 不好，只是因為是第一個 C# rule，所以以此為範例</p>
</blockquote>
<p>SonarQube 舊版允許你直接不啟用某個 rule，但新版取消了這個功能，無法直接不啟用。</p>
<h2 id="Quality_Profiles">Quality Profiles</h2><hr>
<p><img src="/images/sonarqube/deactivate-rule/rule001.png" alt="rule001"></p>
<p><strong><em>Quality Profiles -&gt; C#</em></strong></p>
<p>SonarQube 預設使用的 Quality Profile 是 <code>Sonar way</code>，目前 <code>Sonar way</code> 無法取消 rule。</p>
<p>若要取消 rule，必須建立自己的 Quality Profile，然後才能取消。</p>
<p><img src="/images/sonarqube/deactivate-rule/rule002.png" alt="rule002"></p>
<ul>
<li>選擇右側  <code>option</code> 的 <code>Copy</code></li>
</ul>
<p><img src="/images/sonarqube/deactivate-rule/rule003.png" alt="rule003"></p>
<ol>
<li>輸入新的 Quality Profile 名稱</li>
<li>按 <code>Copy</code> 確定</li>
</ol>
<p><img src="/images/sonarqube/deactivate-rule/rule004.png" alt="rule004"></p>
<p><strong><em>Quality Profiles -&gt; C#</em></strong></p>
<ul>
<li>選擇 <code>My way</code>，選擇右側  <code>option</code> 的 <code>Set as Default</code></li>
</ul>
<p><img src="/images/sonarqube/deactivate-rule/rule005.png" alt="rule005"></p>
<ul>
<li><code>My way</code> 成為 C# project 預設的 Quality Profile</li>
</ul>
<h2 id="Deactivate_Rule">Deactivate Rule</h2><hr>
<p><img src="/images/sonarqube/deactivate-rule/rule006.png" alt="rule006"></p>
<p><strong><em>Quality Profiles -&gt; C#</em></strong></p>
<ul>
<li>點擊 <code>My way</code> Quality Profile</li>
</ul>
<p><img src="/images/sonarqube/deactivate-rule/rule007.png" alt="rule007"></p>
<ol>
<li>點擊 <code>Active</code> 下所有的 rule</li>
</ol>
<p><img src="/images/sonarqube/deactivate-rule/rule008.png" alt="rule008"></p>
<ol>
<li>找到我們想取消的 <code>=+ should not be used instead of +=</code> rule</li>
<li>按 <code>Deactivate</code> 取消</li>
</ol>
<p><img src="/images/sonarqube/deactivate-rule/rule009.png" alt="rule009"></p>
<ol>
<li><code>=+ should not be used instead of +=</code> rule 已被 <code>Deactivate</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>原本認為很簡單的功能，但因為 SonarQube 的設計有改變，竟然花了一些時間才搞定，特別記錄下來</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[SonarQube 無法修改預設的 Sonar way]]>
    
    </summary>
    
      <category term="SonarQube" scheme="https://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[將 Using Statement 重構成 Using() Function]]></title>
    <link href="https://oomusou.io/fp/using/"/>
    <id>https://oomusou.io/fp/using/</id>
    <published>2018-08-21T12:23:43.000Z</published>
    <updated>2018-08-21T13:51:56.000Z</updated>
    <content type="html"><![CDATA[<p>C# 有個著名的 <code>using</code> statement，對於實踐 <code>IDisposable</code> 的物件特別好用，但 <code>using</code> 是個 statement，在 Imperative 世界沒問題，但在 Functional 世界，statement 就類似 <code>句點</code>，讓我們無法繼續 Pipeline 或對其他 function 做 Compose，我們能否比照將 <code>foreach</code> statement 重構成 <code>ForEach()</code> function，也將 <code>using</code> statement 重構成 <code>using()</code> function 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>F# 4.5<br>Rider 2018.1.4</p>
<h2 id="C#_之_Using_Statement">C# 之 Using Statement</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> streamReader = <span class="keyword">new</span> StreamReader(<span class="string">"TestFile.txt"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> line = streamReader.ReadToEnd();</span><br><span class="line">                Console.WriteLine(line);</span><br><span class="line">                <span class="comment">// Hello World</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>StreamReader</code> 是個典型實踐 <code>IDisposable</code> 的物件，所以在使用時都會使用 <code>using statement</code> 包起來，等離開 <code>{}</code> scope 時，自動呼叫 <code>Dispose()</code> 釋放 resource。</p>
<p>這些都是我們都習慣的 C#。</p>
<p>但 <code>using</code> 是 statement，在 Imperative 世界沒問題，反正程式碼都是一行一行循序執行。</p>
<p>但在 Functional 世界，我們要求 code 要 Pipeline，要 Compose，所以 FP 喜歡使用 expression，不喜歡 statement。</p>
<p>Statemet 就類似 <code>句點</code>，讓所有的 Pipeline 都中斷了。</p>
<p>其實仔細看 <code>using</code> statement，其實包含幾個部分：</p>
<ul>
<li><strong>Setup</strong> : 獲得 resource</li>
<li><strong>Body</strong> : 執行 resource </li>
<li><strong>Teardown</strong> : 釋放 resource</li>
</ul>
<p>其中 <code>using</code> statement 就是幫我們做 teardown 部分。</p>
<p>因此我們可以自己寫一個 <code>Using()</code> function，將 setup 與 body 傳入 <code>Using()</code>。</p>
<h2 id="C#_之_Using()_Function">C# 之 Using() Function</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> Functional.F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Using(<span class="keyword">new</span> StreamReader(<span class="string">"TestFile.txt"</span>), ReadFile)</span><br><span class="line">                .WriteLine();</span><br><span class="line">                       </span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">ReadFile</span>(<span class="params">StreamReader streamReader</span>) </span>=&gt; streamReader.ReadToEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Using(<span class="keyword">new</span> StreamReader(<span class="string">"TestFile.txt"</span>), ReadFile)</span><br><span class="line">	.WriteLine();</span><br></pre></td></tr></table></figure>
<p>使用 <code>Using()</code> function，將 setup 傳入第一個參數，將 body 傳入第二個參數。</p>
<p>由於 <code>ReadFile()</code> 回傳為 <code>string</code>，因此 <code>Using()</code> 也是回傳 <code>string</code>，這樣就可以使用 Pipeline 方式 <code>WriteLine()</code> 直接印出。</p>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">ReadFile</span>(<span class="params">StreamReader streamReader</span>) </span>=&gt; streamReader.ReadToEnd();</span><br></pre></td></tr></table></figure>
<p>Body 以 local function 定義。</p>
<p>至於 <code>Using()</code> 與 <code>WriteLine()</code> 怎麼來的呢 ? 是我們自己寫的 Higher Order Function。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Functional</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">F</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> R Using&lt;TDisp, R&gt;(TDisp disposable, Func&lt;TDisp, R&gt; f) <span class="keyword">where</span> TDisp : IDisposable</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (disposable) <span class="keyword">return</span> f(disposable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLine</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> data</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.WriteLine(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> R Using&lt;TDisp, R&gt;(TDisp disposable, Func&lt;TDisp, R&gt; f) <span class="keyword">where</span> TDisp : IDisposable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (disposable) <span class="keyword">return</span> f(disposable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己寫一個 <code>Using()</code> HOF，第一個參數傳入 <code>IDisposable</code> 物件，第二個參數傳入 body function。</p>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLine</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> data</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    Console.WriteLine(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己為 <code>string</code> 加上 <code>WriteLine()</code> Extension Method，這就就可以對 <code>string</code> 繼續 Pipeline 印出。</p>
<blockquote>
<p>C# 為了讓 <code>using</code> 用起來更 FP，我們必須自己實作 <code>Using()</code> 與 <code>WriteLine()</code>，但在 Functional First 的 F#，除了提供 Imperative 的 <code>use</code> 外，也提供了 Functional 的 <code>using()</code>，我們完全不用自己另外實作</p>
</blockquote>
<h2 id="F#_之_Use_Bind">F# 之 Use Bind</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFromFile (fileName: string) = </span><br><span class="line">    <span class="keyword">use</span> streamReader = <span class="keyword">new</span> StreamReader(fileName)</span><br><span class="line">    streamReader.ReadToEnd()</span><br><span class="line">    </span><br><span class="line">readFromFile <span class="string">"TestFile.txt"</span></span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br></pre></td></tr></table></figure>
<p>F# 之 <code>use</code> 類似於 <code>let</code>，差別是 <code>use</code> 在離開 function 就會呼叫 <code>Dispose()</code>，不需特別加上 <code>{}</code> 縮排一層。</p>
<p>由於 <code>readFromFile()</code> 回傳 <code>string</code>，可以直接 Pipeline 接內建的 <code>printf()</code>。</p>
<p>但 <code>use</code> 仍然是個 statement。</p>
<h2 id="F#_之_Using()_Function">F# 之 Using() Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile (streamReader: StreamReader) =</span><br><span class="line">    streamReader.ReadToEnd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFromFile (fileName: string) =</span><br><span class="line">    using(<span class="keyword">new</span> StreamReader(fileName)) readFile </span><br><span class="line">    </span><br><span class="line">readFromFile <span class="string">"TestFile.txt"</span></span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> readFromFile (fileName: string) =</span><br><span class="line">    using(<span class="keyword">new</span> StreamReader(fileName)) readFile</span><br></pre></td></tr></table></figure>
<p>改用 F# 內建的 <code>using()</code>，第一個參數傳入 <code>IDisposable</code> 物件，第二個參數傳入 body function，其實跟自己用 C# 實作的 <code>Using()</code> 是一樣的。</p>
<p>第 3 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> readFile (streamReader: StreamReader) =</span><br><span class="line">    streamReader.ReadToEnd()</span><br></pre></td></tr></table></figure>
<p>定義 body function。</p>
<blockquote>
<p>由於 <code>using()</code> 與 <code>printf()</code> 都是 F# 內建，因此我們就不必再自己實作了</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>將 C# 由 <code>using</code> statement 改成 <code>using()</code> function，乍看之下意義不大；但若去看 F# 同時提供 <code>use</code> statement 與 <code>using()</code> function 時，就可看出 F# 的用心良苦，同時支援了 Imperative 與 Functional 兩種 paradigm</li>
<li>由於 F# 每個 function 都是 composable，因此我們就不必再自已寫 <code>WriteLine()</code> 了，直接 <code>printf()</code> 就可以 pipeline 起來</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<ul>
<li>C# : 完整的範例可以在我的 <a href="https://github.com/oomusou/CSharpUsing" target="_blank" rel="external">GitHub</a> 上找到</li>
<li>F# : 完整的範例可以在我的 <a href="https://github.com/oomusou/FSharpUsing" target="_blank" rel="external">GitHub</a> 上找到</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使 using 更適合 FP 操作]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="F#" scheme="https://oomusou.io/tags/F/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FP 之 Higher Order Function]]></title>
    <link href="https://oomusou.io/fp/hof/"/>
    <id>https://oomusou.io/fp/hof/</id>
    <published>2018-08-19T12:23:43.000Z</published>
    <updated>2018-10-07T14:02:28.718Z</updated>
    <content type="html"><![CDATA[<p>Higher Order Function (HOF) 可以說是 FP 的精華，就算是目前主流 OOP，也大都接受了 HOF 概念，但實務上要活用 HOF 並不容易，需要時間與訓練，本文整理出實務上最常使用 HOF 的 4 種 Pattern，讓大家更容易運用在日常開發中。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>C# 7.2</p>
<blockquote>
<p>本文為 <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Funtional Programming in C#</a> 一書第一章的讀後心得</p>
</blockquote>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p><strong>Higher Order Function</strong> </p>
<ul>
<li>以 function 作為 function 的 input</li>
<li>以 function 作為 function 的 outpt</li>
<li>符合以上其中之一條件就算 Higer Order Function，簡稱 <strong>HOF</strong></li>
</ul>
</blockquote>
<p>在 C# 中，最典型的 HOF 就是 LINQ，如最常用的 <code>Select()</code>、<code>Where()</code> 就是 HOF。</p>
<blockquote>
<p>本文將以 HOF 稱呼 Higher Order Function</p>
</blockquote>
<h2 id="實務上的應用">實務上的應用</h2><hr>
<p>HOF 在實務上可歸納出以下 4 種 Pattern：</p>
<ul>
<li><p>Inversion of Control</p>
</li>
<li><p>Adapter Function</p>
</li>
<li><p>Function Factory</p>
</li>
<li><p>To Avoid Duplication</p>
</li>
</ul>
<h2 id="Inversion_of_Control">Inversion of Control</h2><hr>
<blockquote>
<p><strong>Inversion of Control</strong></p>
<p>原本由高階模組決定 <code>控制流程</code>，改成由 <code>低階模組</code> 決定 <code>控制流程</code>，高階模組只決定 <code>實作部分</code></p>
<p>可將 <code>控制流程</code> 寫成 Library 或 Framework，實現 Separation of Concerns (關注點分離)：低階模組關注於 <code>控制流程</code>，而高階模組專心於 <code>實作部分</code></p>
<p>HOF 目的在實現 Inversion of Control</p>
</blockquote>
<p>以 LINQ 的 <code>Where()</code> 為例 (相當於 FP 的 <code>Filter()</code>) </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Where&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(T iter <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>低階模組 LINQ 的 <code>Where</code> 決定了整個 <code>控制流程</code>，包含 <code>foreach</code> 與 <code>if</code>， 高階模組只決定 predicate 的 <code>實作部分</code>，這就是 Inversion of Control。</p>
<p><img src="/images/fp/hof/hof000.png" alt="hof000"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Cache&lt;T&gt; where T : class</span><br><span class="line">&#123;</span><br><span class="line">    public T Get(Guid id) =&gt; ...</span><br><span class="line">        </span><br><span class="line">    public T Get(Guid id, Func&lt;T&gt; onMiss) =&gt; Get(id) ?? onMiss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若可由 Guid 對 <code>Cache</code> 抓資料，若有資料則從 Cache 傳回，若沒資料則執行高階模組提供的 function。</p>
<p>我們可發現低階模組 <code>Cache</code> 決定 <code>控制流程</code>，高階模組則提供 <code>onMiss</code> function 的實作，可能是複雜的演算法計算，也可能是實際從資料庫抓資料。</p>
<p>HOF 最常使用的場景就是為了實現 Inversion of Control。</p>
<blockquote>
<p>IoC 與 DIP (Dependency Inversion Principle 依賴反轉原則) 並不一樣，IoC 強調的是 <code>控制流程</code> 的反轉，而 DIP 強調的是藉由 interface 達到 <code>依賴</code> 的反轉</p>
</blockquote>
<h2 id="Adapter_Function">Adapter Function</h2><hr>
<blockquote>
<p><strong>Adapter Function</strong></p>
<p>HOF 的目的在於改變 function 的 Signature</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span>=&gt; x / y;</span><br><span class="line"><span class="keyword">var</span> result = divide(<span class="number">10</span>, <span class="number">2</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>原本  <code>divide()</code> 的 <code>被除數</code> 是 <code>x</code>，<code>除數</code> 是 <code>y</code>。</p>
<p>因為需求改變，<code>被除數</code> 改成 <code>y</code>，而 <code>除數</code> 改成 <code>x</code>，也就是 Signature 會改變，argument 會對調。</p>
<p>當然可以直接修改 code，基於 <code>開放封閉原則</code>，且這也是常見的需求，決定將此功能 <code>一般化</code>，將寫一個 function 來處理。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Func&lt;T2, T1, R&gt; SwapArgs&lt;T1, T2, R&gt;(<span class="keyword">this</span> Func&lt;T1, T2, R&gt; f)</span><br><span class="line">    =&gt; (t2, t1) =&gt; f(t1, t2);</span><br></pre></td></tr></table></figure>
<p><code>SwapArgs()</code> 回傳一個新的 function，其 argument 由原本的 <code>(t1, t2)</code> 改成 <code>(t2, t1)</code>。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divideBy = divide.SwapArgs();</span><br><span class="line"><span class="keyword">var</span> result = divideBy(<span class="number">2</span>, <span class="number">10</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 OOP 中，若 Interface 不同，我們會使用 Adapter Pattern，將 interface 加以轉換</li>
<li>在 FP 中，Function Signature 就是 Interface，若 Signature 不同，我們可使用 HOF 加以轉換，也稱為 Adapter Function</li>
</ul>
<h2 id="Function_Factory">Function Factory</h2><hr>
<blockquote>
<p><strong>Function Factory</strong></p>
<p>HOF 的目的就是建立新的 function</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                     .Where(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"><span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>
<p>目前只能找出 <code>偶數</code>，也就是 <code>除以 2</code> 整除。</p>
<p>若我們想讓功能更 <code>一般化</code>，能找出 <code>除以 n</code> 整除的資料。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; isMod(<span class="keyword">int</span> n) =&gt; x =&gt; x % n == <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> data1 = Enumerable.Range(<span class="number">1</span>, <span class="number">10</span>).Where(isMod(<span class="number">2</span>)); <span class="comment">// 2, 4, 6, 8, 10</span></span><br><span class="line"><span class="keyword">var</span> data2 = Enumerable.Range(<span class="number">1</span>, <span class="number">10</span>).Where(isMod(<span class="number">3</span>)); <span class="comment">// 3, 6, 9</span></span><br></pre></td></tr></table></figure>
<p><code>isMod()</code> HOF 不只更 <code>一般化</code>，<code>可讀性</code> 也更高。</p>
<p><code>isMod()</code> HOF 目的並不是回傳 data，而是回傳 <code>Where()</code> 所需要的 function。</p>
<p><img src="/images/fp/hof/hof001.png" alt="hof001"></p>
<h2 id="To_Avoid_Duplication">To Avoid Duplication</h2><hr>
<blockquote>
<p><strong>To Avoid Duplication</strong></p>
<p>HOF 的目的在抽出程式碼共用部分</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Foo1</span>(<span class="params">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f1, ...</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> x = f1(...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Foo2</span>(<span class="params">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f2, ...</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> x = f2(...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實務上常會發現不同 function，前面 setup 部分都相同，最後 teardown 部分也相同，只有中間 body 部分不同，這種時機就很適合使用 HOF，將共用部分抽出來。</p>
<p><strong>將 Setup / Teardown 抽成共用</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbLogger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> connString;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateLog</span>(<span class="params">LogMessage logMessage</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            conn.Execute(<span class="string">"sp_create_log"</span>, logMessage, CommandType.StoredProcedure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;LogMessage&gt; <span class="title">GetLogs</span>(<span class="params">DateTime since</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            conn.Query&lt;LogMessage&gt;(<span class="string">@"SELECT * FROM [Logs] WHERE [Timestamp] &gt; @since"</span>, <span class="keyword">new</span> &#123;since = since&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們可以發現 <code>CreateLog()</code> 與 <code>GetLogs()</code> 在 <code>using</code> 部份有重複，因此可以建立 HOF 將共用部分抽出來。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConnectionHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R Connect&lt;R&gt;(<span class="keyword">string</span> connString, Func&lt;IDbConnection, R&gt; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">return</span> f(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>ConnectionHelper.Connect()</code> HOF，將 <code>CreateLog()</code> 與  <code>GetLogs()</code> 共用部分抽出來。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> ConnectionHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbLogger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> connString;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateLog</span>(<span class="params">LogMessage logMessage</span>)</span><br><span class="line">        </span>=&gt; Connect(connString, c =&gt; c.Execute(<span class="string">"sp_create_log"</span>, logMessage, CommandType.StoredProcedure));</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;LogMessage&gt; <span class="title">GetLogs</span>(<span class="params">DateTime since</span>)</span><br><span class="line">        </span>=&gt; Connect(connString, c =&gt; c.Query&lt;LogMessage&gt;(<span class="string">@"SELECT * FROM [Logs] WHERE [Timestamp] &gt; @since"</span>, <span class="keyword">new</span> &#123;since = since&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽出共用到 <code>ConnectionHelper</code> 之後，<code>DbLogger</code> 就不再有程式碼重複的部分。</p>
<blockquote>
<p>實務上常將程式碼中 setup 與 teardown 部分抽成 HOF 共用</p>
</blockquote>
<p><strong>將 using 重構成 HOF</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">static</span> <span class="title">class</span> <span class="title">ConnectionHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R Connect&lt;R&gt;(<span class="keyword">string</span> connString, Func&lt;IDbConnection, R&gt; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">return</span> f(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>using</code> 為 C# 內建的 statement，其實仔細一看，<code>using</code> 也是在做 setup 與 teardown 的事情：</p>
<ul>
<li><strong>Setup</strong> : 獲得 <code>IDisposable</code> resource</li>
<li><strong>Body</strong> : 執行 <code>{}</code> 內的程式碼</li>
<li><strong>Teardown</strong>：呼叫 <code>Dispose()</code> 釋放 resource</li>
</ul>
<p>我們可以也可以比照將 <code>foreach</code> statement 重構成 <code>ForEach()</code> function，將 <code>using</code> statement 重構成 <code>Using()</code> function。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LaYumba.Functional</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">F</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> R Using&lt;TDisp, R&gt;(TDisp disposable, Func&lt;TDisp, R&gt; f) <span class="keyword">where</span> TDisp : IDisposable</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span>(disposable) <span class="keyword">return</span> f(disposable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>Using()</code> 建立在自己的 Functional Library 內。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> LaYumba.Functional.F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConnectionHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R Connect&lt;R&gt;(<span class="keyword">string</span> connString, Func&lt;IDbConnection, R&gt; f)</span><br><span class="line">        =&gt; Using(<span class="keyword">new</span> SqlConnection(connStr), conn =&gt; &#123; conn.Open(); <span class="keyword">return</span> f(conn); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>using</code> 由 statement 重構成 <code>Using()</code> function 後，有幾個優點 :</p>
<ul>
<li><code>Connect()</code> 程式碼更加簡潔，可以使用 Expression Body</li>
<li><code>Using()</code> 是 function，不是 statement，因此能夠再與其他 function 作 compose</li>
</ul>
<h2 id="HOF_的優點與缺點">HOF 的優點與缺點</h2><hr>
<p><strong>優點</strong></p>
<ul>
<li><strong>Conciseness</strong> : 使用 function 後，能夠再與其他 function 作 compose，幾乎都是一行就能解決，這也是為什麼 C# 要全面提供 Expression Body</li>
<li><strong>Avoid Duplication</strong> : Setup 與 teardown 的邏輯不再重複</li>
<li><strong>Separation of Concerns</strong> : <code>ConnectionHelper</code> 關注 connection 管理；而 <code>DbLogger</code> 關注於 log 相關邏輯</li>
</ul>
<p><strong>缺點</strong><br><img src="/images/fp/hof/hof002.png" alt="hof002"></p>
<ul>
<li>HOF 會使得 call stack 增加，可能會對效能有所影響，不過這是 CPU 層級，差異只是在幾個 clock cycle，所以可以忽略不計</li>
<li>由於 call stack 的增加，debug 會比較複雜</li>
</ul>
<p>不過 HOF 所帶給我們的優點，仍然是一個值得投資 trade off。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>HOF 已經是算是目前所有程式語言都能接受的觀念，儘管是 OOP，也都能夠接受 HOF</li>
<li>過度使用 HOF 反而會使得 code 過度抽象化而難以理解，記得要以 <code>可讀性</code> 為前提，適當地使用 HOF</li>
<li>HOF 雖然可能造成 call stack 增加而難以 debug，但 HOF 所帶來的優點更多，仍然值得投資</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[歸納出 HOF 常用的 4 種 Pattern]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
</feed>
