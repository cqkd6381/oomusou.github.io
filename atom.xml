<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://oomusou.io/"/>
  <updated>2018-11-01T15:13:51.067Z</updated>
  <id>https://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ECMAScript 之建立 Object]]></title>
    <link href="https://oomusou.io/ecmascript/object-creation/"/>
    <id>https://oomusou.io/ecmascript/object-creation/</id>
    <published>2018-11-01T12:23:43.000Z</published>
    <updated>2018-11-01T15:13:51.067Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 也有 Object 概念，但其 Object 與傳統 OOP 的 Object 又不太一樣。傳統 OOP 的 Object 都必須由 class 而來，但 ECMAScript 的 Object 卻有多種建立方式。</p>
<a id="more"></a>
<h2 id="建立_Object">建立 Object</h2><hr>
<p>有別於傳統 OOP 一定要先建立 class，才能使用 <code>new</code> 建立 object，ECMAScript 提供了 6 種建立 object 方式：</p>
<ul>
<li>Object Literal</li>
<li>Empty Object</li>
<li>New Object</li>
<li>Constructor Function</li>
<li>Class</li>
<li>Object.create()</li>
</ul>
<h2 id="Object_Literal">Object Literal</h2><hr>
<p>不需要建立 class，可以直接以 declarative 方式建立 object。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">'Sam'</span>,</span><br><span class="line">  lastName: <span class="string">'Xiao'</span>,</span><br><span class="line">  fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p>以 key-value 方式直接在 <code>{}</code> 之間建立 object，其中 <code>fullName</code> 相當於傳統 OOP 的 method，但是將 function 指定給 <code>fullName</code> property。</p>
<p><img src="/images/ecmascript/object-creation/object000.png" alt="object000"></p>
<ol>
<li>直接將 function 指定給 property</li>
<li>因為 <code>person</code> 為 object，可如同 OOP 般使用 method 方式使用 <code>fullName()</code></li>
</ol>
<h2 id="Empty">Empty</h2><hr>
<p>ECMAScript 有一個傳統 OOP 沒有的特色，就是可以動態新增 property，既然如此，我們就可以一開始只宣告一個 <code>空物件</code>：<code>{}</code>，事後再動態新增 property 即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person.firstName = <span class="string">'Sam'</span>;</span><br><span class="line">person.lastName = <span class="string">'Xiao'</span>;</span><br><span class="line">person.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p>一開始只要指定 <code>{}</code> 即可，表示其為 <code>Object</code> type，事後再動態新增 property。</p>
<p><img src="/images/ecmascript/object-creation/object001.png" alt="object001"></p>
<ol>
<li>一開始只要宣告為 <code>{}</code> 即可，不需要另外建立 class，也不需要 <code>new</code>，事後再動態建立 property</li>
<li>因為 <code>person</code> 為 object，可如同 OOP 般使用 method 方式使用 <code>fullName()</code></li>
</ol>
<h2 id="New_Object">New Object</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstName = <span class="string">'Sam'</span>;</span><br><span class="line">person.lastName = <span class="string">'Xiao'</span>;</span><br><span class="line">person.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p>由於 Object 為 ECMAScript 內建型別之一，因此你也可以使用 <code>new Object()</code> 方式建立 object。</p>
<blockquote>
<p>不過實務上幾乎不會這樣寫，因為 <code>let person = {}</code> 寫法更精簡</p>
</blockquote>
<p><img src="/images/ecmascript/object-creation/object002.png" alt="object002"></p>
<ol>
<li>也可以使用 <code>new Object()</code> 建立 object，但 WebStorm 已經提出建議：<code>是否要重構成 object literal</code>，也就是使用 Empty Object 方式。</li>
</ol>
<h2 id="Constructor_Function">Constructor Function</h2><hr>
<p>以上 3 種方式適合需要以 declarative 方式建立 object 時使用，也就是 data 自己可以決定，但實務上 data 幾乎由 user 決定，也就是要以 parameter 傳入。</p>
<p>另外這 3 種方式，每次建立 object 時，都會重新建立 function，然後指定到 <code>fullName</code> property，事實上我們發現，每個 object 只有 data 會不一樣，但 function 都是一樣的，因此不斷地建立 <code>相同的 funtion</code> 很浪費的記憶體。</p>
<p>比較好的方式是 <code>function</code> 只建立一次，然後各 object 共用相同的 function。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p>由於 ECMAScript 本來就是以 function 為主的語言，因此使用 function 建立 object 也就不意外了。</p>
<p>其中 <code>this</code> 所建立的 property 都是 <code>public</code>。</p>
<p>為了避免 function 重複建立，在 <code>Person</code> constructor function 的 prototype 指定 <code>fullName</code> property 為 fuction，也就是儘管建立多個 object，但 <code>fullName</code> 都指向同一個 function，因此節省記憶體。</p>
<p>是否發現這種寫法，似乎就是傳統 OOP 的 Class + Constructor 合體呢 ?</p>
<p><img src="/images/ecmascript/object-creation/object003.png" alt="object003"></p>
<ol>
<li>將 data 由 Constructor Function 的 argument 傳入，只定義 property 部分</li>
<li>method 都定義在 Constructor Function 的 prototype</li>
<li>使用 <code>new</code>  建立 object</li>
</ol>
<h2 id="Class">Class</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  constructor(firstName, lastName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Sam'</span>, <span class="string">'Xiao'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p>ECMAScript 2015 新增了 <code>class</code> 與 <code>constructor</code>，讓我們可以類似傳統 OOP 使用 <code>class</code>，但其本質其實是 ES5 的 Constructor Function，是道地的 syntax sugar。</p>
<blockquote>
<p>與傳統 OOP 不同的是：ECMAScript 2015 的 class 並不用宣告 public property (也不能宣告 property，因為不合語法)，而是直接在 <code>constructor()</code> 內使用 <code>this</code> 定義 property，因為其本質仍是 ES5 的 Constructor Function。</p>
</blockquote>
<p><img src="/images/ecmascript/object-creation/object004.png" alt="object004"></p>
<ol>
<li>由 constructor function 改成 class</li>
<li>一樣使用 <code>this</code> 定義 property</li>
<li>一樣使用 <code>new</code> 建立 objec</li>
</ol>
<p>雖然 <code>fullName()</code> 看起來是寫在 <code>class</code> 內，但仍然是透過 prototype 建立，我們可以使用 TypeScript Playground 獲得證明：</p>
<p><img src="/images/ecmascript/object-creation/object008.png" alt="object008"></p>
<ol>
<li><code>fullName()</code> 寫在 class 內</li>
<li>但仍然是透過 prototype 建立</li>
</ol>
<h2 id="Object-create()">Object.create()</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prototype = &#123;</span><br><span class="line">  fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(prototype);</span><br><span class="line">person.firstName = <span class="string">'Sam'</span>;</span><br><span class="line">person.lastName = <span class="string">'Xiao'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p><code>Object.create()</code> 也可以建立 object，它提供了兩個參數。</p>
<ul>
<li>第一個參數：指定新 object 的 prototype object</li>
<li>第二個參數：指定新 object 的 property object，可省略</li>
</ul>
<p>由於 ECMAScript 可以動態新增 property，因此可以先不指定 property object，事後再動態新增 property。</p>
<p>但 method 部分會建立在 prototype，因此先將 <code>fullName()</code> 建立在 prototype object，再透過 <code>Object.create()</code> 建立，並將 prototype object 傳入。</p>
<p><img src="/images/ecmascript/object-creation/object005.png" alt="object005"></p>
<ol>
<li>建立 prototype object，並將 method 定義在 prototype 內</li>
<li>將 prototype object 傳進 <code>Object.create()</code>，表示 <code>person</code> 的 <code>fullName()</code> 來自於 prototype object</li>
<li>Property 動態建立即可</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prototype = &#123;</span><br><span class="line">  fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> property = &#123;</span><br><span class="line">  firstName: &#123;</span><br><span class="line">    value: <span class="string">'Sam'</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    value: <span class="string">'Xiao'</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(prototype, property);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName());</span><br></pre></td></tr></table></figure>
<p><code>Object.create()</code> 還有第二種用法，將 property 定義在第二個參數 property object，但 method 一樣定義在 prototype object。</p>
<p><img src="/images/ecmascript/object-creation/object006.png" alt="object006"></p>
<ol>
<li>Method 一樣定義在 prototype object</li>
<li>Property 改定義在 property object</li>
<li>使用 <code>Object.create()</code> 建立，同時傳入 prototype object 與 property object</li>
<li><code>{}</code> 是 Quokka 的 bug</li>
</ol>
<p><img src="/images/ecmascript/object-creation/object007.png" alt="object007"></p>
<ol>
<li>在 Firefox 中可看到 <code>person</code> 完整印出，這才是對的</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Object Literal、Empty Object 或 New Object 方式，雖然可以建立 method，但只能建立在 object 上，較浪費記憶體</li>
<li>Constructor Function、Class 或 Object.create()，則能夠將 method 建立在 object 的 prototype 上，較節省記憶體</li>
<li>Class 本質上仍然是 Constructor Function，可由 TypeScript 與 Babel 得證</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[6 種建立 Object 方式]]>
    
    </summary>
    
      <category term="Laravel" scheme="https://oomusou.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vue 之 Component]]></title>
    <link href="https://oomusou.io/vue/component/"/>
    <id>https://oomusou.io/vue/component/</id>
    <published>2018-10-25T12:23:43.000Z</published>
    <updated>2018-10-25T07:50:35.803Z</updated>
    <content type="html"><![CDATA[<p>Component 概念為 React 所發明，讓我們可以重複使用 HTML，Vue、Angular 也 <code>致敬</code> React，採用 component ，至此 3 大 Framework 都統一採用 Component-based 架構。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Vue 2.5.17</p>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/vue/component/basic000.svg" alt="intro000"></p>
<h2 id="Introduction">Introduction</h2><hr>
<p>Vue Instance 有自己的 <code>data</code>、<code>methods</code>、<code>computed</code> 、<code>watch</code>，但 Vue Instance 只是 HTML 的代言人，讓我們在 JavaScript 控制 HTML，但若要 <code>重複使用</code>，就不是那麼方便，這時我們需要的是 Vue Component。</p>
<p>除此之外，Vue Component 也讓我們在開發時實踐 <code>Divide and Conquer</code> 哲學，先將需求切成小小 component，然後一一擊破，最後再將 component 組合起來，如此 component 也更加 <code>單一職責</code>，更 <code>容易維護</code> 與 <code>重複使用</code>。</p>
<h2 id="Global_Component">Global Component</h2><hr>
<p>之前我們只會 MVVM 的 Hello World，若改用 Component-based 的寫法呢 ?</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Global Component<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="title">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"HelloWorld.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="title">hello-world</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由原本的 <code>&lt;span&gt;Hello World&lt;/span&gt;</code>，變成自訂的 <code>hello-world</code> tag。</p>
<blockquote>
<p>我們會為自己的的 Vue Component 定義自己的 HTML tag</p>
</blockquote>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>建立 Vue Instance。</p>
<p><strong>HelloWorld.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'HelloWorld'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;span&gt;Hello World&lt;/span&gt;'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>定義 <code>HelloWorld</code> component。</p>
<p>使用 Vue <code>Vue.component()</code> 定義 Vue Component。</p>
<ul>
<li>第  1 個參數：string，傳入自訂的 HTML tag 名稱</li>
<li>第 2 個參數：object，類似傳入 Vue Instance 的 constructor 參數</li>
</ul>
<p>Vue Component 的使用，有幾點要注意：</p>
<ul>
<li>Vue 規定 Vue Component 一定要定義在 Vue Instance <code>之前</code>，否則 Life Cycle 在 <code>compile HTML</code> 階段，會不知道 Vue Component 所自訂的 HTML tag</li>
<li>自訂的 HTML tag 名稱，無論使用 camelCase，CamelCase，最後 Vue 都會改用 Kebab-case (全小寫，單字間以 <code>-</code> 隔開)，這是 W3C 所建議，且必須是 2 個單字，避免用一個單字與 HTML 預設 tag 重複</li>
<li>關於 Component (HTML tag) 與 JavaScript 檔案命名方式，Vue 官方的 <a href="https://vuejs.org/v2/style-guide/#Single-file-component-filename-casing-strongly-recommended" target="_blank" rel="external">Style Guide</a> :<ul>
<li><strong>CamelCase</strong>：<code>HelloWorld</code>、<code>HelloWorld.js</code>、<code>HelloWorld.vue</code></li>
<li><strong>kebab-case</strong>：<code>hello-world</code>、<code>hello-world.js</code>、<code>hello-world.vue</code></li>
<li>Vue CLI 使用 <strong>CamelCase</strong></li>
</ul>
</li>
</ul>
<h2 id="Local_Component">Local Component</h2><hr>
<p>使用 <code>Vue.component()</code> 所宣告的是 Global Component，也就是每個 Vue Instance 都可使用，若你想定義只有某個 Vue Instance 能使用的 component，則要使用 Local Component。</p>
<p><strong>inex.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Local Component<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="title">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"local_component.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>HTML 部分一樣不變使用 <code>&lt;hello-world&gt;&lt;/hello-world&gt;</code>。</p>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'HelloWorld'</span>: &#123;</span><br><span class="line">      template: <span class="string">'&lt;span&gt;Hello World&lt;/span&gt;'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在傳入 Vue Instance 的 constructor 參數內，加上 <code>components</code> Property，為 object。</p>
<p>以自訂的 HTML tag <code>hello-world</code> 為 key，將 <code>Vue.component()</code> 第二個參數的 object 為 value。</p>
<h2 id="MVVM_vs-_Component">MVVM vs. Component</h2><hr>
<p>目前 Vue Component 的 data 顯示都是寫死的，我們知道 MVVM 的精髓就是 Data Binding，要如何將 MVVM 與 Component-based 兩種架構合而為一呢 ?</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Counter Component<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="title">my-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="title">my-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MyCounter.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="title">my-counter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用自訂的 <code>&lt;my-counter&gt;&lt;/my-counter&gt;</code>。</p>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>建立 Vue Instance。</p>
<p><strong>MyComponent.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyCounter'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; counter &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;p&gt;&lt;/p&gt;</span><br><span class="line">      &lt;button @click="add"&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      <span class="keyword">this</span>.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template: <span class="string">`</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; counter &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;button @click="add"&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">`</span>,</span><br></pre></td></tr></table></figure>
<p>將 HTML Template 宣告在 <code>template</code> property 下。</p>
<blockquote>
<p>由於 HTML Template 在實務上會很多行，用普通字串不方便，建議改用 ECMAScript 2015 的 string template，就不必再 <code>字串相加</code> 了</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>data</code> 部分，由原本 Vue Instance 的 <code>data</code> property 改成 <code>data()</code> function。</p>
<p>改回傳 <code>data</code> object。</p>
<p>14 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>對 <code>data</code> 內的 <code>counter</code> 累加。</p>
<blockquote>
<p>Q : 為什麼寫成 Vue Component 後，要從 <code>data</code> property 改成 <code>data()</code> function ?</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  counter: <span class="number">0</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>若改成 <code>data</code> property 寫法，Vue 會無法執行，且出現 warning。</p>
<p><img src="/images/vue/component/basic001.png" alt="basic001"></p>
<p><img src="/images/vue/component/basic002.svg" alt="basic002"></p>
<p>在正統 OOP，兩個 component 應該是兩個 instance，而 <code>data</code> 包在 instance 內，因此 Component 間的 <code>data</code> 不會互相影響，也就是 OOP 的 <code>封裝</code>。</p>
<p><img src="/images/vue/component/basic003.svg" alt="basic003"></p>
<p>但 Vue 底層並不是採用 OOP 方式，而是共用同一份 component instance，只有 <code>data</code> 是不同份。</p>
<p>這也是為什麼為什麼 Vue 要你改用 <code>data()</code> function，而且是回傳全新對 <code>data</code> object。</p>
<blockquote>
<p>只要寫 Vue Component，就一定要改用 <code>data()</code> function，不能使用 <code>data</code> property</p>
</blockquote>
<p>使用 Vue Component 時，還有一點值得注意：</p>
<ul>
<li>不可使用 HTML self closing 語法</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-counter</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-counter</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這種寫法，Vue 不會出錯，但只有一個 component 能動。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="title">my-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-counter</span>&gt;</span><span class="tag">&lt;/<span class="title">my-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要這樣寫，Vue 才能正常執行。</p>
<h2 id="Component_vs-_DOM_Parser">Component vs. DOM Parser</h2><hr>
<p>有時候在使用 Vue Component 時，會發現無法如預期顯示在 Browser 裏。</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>DOM Parse Error<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">my-option</span>&gt;</span><span class="tag">&lt;/<span class="title">my-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MyOption.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-option</span>&gt;</span><span class="tag">&lt;/<span class="title">my-option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>&lt;select&gt;&lt;/select&gt;</code> 內使用自訂的 <code>&lt;my-option&gt;&lt;/my-option&gt;</code> Vue Component。</p>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>建立 Vue Instance。</p>
<p><strong>MyOption.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyOption'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;option&gt;Vue&lt;/option&gt;'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>自訂的 <code>MyOption</code> 只包含 <code>&lt;option&gt;Vue&lt;/option&gt;</code> 部分。</p>
<p><img src="/images/vue/component/basic004.png" alt="basic004"></p>
<ol>
<li>Chrome 無法正常顯示</li>
<li><code>&lt;select&gt;&lt;/select&gt;</code> 以下沒有任何 <code>&lt;option&gt;&lt;/option&gt;</code></li>
</ol>
<p>這牽涉到各 Browser 的 DOM Parser 如何解析 HTML。</p>
<p>以 Chrome 而言，它認為 <code>&lt;select&gt;&lt;/select&gt;</code> 下 <code>只應該</code> 是 <code>&lt;option&gt;&lt;/option&gt;</code>，其他的 HTML tag 都為非法，因此忽略不使用。</p>
<blockquote>
<p>DOM Parser 會因 Browser 而異</p>
</blockquote>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>DOM Parse OK<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">my-select</span>&gt;</span><span class="tag">&lt;/<span class="title">my-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MySelect.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由本來的 <code>&lt;my-option&gt;&lt;/my-option&gt;</code> 改成 <code>&lt;my-select&gt;&lt;/my-select&gt;</code>。</p>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>建立 Vue Instance。</p>
<p><strong>MySelect.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MySelect'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;select&gt;</span><br><span class="line">      &lt;option&gt;Vue&lt;/option&gt;    </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>連 <code>&lt;select&gt;</code> 一起包進 Vue Component，如此 Chrome 就無法干涉 <code>&lt;option&gt;</code>。</p>
<h2 id="Dynamic_Component">Dynamic Component</h2><hr>
<p>先定義好 Vue Component，然後動態切換 component。</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Dynamic Component<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> @<span class="attribute">click</span>=<span class="value">"selectLesson"</span>&gt;</span>Lessons<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span> @<span class="attribute">click</span>=<span class="value">"selectApply"</span>&gt;</span>Apply<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">component</span> <span class="attribute">:is</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MyLessons.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MyApply.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">component</span> <span class="attribute">:is</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 Vue 擴充的 <code>&lt;component&gt;&lt;/component&gt;</code>，綁定其 <code>is</code>，當 <code>content</code> 指定什麼 Vue Component 時，<code>&lt;component&gt;&lt;/component&gt;</code> 就會動態切換該 Vue Component。</p>
<blockquote>
<p>並沒有在 HTML 內事先使用特定 Component tag，只使用 <code>&lt;component&gt;&lt;/component&gt;</code> 保留其動態彈性</p>
</blockquote>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    content: <span class="string">'my-lessons'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    selectLesson() &#123;</span><br><span class="line">      <span class="keyword">this</span>.content = <span class="string">'my-lessons'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    selectApply() &#123;</span><br><span class="line">      <span class="keyword">this</span>.content = <span class="string">'my-apply'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  content: <span class="string">'my-lessons'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>在 <code>data</code> 內定義 <code>content</code> model，其中預設值 <code>my-lessons</code> 為 component 名稱。</p>
<p>第 6 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  selectLesson() &#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">'my-lessons'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  selectApply() &#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">'my-apply'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 method 動態改變 <code>content</code>，MVVM 會再動態改變 <code>&lt;component&gt;&lt;/component&gt;</code> 的 <code>:is</code>，達到動態組件的需求。</p>
<p><strong>MyLessions.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyLessons'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;React&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Angular&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Vue&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>定義了 <code>MyLessions</code> component。</p>
<p><strong>MyApply.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyApply'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">      &lt;p&gt;&lt;/p&gt;</span><br><span class="line">      &lt;button&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>定義了 <code>MyApply</code> component。</p>
<blockquote>
<p>但這兩個 Vue Component 都沒在 HTML 內被使用，將由 JavaScript 動態指定</p>
</blockquote>
<h2 id="Keep-Alive">Keep-Alive</h2><hr>
<p>由於 <code>&lt;component&gt;&lt;/component&gt;</code> 類似 <code>v-if</code>，其 Dynamic Component 是藉由 <code>刪除 DOM element，並建立新的 DOM element</code> 的方式，所以原本的 user 輸入的資料，也會一併被刪除。</p>
<p>若要保留原本 user 輸入的資料，就必須搭配 <code>&lt;keep-alive&gt;&lt;keep-alive&gt;</code>。</p>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Keep Alive<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> @<span class="attribute">click</span>=<span class="value">"selectLesson"</span>&gt;</span>Lessons<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> @<span class="attribute">click</span>=<span class="value">"selectApply"</span>&gt;</span>Apply<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">component</span> <span class="attribute">:is</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MyLessons.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"MyApply.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">component</span> <span class="attribute">:is</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>&lt;component&gt;&lt;/component&gt;</code> 外部加上 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>，則 Dynamic Component 內的資料將獲得保留。</p>
<p>JavaScript 的寫法不用改變。</p>
<blockquote>
<p>Vue 底層會將 user 的輸入保留，然後切換 component 時，除了建立新的 component 外，還會將 user 原本所輸入的資料也 <code>重新</code> 填回新建立的 component，讓動態切換 component 更方便</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Vue 提供了 Vue Component，讓我們將 HTML 會重複的部分可以使用 component 包起來，方便閱讀，也更方便維護</li>
<li>MVVM 可以 Component-based 完美結合，但 <code>data</code> property 必須改用 <code>data</code> function</li>
<li>Component 有時候會違背 Browser 的 DOM Parser，此時必須改變寫法繞過 Browser</li>
<li>Dynamic Component 讓我們可以根據商業邏輯自行切換 component</li>
<li>透過神奇的 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>，user 原本的輸入將保留在 component 內</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/vue-component" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://vuejs.org/" target="_blank" rel="external">Vue</a>, <a href="https://vuejs.org/v2/guide/components.html" target="_blank" rel="external">Component Basics</a><br><a href="https://vuejs.org/" target="_blank" rel="external">Vue</a>, <a href="https://vuejs.org/v2/style-guide/#Base-component-names-strongly-recommended" target="_blank" rel="external">Style Guide</a></p>
]]></content>
    <summary type="html">
    <![CDATA[談談 Vue 最基礎的 Component]]>
    
    </summary>
    
      <category term="Vue" scheme="https://oomusou.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何複製 WebStorm 專案 ?]]></title>
    <link href="https://oomusou.io/webstorm/clone-project/"/>
    <id>https://oomusou.io/webstorm/clone-project/</id>
    <published>2018-10-23T15:23:43.000Z</published>
    <updated>2018-10-23T14:21:12.770Z</updated>
    <content type="html"><![CDATA[<p>有時想以一 Project 為基底，將該專案複製後再重新命名，這樣雖然可行，但在 WebStorm 的 Project Explorer 總算顯示原本 Project 名稱，非常礙眼。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS Mojave 10.14<br>WebStorm 2018.2.5</p>
<h2 id="Symptons">Symptons</h2><hr>
<p><img src="/images/webstorm/clone-project/name000.png" alt="name000"></p>
<ol>
<li>雖然已經將目錄名稱改成 <code>vue-todo</code>，但右側仍然顯示原本的目錄的 <code>vue-todo-lis-api</code>，非常礙眼</li>
</ol>
<h2 id="Recipes">Recipes</h2><hr>
<p><img src="/images/webstorm/clone-project/name001.png" alt="name001"></p>
<ol>
<li>在專案目錄下的 <code>.idea</code> 目錄下，這是個隱藏目錄</li>
<li>找到原本專案名稱的 <code>.iml</code> 檔案</li>
</ol>
<p><img src="/images/webstorm/clone-project/name002.png" alt="name002"></p>
<ol>
<li>一樣在 <code>.idea</code> 目錄下</li>
<li>將 <code>.iml</code> 檔名改成新的目錄名稱</li>
</ol>
<p><img src="/images/webstorm/clone-project/name003.png" alt="name003"></p>
<ol>
<li>選擇 <code>.idea</code> 目錄下的 <code>modules.xml</code></li>
<li>以 Sublime Text 開啟</li>
</ol>
<p><img src="/images/webstorm/clone-project/name004.png" alt="name004"></p>
<ul>
<li>將兩個 <code>.iml</code> 改成新的檔案名稱</li>
</ul>
<p><img src="/images/webstorm/clone-project/name005.png" alt="name005"></p>
<ol>
<li>重新用 WebStorm 開啟專案，一切就正常了</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>這並不是正規做法，算是 hack WebStorm 了，不過實務上卻非常好用</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接 Hack .idea 目錄]]>
    
    </summary>
    
      <category term="WebStorm" scheme="https://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 WebStorm 開發 Vue ?]]></title>
    <link href="https://oomusou.io/webstorm/vue/"/>
    <id>https://oomusou.io/webstorm/vue/</id>
    <published>2018-10-23T14:23:43.000Z</published>
    <updated>2018-10-23T13:58:21.590Z</updated>
    <content type="html"><![CDATA[<p>WebStorm 已經提供 Vue 的 plugin，支援 Vue 完整，唯一只有 <code>.vue</code> 格式縮排部分，Webstorm 與 Vue 的看法迥異，在 Reformat  Code 之後，縮排會完全跑掉，需要特別設定。</p>
<p>在 Unit Test 與 Jest 部分，WebStorm 支援還不夠，但目前仍然可以做一些設定。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Node.js 8.11.3<br>Yarn 1.9.4<br>Vue 2.5.17<br>WebStorm 2018.2.4</p>
<h2 id="Vue_File">Vue File</h2><hr>
<p><img src="/images/webstorm/vue/vue000.png" alt="vue000"></p>
<p>由 Vue CLI 所建立的 <code>App.vue</code>，我們發現 Vue 的縮排有幾個特點 :</p>
<ol>
<li>無論是 HTML、JavaScript 或 CSS，其縮排都使用 2 個 space</li>
<li><code>&lt;script/&gt;</code> 與 <code>&lt;style/&gt;</code> 的第一層不再縮排</li>
</ol>
<p><img src="/images/webstorm/vue/vue001.png" alt="vue001"></p>
<p>經過 WebStorm 的 Reformat Code，縮排就跑掉了。</p>
<h2 id="Tabs_and_Indents">Tabs and Indents</h2><hr>
<p><strong>CSS</strong></p>
<p><img src="/images/webstorm/vue/vue002.png" alt="vue002"></p>
<ol>
<li><strong><em>Preferences -&gt; Editor -&gt; Code -&gt; CSS -&gt; Tabs and Indents</em></strong></li>
<li>Tab size、Indent 與 Continuation indent 全改成 <code>2</code></li>
</ol>
<p><strong>HTML</strong></p>
<p><img src="/images/webstorm/vue/vue003.png" alt="vue003"></p>
<ol>
<li><strong><em>Preferences -&gt; Editor -&gt; Code -&gt; HTML -&gt; Tabs and Indents</em></strong></li>
<li>Tab size、Indent 與 Continuation indent 全改成 <code>2</code></li>
</ol>
<p><strong>JavaScript</strong></p>
<p><img src="/images/webstorm/vue/vue004.png" alt="vue004"></p>
<ol>
<li><strong><em>Preferences -&gt; Editor -&gt; Code -&gt; JavaScript -&gt; Tabs and Indents</em></strong></li>
<li>Tab size、Indent 與 Continuation indent 全改成 <code>2</code></li>
</ol>
<h2 id="Space">Space</h2><hr>
<p><img src="/images/webstorm/vue/vue011.png" alt="vue011"></p>
<ol>
<li><strong><em>Preferences -&gt; Editor -&gt; Code Style -&gt; JavaScript -&gt; Spaces</em></strong></li>
<li>將 <code>ES6 import/export braces</code> 打勾</li>
</ol>
<p><img src="/images/webstorm/vue/vue012.png" alt="vue012"></p>
<ol>
<li><strong><em>Preferences -&gt; Editor -&gt; Code Style -&gt; JavaScript -&gt; Spaces</em></strong></li>
<li><code>In function expression</code> 不要打勾</li>
</ol>
<h2 id="Template_與_Script_不縮排">Template 與 Script 不縮排</h2><hr>
<p><img src="/images/webstorm/vue/vue005.png" alt="vue005"></p>
<ol>
<li><strong><em>Preferences -&gt; Editor -&gt; Code -&gt; HTML -&gt; Other</em></strong></li>
<li>修改 <code>Do not indent children of:</code> </li>
</ol>
<p><img src="/images/webstorm/vue/vue006.png" alt="vue006"></p>
<ol>
<li>新增 <code>script</code> 與 <code>style</code></li>
</ol>
<blockquote>
<p>也就是 <code>&lt;script/&gt;</code> 與 <code>&lt;style/&gt;</code> 的第一層不縮排，符合 Vue 的習慣</p>
</blockquote>
<h2 id="CDN">CDN</h2><hr>
<p>若是搭配 MVC 採用 CDN 方式時，則要另外設定。</p>
<p><img src="/images/webstorm/vue/vue007.png" alt="vue007"></p>
<ol>
<li>WebStorm 提出警告不認識 <code>Vue</code></li>
</ol>
<p><img src="/images/webstorm/vue/vue008.png" alt="vue008"></p>
<ol>
<li>選擇 CDN</li>
<li>按 <code>Download library</code></li>
</ol>
<p><img src="/images/webstorm/vue/vue009.png" alt="vue009"></p>
<ol>
<li><code>Vue</code> 的警告就消除了</li>
</ol>
<p><img src="/images/webstorm/vue/vue010.png" alt="vue010"></p>
<ol>
<li>在 <strong><em>Preferences -&gt; Language &amp; Frameworks -&gt; JavaScript -&gt; Libraries</em></strong> 下</li>
<li>多了 <code>vue</code>，這就是剛剛 WebStorm 幫我們下載的</li>
</ol>
<h2 id="Unit_Test">Unit Test</h2><hr>
<p><img src="/images/webstorm/vue/vue013.png" alt="vue013"></p>
<p>打開 Vue CLI 預設 Unit Test： <code>example.spec.js</code>，會發現幾個問題：</p>
<ul>
<li>WebStorm 對於 babel-resolver 的 <code>@</code> 尚未支援</li>
<li>WebStorm 也看不懂 Jest 的 <code>describe()</code>、<code>it()</code> 、<code>expect()</code> 與 <code>toMatch()</code>，因此也沒有 Intellisense 支援</li>
</ul>
<p><strong>Babel-resolver</strong></p>
<p><strong>import-resolver.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">'@/*'</span>: <span class="string">'src/*'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/vue/vue014.png" alt="vue014"></p>
<ol>
<li>在 project 根目錄新增 <code>import-resolver.js</code>，將以上內容貼上，告訴 WebStorm <code>@</code> 相當於 <code>src</code> 目錄</li>
</ol>
<p><img src="/images/webstorm/vue/vue015.png" alt="vue015"></p>
<ol>
<li>WebStorm 會自動吃到 project 根目錄的 <code>import-resolver.js</code>，因此能找到 <code>HelloWorld.vue</code></li>
</ol>
<p><strong>TypeScript Jest Definition</strong></p>
<p><img src="/images/webstorm/vue/vue016.png" alt="vue016"></p>
<ol>
<li><strong><em>Preferences -&gt; Language &amp; Frameworks -&gt; JavaScript -&gt; Libraries</em></strong></li>
<li>按 <code>Download</code> 下載 Jest TypeScript 定義檔</li>
</ol>
<p><img src="/images/webstorm/vue/vue017.png" alt="vue017"></p>
<ol>
<li>選擇 <code>Jest</code></li>
<li>按 <code>Download and Install</code></li>
</ol>
<p><img src="/images/webstorm/vue/vue018.png" alt="vue018"></p>
<ol>
<li>下載後出現 <code>@types/jest</code></li>
</ol>
<p><img src="/images/webstorm/vue/vue019.png" alt="vue019"></p>
<ul>
<li><code>describe()</code>、<code>it()</code>、<code>expect()</code> 與 <code>toMatch()</code> 都已經被 WebStorm 識別，也支援 IntelliSense</li>
</ul>
<p><strong>Add Jest Package</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="built_in">add</span> <span class="comment">--dev jest</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/vue/vue020.png" alt="vue020"></p>
<ol>
<li>將 Jest 加入  development dependency</li>
</ol>
<p><img src="/images/webstorm/vue/vue021.png" alt="vue021"></p>
<ol>
<li>WebStorm 會認出 <code>spec.js</code> 格式為 Jest 的 testing code，可在 editor 內執行 Unit Test</li>
</ol>
<blockquote>
<p>雖然已經出現 Icon，但目前還是無法在 WebStorm 內直接執行 Jest，還有些設定要克服</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>此設定在 JetBrains 其他工具也適用</li>
<li>WebStorm 目前支援 Vue 良好，除了少部分要調整外，就可完美在 WebStorm 開發 Vue，不用再安裝任何 package</li>
<li>WebStorm 對於 Vue 的 Unit Test 與 Jest 支援還不夠，目前執行 Unit Test 比較適合使用 Vue CLI</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://qiita.com/IsaoTakahashi" target="_blank" rel="external">@IsaoTakahashi</a>, <a href="https://qiita.com/IsaoTakahashi/items/20c82de0ddd2b71f4f75" target="_blank" rel="external">WebStormでVue.jsの快適な開発環境をつくる</a></p>
]]></content>
    <summary type="html">
    <![CDATA[WebStorm 也能開發 Vue]]>
    
    </summary>
    
      <category term="Vue" scheme="https://oomusou.io/tags/Vue/"/>
    
      <category term="WebStorm" scheme="https://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將非同步資料傳入 Prop ?]]></title>
    <link href="https://oomusou.io/vue/async-prop/"/>
    <id>https://oomusou.io/vue/async-prop/</id>
    <published>2018-10-23T13:23:43.000Z</published>
    <updated>2018-10-23T13:34:02.017Z</updated>
    <content type="html"><![CDATA[<p>假如資料是從 <code>App.vue</code> 透過 API 抓取資料，然後透過 Prop 傳進 Component，最後再讀取 Prop 寫入 Component 的 Data，這看似平常的過程，若是同步資料則完全不是問題，但因為資料是從 API  來，為非同步 Promise，寫法則沒有想像中單純。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><p>Vue 2.5.17<br>Vue CLI 3.0.5</p>
<h2 id="錯誤寫法">錯誤寫法</h2><hr>
<p><strong>App.vue</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;template&#62;&#10;  &#60;div id=&#34;app&#34;&#62;&#10;    &#60;todo-list :source=&#34;todos&#34;&#62;&#10;    &#60;/todo-list&#62;&#10;  &#60;/div&#62;&#10;&#60;/template&#62;&#10;&#10;&#60;script&#62;&#10;import TodoList from &#39;./components/todo-list.vue&#39;;&#10;import &#123; fetchTodos &#125; from &#39;./api/todos.api&#39;;&#10;&#10;const mounted = function() &#123;&#10;  const response = res =&#62;&#10;    this.todos = res.data.slice(0, 5);&#10;&#10;  fetchTodos()&#10;    .then(response);&#10;&#125;;&#10;&#10;const components = &#123;&#10;  TodoList,&#10;&#125;;&#10;&#10;const data = function() &#123;&#10;  return &#123;&#10;    todos: [],&#10;  &#125;;&#10;&#125;;&#10;&#10;export default &#123;&#10;  name: &#39;app&#39;,&#10;  components,&#10;  data,&#10;  mounted,&#10;&#125;;&#10;&#60;/script&#62;&#10;&#10;&#60;style&#62;&#10;&#60;/style&#62;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mounted = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = res =&gt;</span><br><span class="line">    <span class="keyword">this</span>.todos = res.data.slice(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  fetchTodos()</span><br><span class="line">    .then(response);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>mounted</code> hook 透過 API 抓取資料。</p>
<p>第 3 行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">todo-list</span> <span class="attribute">:source</span>=<span class="value">"todos"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 <code>todos</code> 傳進 <code>todo-list</code> 的 <code>source</code> prop。</p>
<p><strong>todo-list.vue</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;template&#62;&#10;  &#60;div id=&#34;todo-list&#34;&#62;&#10;    &#60;input type=&#34;text&#34; v-model=&#34;input&#34;&#62;&#10;    &#60;button @click=&#34;addItem&#34;&#62;Add&#60;/button&#62;&#10;    &#60;ul&#62;&#10;      &#60;li v-for=&#34;(todo, index) in todos&#34; @click=&#34;finishItem(index)&#34; :key=&#34;index&#34;&#62;&#10;          &#123;&#123; todo.title &#125;&#125;, &#123;&#123; todo.completed &#125;&#125;&#10;      &#60;/li&#62;&#10;    &#60;/ul&#62;&#10;  &#60;/div&#62;&#10;&#60;/template&#62;&#10;&#10;&#60;script&#62;&#10;const finishItem = function(index) &#123;&#10;  this.todos[index].completed = !this.todos[index].completed;&#10;&#125;;&#10;&#10;const addItem = function() &#123;&#10;  const elem = &#123;&#10;    title: this.input,&#10;    completed: false,&#10;  &#125;;&#10;  this.todos = [...this.todos, elem];&#10;&#125;;&#10;&#10;const props = [&#10;  &#39;source&#39;,&#10;];&#10;&#10;const data = function() &#123;&#10;  return &#123;&#10;    input: &#39;&#39;,&#10;    todos: this.source,&#10;  &#125;;&#10;&#125;;&#10;&#10;const methods = &#123;&#10;  finishItem,&#10;  addItem,&#10;&#125;;&#10;&#10;export default &#123;&#10;  name: &#39;todo-list&#39;,&#10;  props,&#10;  data,&#10;  methods,&#10;&#125;;&#10;&#60;/script&#62;&#10;&#10;&#60;style scoped&#62;&#10;&#10;&#60;/style&#62;</span><br></pre></td></tr></table></figure>
<p>30 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    input: <span class="string">''</span>,</span><br><span class="line">    todos: <span class="keyword">this</span>.source,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>data()</code> 將 <code>source</code> prop 指定給 <code>todos</code>。</p>
<blockquote>
<p>這種寫法在若 prop 資料為同步，則為標準寫法；但若是非同步資料，則 <code>todos</code> 永遠為 <code>[]</code>。</p>
</blockquote>
<p>因為 Promise 為非同步，會在同步執行完後才執行，也就是 <code>todo-list</code> component 的 <code>data()</code> 會先執行，最後才執行 Promise，因此 <code>todos</code> 永遠為 <code>[]</code>。</p>
<h2 id="正確寫法">正確寫法</h2><hr>
<p><strong>todo-list.vue</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;template&#62;&#10;  &#60;div id=&#34;todo-list&#34;&#62;&#10;    &#60;input type=&#34;text&#34; v-model=&#34;input&#34;&#62;&#10;    &#60;button @click=&#34;addItem&#34;&#62;Add&#60;/button&#62;&#10;    &#60;ul&#62;&#10;      &#60;li v-for=&#34;(todo, index) in todos&#34; @click=&#34;finishItem(index)&#34; :key=&#34;index&#34;&#62;&#10;          &#123;&#123; todo.title &#125;&#125;, &#123;&#123; todo.completed &#125;&#125;&#10;      &#60;/li&#62;&#10;    &#60;/ul&#62;&#10;  &#60;/div&#62;&#10;&#60;/template&#62;&#10;&#10;&#60;script&#62;&#10;const finishItem = function(index) &#123;&#10;  this.todos[index].completed = !this.todos[index].completed;&#10;&#125;;&#10;&#10;const addItem = function() &#123;&#10;  const elem = &#123;&#10;    title: this.input,&#10;    completed: false,&#10;  &#125;;&#10;  this.todos = [...this.todos, elem];&#10;&#125;;&#10;&#10;const source = function(value) &#123;&#10;  this.todos = value;&#10;&#125;;&#10;&#10;const props = [&#10;  &#39;source&#39;,&#10;];&#10;&#10;const data = function() &#123;&#10;  return &#123;&#10;    input: &#39;&#39;,&#10;    todos: this.source,&#10;  &#125;;&#10;&#125;;&#10;&#10;const watch = &#123;&#10;  source,&#10;&#125;;&#10;&#10;const methods = &#123;&#10;  finishItem,&#10;  addItem,&#10;&#125;;&#10;&#10;export default &#123;&#10;  name: &#39;todo-list&#39;,&#10;  props,&#10;  data,&#10;  watch,&#10;  methods,&#10;&#125;;&#10;&#60;/script&#62;&#10;&#10;&#60;style scoped&#62;&#10;&#10;&#60;/style&#62;</span><br></pre></td></tr></table></figure>
<p>41 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watch = &#123;</span><br><span class="line">  source,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由於 Promise 會最後執行，因此必須對 <code>source</code> prop 開 watch。</p>
<p>26 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 Promise 最後執行改變 <code>source</code> prop 時，會執行 watch 的 <code>source()</code>，再由此 function 去改變 <code>todos</code> data。</p>
<p>如此 component 就能收到 prop 傳進來的非同步資料了。</p>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/vue-async-prop" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>寫 ECMAScript 只要碰到非同步 Promise，就要考慮到其是最後執行，因此不能使用同步的方式思考</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Promise + Prop 後寫法稍有不同]]>
    
    </summary>
    
      <category term="Vue" scheme="https://oomusou.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vue Component 之 Slot]]></title>
    <link href="https://oomusou.io/vue/slot/"/>
    <id>https://oomusou.io/vue/slot/</id>
    <published>2018-10-23T12:23:43.000Z</published>
    <updated>2018-10-23T09:35:08.764Z</updated>
    <content type="html"><![CDATA[<p>關於顯示於 Component 的 data，除了使用 prop 傳遞外，也可使用 slot 傳遞。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Vue 2.5.17<br>Vue CLI 3.0.3</p>
<h2 id="Slot_Content">Slot Content</h2><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">navigation-link</span> <span class="attribute">url</span>=<span class="value">"/profile"</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="title">navigation-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 在自己寫了 component 間夾了 data。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">v-bind:href</span>=<span class="value">"url"</span><span class="value">class="nav-link"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">slot</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 component 的 HTML template 中使用 <code>&lt;slot&gt;&lt;/slot&gt;</code>，則 component 間夾的 data 將取代 <code>&lt;slot&gt;&lt;/slot&gt;</code>。</p>
<blockquote>
<p>若 HTML template 內沒有 <code>&lt;slot&gt;&lt;/slot&gt;</code>，則 data 將不會顯示</p>
</blockquote>
<p>最後 HTML 為：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">v-bind:href</span>=<span class="value">"url"</span><span class="value">class="nav-link"</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;slot&gt;&lt;/slot&gt;</code> 可視為 placeholder，專門顯示 component tag 間的 data，如此就不必什麼 data 都靠 prop 傳遞。</p>
<blockquote>
<p>Slot 可是為傳遞 data 的另外一種方式，尤其是 <code>顯示型</code> 的 data</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">navigation-link</span> <span class="attribute">url</span>=<span class="value">"/profile"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Add a Font Awesome icon --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="title">navigation-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Component tag 間不單只能放 data，也可以放其他 HTML。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">navigation-link</span> <span class="attribute">url</span>=<span class="value">"/profile"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use a component to add an icon --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">font-awesome-icon</span> <span class="attribute">name</span>=<span class="value">"user"</span>&gt;</span><span class="tag">&lt;/<span class="title">font-awesome-icon</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="title">navigation-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Component tag 間也可以放其他 component。</p>
<h2 id="Named_Slot">Named Slot</h2><hr>
<p>Vue 也允許在一個 component 間有多個 slot，此時必須使用 <strong>Named Slot</strong>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span> <span class="attribute">name</span>=<span class="value">"header"</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span> <span class="attribute">name</span>=<span class="value">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我們希望 <code>base-layout</code> component 的 <code>header</code>、<code>main</code> 與 <code>footer</code> 三部分都使用 slot，由 user 提供 data。</p>
<blockquote>
<p> 一個 component 只能有一個 <strong>default slot</strong>，其他都必須是 <strong>named slot</strong></p>
</blockquote>
<p>所以在 <code>header</code> 與 <code>footer</code> 使用了 named slot，在 <code>&lt;slot&gt;&lt;/slot&gt;</code> 多了 <code>name</code>，設定 slot 的名稱為 <code>header</code> 與 <code>footer</code>。</p>
<p><code>main</code> 則使用 default slot，不特別為 slot 取名稱。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">template</span> <span class="attribute">slot</span>=<span class="value">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">template</span> <span class="attribute">slot</span>=<span class="value">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>base-layout</code> component 時，由於有多個 slot，要搭配 <code>template</code> tag 將 data 與 HTML 包起來，並使用 <code>slot</code> attribute 指定 slot 名稱。</p>
<p>沒使用 <code>template</code> tag 部分，則為 default slot。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">slot</span>=<span class="value">"header"</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">slot</span>=<span class="value">"footer"</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以直接對 HTML 加上 <code>slot</code> attribute。</p>
<p>最後 HTML 為：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3 個 slot 完全被取代。</p>
<h2 id="Default_Slot_Content">Default Slot Content</h2><hr>
<p>Slot 雖然目的就是由 user 提供 data 顯示，但有時候會想在 component 內提供預設顯示 data。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">slot</span>&gt;</span>Submit<span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>submit-button</code> component 預設顯示 <code>Submit</code>，但也允許 user 提供其他 data 顯示，如 <code>Save</code> 與 <code>Upload</code>，就可在 <code>&lt;slot&gt;</code> 與 <code>&lt;/slot&gt;</code> 之間夾預設顯示 data。</p>
<h2 id="Scoped_Slot">Scoped Slot</h2><hr>
<p>若想由 user 自訂 slot，但實際 data 卻是在 component 內，此時就要使用 <strong>Scoped Slot</strong>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">v-for</span>=<span class="value">"(todo, index) in todos"</span> <span class="attribute">:key</span>=<span class="value">"index"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.title &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>todo-list</code> component  雖然已經提供 <code>todo.title</code> 的顯示，但為了讓 component 更有彈性，想提供 slot 由 user 能夠提供不同顯示方式。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">v-for</span>=<span class="value">"(todo, index) in todos"</span> <span class="attribute">:key</span>=<span class="value">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span> <span class="attribute">:todo</span>=<span class="value">"todo"</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.title &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>將 <code>todo</code> 以 prop 方式傳進  slot，此為預設顯示方式。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">todo-list</span> <span class="attribute">:todos</span>=<span class="value">"todos"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">template</span> <span class="attribute">slot-scope</span>=<span class="value">"slotProps"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">v-if</span>=<span class="value">"slotProps.todo.completed"</span>&gt;</span>✓<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.todo.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>User 提供了不同的顯示方式取代 slot。</p>
<p>在 <code>&lt;template&gt;</code> 加上 <code>slot-scope</code> attribute 指定 scope 名稱，然後使用 scope 名稱存取 component 內的 data。</p>
<blockquote>
<p>不一定得使用 <code>&lt;template&gt;</code> tag，任何 HTML tag 加上 <code>slot-scope</code> 皆可</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">todo-list</span> <span class="attribute">:todos</span>=<span class="value">"todos"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">template</span> <span class="attribute">slot-scope</span>=<span class="value">"&#123; todo &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">v-if</span>=<span class="value">"todo.completed"</span>&gt;</span>✓<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若搭配 ECMAScript 2015 的 Object Destructuring，則有更好的寫法。</p>
<p>因為 <code>slotProps</code> 本質就是有 <code>todo</code> property 的 object。</p>
<p>可使用 <code>{ todo }</code> 將 <code>todo</code> 取出為變數直接使用，則不必在定義 <code>slotProps</code> 這種中介變數。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有了 Slot，顯示型的 data 就不必再使用 prop，可直接使用 slot 傳遞</li>
<li>若 component 提供多個 slot，則要使用 Named Slot</li>
<li>Slot 也可提供預設顯示 data</li>
<li>若想提供 user 自訂 slot，卻要讀取 component 內的資料，則要使用 Scoped Slot；若搭配 ECMAScript 2015 的 Object Destructuring 寫法，則非常精簡</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/vue-slot" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://vuejs.org" target="_blank" rel="external">Vue</a>, <a href="https://vuejs.org/v2/guide/components-slots.html" target="_blank" rel="external">Slots</a></p>
]]></content>
    <summary type="html">
    <![CDATA[傳遞顯示型 Data]]>
    
    </summary>
    
      <category term="Vue" scheme="https://oomusou.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vue CLI 之 Mode 與 .env]]></title>
    <link href="https://oomusou.io/vue/env-mode/"/>
    <id>https://oomusou.io/vue/env-mode/</id>
    <published>2018-10-22T12:23:43.000Z</published>
    <updated>2018-10-25T06:20:50.806Z</updated>
    <content type="html"><![CDATA[<p>實務上一定會遇到在不同 server ( <code>development</code>、<code>lab</code>、<code>staging</code> 與 <code>production</code>) ，且各有各的 <code>環境變數</code>，該如何設定這些環境變數並且自動切換呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Vue 2.5.17<br>Vue CLI 3.0.3</p>
<h2 id="Modes">Modes</h2><hr>
<p>Vue CLI 內建 3 種 mode：</p>
<ul>
<li><strong>development</strong>：執行 <code>yarn serve</code> 與 <code>yarn lint</code> 時使用此模式</li>
<li><strong>production</strong>：<code>yarn build</code> 與 <code>yarn test:e2e</code> 使用此模式</li>
<li><strong>test</strong>：<code>yarn test:unit</code> 使用此模式</li>
</ul>
<p>我們也可以自行新增 mode，如 <code>lab</code> 與 <code>staging</code>。</p>
<h2 id="-env">.env</h2><hr>
<ul>
<li><strong>.env</strong>：所有 mode 都會載入</li>
<li><strong>env.local</strong>：所有 mode 都會載入，但不會進 Git，適合每個人本機自行設定</li>
<li><strong>env.[mode]</strong>：特定 mode 會載入</li>
<li><strong>env.[mode].local</strong>：特定 mode 會載入，但不會進 Git，適合每個人本機自行設定</li>
</ul>
<blockquote>
<p>若 key 同時存在 <code>.env</code>、<code>.env.[mode]</code> 與 <code>env.[mode].local</code> 時，則其載入順序為：</p>
<p><code>.env</code> =&gt; <code>env.[mode]</code> =&gt; <code>env.[mode].local</code></p>
<p>也就是其優先權為：</p>
<p><code>env.[mode].local</code> &gt; <code>env.[mode]</code> &gt; <code>.env</code></p>
</blockquote>
<p><strong>.env.development.local</strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NODE_ENV=<span class="value">development</span></span></span><br><span class="line"><span class="setting">VUE_APP_API=<span class="value"><span class="string">"https://jsonplaceholder.typicode.com"</span></span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>NODE_ENV</strong>：指定使用 Vue CLI 內建的 3 個 mode 之一</li>
<li><strong>VUE_APP_API</strong>：所有變數以 <code>VUE_APP_</code> 為開頭</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.VUE_APP_API);</span><br></pre></td></tr></table></figure>
<p>任何在 <code>.env</code> 所設定的變數，可以使用 <code>process.env.VUE_APP_xxx</code> 讀取。</p>
<h2 id="實務案例">實務案例</h2><hr>
<blockquote>
<ol>
<li>前後端分離後，當 API spec 定義好，前後端就可以同時進行開發，此時後端的 API 還沒開發好，前端可根據 API spec 的 example 製造 <code>假 API</code> 先行開發</li>
<li>執行 e2e testing 時，由於實際打 <code>真 API</code> 的測試速度較慢，因此會希望只打 local 的 <code>假 API</code>，加快測試速度</li>
<li>希望開發時期的 <code>假 API</code> 能留下來進 Git，將來就能透過 CLI 切換使用 <code>真 API</code> 或 <code>假 API</code>，不用修改 code</li>
</ol>
</blockquote>
<ul>
<li>使用 Node.js 建立假 API</li>
<li>使用 <code>.env</code> 切換 API</li>
</ul>
<h2 id="使用_Node-js_建立假_API">使用 Node.js 建立假 API</h2><hr>
<p><strong>安裝 Express 與 Cors</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="keyword">add </span>express</span><br></pre></td></tr></table></figure>
<p>安裝 express framework。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="keyword">add </span>cors</span><br></pre></td></tr></table></figure>
<p>安裝 express 的解 CORS 套件。</p>
<p><img src="/images/vue/env-mode/envmode000.png" alt="envmode000"></p>
<ul>
<li>在 <code>package.json</code> 的 <code>dependencies</code> 會看到 <code>cors</code> 與 <code>express</code> 兩個 package 被安裝</li>
</ul>
<p><strong>建立 node 目錄與檔案</strong></p>
<p><img src="/images/vue/env-mode/envmode001.png" alt="envmode001"></p>
<ol>
<li>在專案根目錄建立 <code>node</code> 目錄與 <code>index.js</code></li>
</ol>
<p><strong>node/index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todos = <span class="built_in">require</span>(<span class="string">'./todos'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express().use(cors());</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/todos'</span>, todos);</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Serving running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure>
<p>Import <code>express</code> module。</p>
<p>第 2 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>);</span><br></pre></td></tr></table></figure>
<p>Import <code>cors</code> module。</p>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = <span class="built_in">require</span>(<span class="string">'./todos'</span>);</span><br></pre></td></tr></table></figure>
<p>Import 自己寫的 <code>todos</code> module，為假 API。</p>
<p>第 6 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express().use(cors());</span><br></pre></td></tr></table></figure>
<p>使用 <code>express()</code> 建立 <code>app</code>，並且 use <code>cors()</code> 所建立的物件。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>
<p>定義 <code>hostname</code> 位置與 port。</p>
<p>第 10 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/todos'</span>, todos);</span><br></pre></td></tr></table></figure>
<p>將 <code>/todos</code> 設定為 GET，其資料由 <code>todos()</code> function 所提供。</p>
<p>12 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Serving running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 <code>app.listen()</code> 啟動 Node.js 服務。</p>
<p><strong>node/todos.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = (req, res) =&gt;</span><br><span class="line">  res.send([</span><br><span class="line">    &#123;</span><br><span class="line">      userId: <span class="number">1</span>,</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'delectus aut autem'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      userId: <span class="number">1</span>,</span><br><span class="line">      id: <span class="number">2</span>,</span><br><span class="line">      title: <span class="string">'quis ut nam facilis et officia qui'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      userId: <span class="number">1</span>,</span><br><span class="line">      id: <span class="number">3</span>,</span><br><span class="line">      title: <span class="string">'fugiat veniam minus'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      userId: <span class="number">1</span>,</span><br><span class="line">      id: <span class="number">4</span>,</span><br><span class="line">      title: <span class="string">'et porro tempora'</span>,</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      userId: <span class="number">1</span>,</span><br><span class="line">      id: <span class="number">5</span>,</span><br><span class="line">      title: <span class="string">'laboriosam mollitia et enim quasi adipisci quia provident illum'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      userId: <span class="number">1</span>,</span><br><span class="line">      id: <span class="number">6</span>,</span><br><span class="line">      title: <span class="string">'qui ullam ratione quibusdam voluptatem quia omnis'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = todos;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = (req, res) =&gt;</span><br></pre></td></tr></table></figure>
<p>定義 <code>todos()</code> ，其 argument 為 <code>req</code> 與 <code>res</code>。</p>
<p>第 2 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.send();</span><br></pre></td></tr></table></figure>
<p>API 要傳回的 JSON 資料。</p>
<p>41 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = todos;</span><br></pre></td></tr></table></figure>
<p>使用 CommonJS 方式 export 出 <code>todos()</code>。</p>
<h2 id="使用_-env_切換_API">使用 .env 切換 API</h2><hr>
<p><strong>建立 .env</strong></p>
<p><strong>.env</strong></p>
<figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NODE_ENV</span>=<span class="string">production</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>整個專案的 <code>.env</code>，會進 Git</p>
</li>
<li><p><code>NODE_ENV</code> 預設為 Vue CLI 的 <code>production</code> mode</p>
</li>
</ul>
<p><strong>.env.development</strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NODE_ENV=<span class="value">development</span></span></span><br><span class="line"><span class="setting">VUE_APP_API=<span class="value"><span class="string">"https://jsonplaceholder.typicode.com"</span></span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>設定 <code>development</code> mode 的 <code>.env</code>，會進 Git</p>
</li>
<li><p><code>NODE_ENV</code> 設定為 Vue CLI 的 <code>development</code> mode</p>
</li>
<li><p><code>VUE_APP_API</code> 變數為 <code>真 API</code> 位址</p>
</li>
</ul>
<p><strong>.env.development.local</strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NODE_ENV=<span class="value">development</span></span></span><br><span class="line"><span class="setting">VUE_APP_API=<span class="value"><span class="string">"http://localhost:3000"</span></span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>設定 <code>development</code> mode 的 <code>env</code>，<code>不會</code> 進 Git</p>
</li>
<li><p><code>NODE_ENV</code> 設定為 Vue CLI 的 <code>development</code> mode</p>
</li>
<li><code>VUE_APP_API</code> 變數為 <code>假 API</code> 位址</li>
</ul>
<blockquote>
<p>因為 <code>.env.development.local</code> 不會進 Git，自己開發用的環境變數可以設定在此</p>
</blockquote>
<p><strong>.env.lab</strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NODE_ENV=<span class="value">development</span></span></span><br><span class="line"><span class="setting">VUE_APP_API=<span class="value"><span class="string">"https://jsonplaceholder.typicode.com"</span></span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>設定 <code>lab</code> mode，此為自訂的新 mode，會進 Git</li>
<li><code>NODE_ENV</code> 設定為 Vue CLI 的 <code>production</code> mode</li>
<li><code>VUE_APP_API</code> 變數為 <code>真 API</code> 位址</li>
</ul>
<p><strong>讀取 .env</strong></p>
<p><strong>api/todo.api.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> API = process.env.VUE_APP_API;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchTodos = () =&gt; axios.get(<span class="string">`<span class="subst">$&#123;API&#125;</span>/todos`</span>);</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> API = process.env.VUE_APP_API;</span><br></pre></td></tr></table></figure>
<p>使用 <code>process.env.VUE_APP_API</code> 讀取 <code>.env</code> 的 <code>VUE_APP_API</code> 變數。</p>
<p><strong>使用假 API</strong></p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"vue-todo-lis-api"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.1.0"</span></span>,</span><br><span class="line">  "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">  "<span class="attribute">scripts</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">serve</span>": <span class="value"><span class="string">"vue-cli-service serve"</span></span>,</span><br><span class="line">    "<span class="attribute">build</span>": <span class="value"><span class="string">"vue-cli-service build"</span></span>,</span><br><span class="line">    "<span class="attribute">lint</span>": <span class="value"><span class="string">"vue-cli-service lint"</span></span>,</span><br><span class="line">    "<span class="attribute">api</span>": <span class="value"><span class="string">"node ./node/index.js"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">dependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">axios</span>": <span class="value"><span class="string">"^0.18.0"</span></span>,</span><br><span class="line">    "<span class="attribute">cors</span>": <span class="value"><span class="string">"^2.8.4"</span></span>,</span><br><span class="line">    "<span class="attribute">express</span>": <span class="value"><span class="string">"^4.16.4"</span></span>,</span><br><span class="line">    "<span class="attribute">vue</span>": <span class="value"><span class="string">"^2.5.17"</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line">  "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">@vue/cli-plugin-babel</span>": <span class="value"><span class="string">"^3.0.3"</span></span>,</span><br><span class="line">    "<span class="attribute">@vue/cli-plugin-eslint</span>": <span class="value"><span class="string">"^3.0.3"</span></span>,</span><br><span class="line">    "<span class="attribute">@vue/cli-service</span>": <span class="value"><span class="string">"^3.0.3"</span></span>,</span><br><span class="line">    "<span class="attribute">@vue/eslint-config-airbnb</span>": <span class="value"><span class="string">"^3.0.5"</span></span>,</span><br><span class="line">    "<span class="attribute">vue-template-compiler</span>": <span class="value"><span class="string">"^2.5.17"</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"api"</span>: <span class="string">"node ./node/index.js"</span></span><br></pre></td></tr></table></figure>
<p>輸入 <code>yarn api</code> 將執行 Node.js 的 <code>假 API</code>。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>yarn api</span><br></pre></td></tr></table></figure>
<p><img src="/images/vue/env-mode/envmode002.png" alt="envmode002"></p>
<ol>
<li>執行 <code>假 API</code></li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>yarn serve</span><br></pre></td></tr></table></figure>
<p><img src="/images/vue/env-mode/envmode003.png" alt="envmode003"></p>
<ol>
<li><code>yarn serve</code> 會使用 <code>development</code> mode，因為有提供 <code>.env.development.local</code>，所以 <code>VUE_APP_API</code> 應為 <code>http://localhost:3000</code>，也就是 <code>假 API</code> </li>
</ol>
<p><strong>使用真 API</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn serve <span class="comment">--mode lab</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/vue/env-mode/envmode004.png" alt="envmode004"></p>
<ol>
<li><code>yarn serve</code> 使用 <code>lab</code> mode，也就是 <code>真 API</code></li>
</ol>
<h2 id="-env-local-sample">.env.local.sample</h2><hr>
<p><strong>.env.development.local.sample</strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NODE_ENV=<span class="value">development</span></span></span><br><span class="line"><span class="setting">VUE_APP_API=<span class="value"><span class="string">"http://localhost:3000"</span></span></span></span><br></pre></td></tr></table></figure>
<p>由於 <code>env.local.sample</code> 沒有進 Git，其他人直接 <code>git clone</code> 下整個專案時，會因為不會設定 <code>.env.development.local</code>，導致無法執行 <code>假 API</code> 模式，可另外提供 <code>.env.development.local.sample</code>，此檔會進 Git，在自行由 <code>.env.development.local.sample</code> 命名為 <code>.env.development.local</code> 即可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 Node.js，就可解決 JSON Server 無法建立 POST 回傳資料的問題，因為 JSON Server 是純 RESTful</li>
<li>靈活的運用 <code>.env.development.local</code> 與 <code>yarn serve --mode</code>，就可靈活的切換 <code>假 API</code> 與 <code>真 API</code></li>
<li>可將 <code>.env.development.local.sample</code> 也存進 Git，如此其他人 <code>git clone</code> 下來，可根據此檔建立 <code>.env.development.local</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/vue-env-mode" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://cli.vuejs.org" target="_blank" rel="external">Vue CLI</a>, <a href="https://cli.vuejs.org/guide/mode-and-env.html#modes" target="_blank" rel="external">Environment Variables and Modes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 .env 靈活切換真 API 與 假 API]]>
    
    </summary>
    
      <category term="Node.js" scheme="https://oomusou.io/tags/Node-js/"/>
    
      <category term="Vue" scheme="https://oomusou.io/tags/Vue/"/>
    
      <category term="Vue CLI" scheme="https://oomusou.io/tags/Vue-CLI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell 之 Variable]]></title>
    <link href="https://oomusou.io/haskell/variable/"/>
    <id>https://oomusou.io/haskell/variable/</id>
    <published>2018-10-21T12:23:43.000Z</published>
    <updated>2018-10-21T04:15:26.045Z</updated>
    <content type="html"><![CDATA[<p>在 Haskell 中的 variable 因為是 Immutable，所以算是 definition，負責程式碼中重複的部分；且有別於一般程式語言的是，由於 Haskell 將 function 也視為 data，因此 variable 也能是 function。</p>
<p>若使用 IIFE，則有另外一種使用 Lambda 方式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>GHC 8.4.3</p>
<h2 id="Haskell">Haskell</h2><hr>
<p><strong>Function</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">calChange</span> given owed = </span><br><span class="line">  <span class="keyword">if</span> given - owed &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">then</span> given - owed</span><br><span class="line">  <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>以上簡單的 function，我們發現幾個問題：</p>
<ul>
<li><code>given - owed</code> 不容易閱讀，應該取一個有意義的名稱代表其意義</li>
<li><code>given - owed</code> 在 function 中重複運算</li>
</ul>
<p>在 Haskell 中有三種解法：</p>
<ul>
<li>where</li>
<li>let</li>
<li>lambda</li>
</ul>
<p><strong>Where</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">calChange</span> given owed = </span><br><span class="line">  <span class="keyword">if</span> change &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">then</span> change</span><br><span class="line">  <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">where</span> change = given - owed</span><br></pre></td></tr></table></figure>
<p>使用 <code>where</code> 定義 <code>change</code>，如此 <code>if</code> 與 <code>then</code> 之後都可使用 <code>change</code> variable。 </p>
<p><strong>Let</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">calChange</span> given owed = </span><br><span class="line">  <span class="keyword">let</span> change = given - owed</span><br><span class="line">  <span class="keyword">in</span> <span class="keyword">if</span> change &gt; <span class="number">0</span></span><br><span class="line">     <span class="keyword">then</span> change</span><br><span class="line">     <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><code>where</code> 是定義在最後面，但也可使用 <code>let</code> 將 variable 定義在一開始，然後加上 <code>in</code>。</p>
<p><strong>Lambda</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">calChange</span> given owed = </span><br><span class="line">  (\change -&gt; <span class="keyword">if</span> change &gt; <span class="number">0</span></span><br><span class="line">              <span class="keyword">then</span> change</span><br><span class="line">              <span class="keyword">else</span> <span class="number">0</span>) (given - owed)</span><br></pre></td></tr></table></figure>
<p>將非共用的部分抽成 Lambda，再將 <code>given - owed</code> 共用的部分以 parameter 傳入 Lambda。</p>
<p>其實這就是 ECMAScript 的 IIFE。</p>
<h2 id="FSharp">FSharp</h2><hr>
<p><strong>Function</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calChange given owed =</span><br><span class="line">  <span class="keyword">if</span> given - owed &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">then</span> given - owed</span><br><span class="line">  <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>let</code> 定義 function，F# 與 Haskell 風格相當接近。</p>
<p><strong>Let</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calChange given owed =</span><br><span class="line">  <span class="keyword">let</span> change = given - owed</span><br><span class="line">  <span class="keyword">if</span> change &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">then</span> change</span><br><span class="line">  <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>let</code> 定義 <code>change</code> variable。</p>
<p><strong>Lambda</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calChange given owed =</span><br><span class="line">  (<span class="keyword">fun</span> change -&gt; <span class="keyword">if</span> change &gt; <span class="number">0</span></span><br><span class="line">                 <span class="keyword">then</span> change</span><br><span class="line">                 <span class="keyword">else</span> <span class="number">0</span>) (given - owed)</span><br></pre></td></tr></table></figure>
<p>F# 的 Lambda 使用 <code>fun</code>，因為 F# 也支援 IIFE，因此寫法與 Haskell 很類似。</p>
<h2 id="ECMAScript">ECMAScript</h2><hr>
<p><strong>Function</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calChange = (given, owed) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (given - owed &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> given - owed</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>最基本的寫法，使用 Arrow Function 定義 <code>calChange()</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calChange = (given, owed) =&gt;</span><br><span class="line">  given - owed &gt; <span class="number">0</span> ? given - owed : <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>由於 ECMAScript 支援 <code>?:</code> 寫法，可以稍微化簡。</p>
<p><strong>Const</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calChange = (given, owed) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> change = given - owed;</span><br><span class="line">  <span class="keyword">return</span> change &gt; <span class="number">0</span> ? change : <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>類似 Haskell 的 <code>let</code> 寫法，先定義 <code>change</code> variable。</p>
<p><strong>Arrow Function</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calChange = (given, owed) =&gt;</span><br><span class="line">  (change =&gt; change &gt; <span class="number">0</span> ? change : <span class="number">0</span>)(given - owed);</span><br></pre></td></tr></table></figure>
<p>如同 Haskell 的 Lambda 一樣，將非共用部分以 Arrow Function 表示，將共用的 <code>given - owed</code> 以 parameter 傳入。</p>
<p>這就是 IIFE，因為 ECMAScript 與 Haskell 都有 IIFE，所以能使用 Lambda 或 Arrow Function 抽出非共用部分。</p>
<h2 id="CSharp">CSharp</h2><hr>
<p><strong>Function</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; CalChange = (given, owed) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (given - owed &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> given - owed;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Func</code> 定義 function，其餘寫法一樣。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; CalChange = (given, owed) =&gt; </span><br><span class="line">  given - owed &gt; <span class="number">0</span> ? given - owed : <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>由於 C# 支援 <code>?:</code> 寫法，可以稍微化簡。</p>
<p><strong>Var</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; CalChange = (given, owed) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> change = given - owed;</span><br><span class="line">  <span class="keyword">return</span> change &gt; <span class="number">0</span> ? change : <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>類似 Haskell 的 <code>let</code> 寫法，先定義 <code>change</code> variable。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; CalChange = (given, owed) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">  Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Body = change =&gt; change &gt; <span class="number">0</span> ? change : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> Body(given - owed);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>因為 C# 沒有 IIFE，因此只能先定義好 <code>Body</code> function，然後將 <code>given - owed</code> 傳入。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>傳統都會將共用部分抽成 Lambda 或 Arrow Function，但配合 IIFE，也看到另外一種用法，將非共用部分以 Lambda 表示，將共用部分以 parameter 傳入</li>
<li>C# 因為沒有 IIFE，所以使用 Lambda 的效果較不顯著</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Will Kurt, <a href="https://www.manning.com/books/get-programming-with-haskell" target="_blank" rel="external">Get Programming with Haskell</a></p>
]]></content>
    <summary type="html">
    <![CDATA[在 function 中定義 Variable]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell 之 Function]]></title>
    <link href="https://oomusou.io/haskell/function/"/>
    <id>https://oomusou.io/haskell/function/</id>
    <published>2018-10-18T13:23:43.000Z</published>
    <updated>2018-10-21T02:22:48.734Z</updated>
    <content type="html"><![CDATA[<p>Function 為 Haskell 最重要的元素，首先來看 Haskell 如何定義 function，也順便複習 F# 、ECMAScript 與 C#。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>GHC 8.4.3</p>
<h2 id="Haskell">Haskell</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foo</span> x y = x + y</span><br><span class="line"><span class="title">too</span> = \x y -&gt; x + y</span><br></pre></td></tr></table></figure>
<ul>
<li>直接定義 <code>foo</code> function，parameter 以 space 隔開，而 parameter 與 body 之間以 <code>=</code> 隔開</li>
<li>使用 Lambda Function，Haskell 規定一開始用 <code>\</code> 表示 Lambda Function，而 parameter 與 body 之間以 <code>-&gt;</code> 隔開</li>
</ul>
<h2 id="FSharp">FSharp</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo x y = x + y</span><br><span class="line"><span class="keyword">let</span> too = <span class="keyword">fun</span> x y -&gt; x + y</span><br></pre></td></tr></table></figure>
<p>F# 與 Haskell 已經非常類似：</p>
<ul>
<li><p>直接定義 <code>foo</code> function，一開始使用 <code>let</code>，之後寫法與 Haskell 相同</p>
</li>
<li><p>使用 Lambda Function，F# 規定一開始使用 <code>fun</code>，之後寫法與 Haskell 相同</p>
</li>
</ul>
<h2 id="ECMAScript">ECMAScript</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> too = (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<ul>
<li>ES5 使用 Anonymous Function 定義 function</li>
<li>ES6 使用 Arrow Function 表示定義 function</li>
</ul>
<h2 id="CSharp">CSharp</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; foo = (x, y) =&gt; x + y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">too</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span>=&gt; x + y;</span><br></pre></td></tr></table></figure>
<ul>
<li>C# 3 使用 Func 使用 Delegate 定義 function</li>
<li>C# 7 使用 Local Function 定義 fuction</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>各語言間只是語法稍有差異，但使用 function 的觀念都是相同的</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Will Kurt, <a href="https://www.manning.com/books/get-programming-with-haskell" target="_blank" rel="external">Get Programming with Haskell</a></p>
]]></content>
    <summary type="html">
    <![CDATA[學而時習之，不亦悅乎]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何執行 Haskell ?]]></title>
    <link href="https://oomusou.io/haskell/ghc/"/>
    <id>https://oomusou.io/haskell/ghc/</id>
    <published>2018-10-17T15:23:43.000Z</published>
    <updated>2018-10-18T01:38:55.799Z</updated>
    <content type="html"><![CDATA[<p>Haskell 提供各種執行方式，除了可編譯之外，還提供 REPL、Script，也可直接在 IDE 內執行，非常方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.14<br>GHC 8.4.3<br>Haskell for Mac 1.6.0</p>
<h2 id="安裝_GHC">安裝 GHC</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install ghc</span><br></pre></td></tr></table></figure>
<p>使用 Homebew 安裝 GHC。</p>
<h2 id="執行_GHCi">執行 GHCi</h2><hr>
<p>預設 prompt 為 <code>Prelude&gt;</code>，可自行修改成 <code>GHCi&gt;</code>。</p>
<p><strong>.ghci</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="operator"><span class="keyword">set</span> <span class="keyword">prompt</span> <span class="string">"GHCi&gt; "</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc000.png" alt="ghc000"></p>
<ul>
<li>在 home directory 建立 <code>.ghci</code>，設定 prompt 為 <code>GHCi</code>。</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ghci</span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc001.png" alt="ghc001"></p>
<ol>
<li>輸入 <code>ghci</code></li>
<li>Prompt 為 <code>GHCi</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ghci</span>&gt; <span class="pseudo">:q</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc002.png" alt="ghc002"></p>
<ol>
<li>輸入 <code>:q</code> 離開 GHCi。</li>
</ol>
<h2 id="編譯執行_Haskell">編譯執行 Haskell</h2><hr>
<p>GHC 可將 Haskell 編譯成執行檔執行。</p>
<p><strong>HelloWorld.hs</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = </span><br><span class="line">  print <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>以 Haskell 印出簡單的 <code>Hello World</code>。</p>
<blockquote>
<p>main 為 Haskell 執行檔第一個執行的 function</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ghc <span class="constant">HelloWorld.</span>hs</span><br></pre></td></tr></table></figure>
<p>使用 <code>ghc</code> 編譯 <code>HelloWorld.hs</code>。</p>
<p><img src="/images/haskell/ghc/ghc003.png" alt="ghc003"></p>
<p><img src="/images/haskell/ghc/ghc004.png" alt="ghc004"></p>
<ol>
<li>編譯出 <code>HelloWorld</code> 執行檔，也一併編譯出 <code>.hi</code>與 <code>.o</code> 等中間檔</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./<span class="constant">HelloWorld</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc005.png" alt="ghc005"></p>
<ol>
<li>直接執行 <code>hello-world</code> 執行檔。</li>
</ol>
<h2 id="以_GHCi_執行_Haskell">以 GHCi 執行 Haskell</h2><hr>
<p>Haskell 亦可以使用 REPL 方式執行。</p>
<p><img src="/images/haskell/ghc/ghc010.png" alt="ghc010"></p>
<ol>
<li>輸入 <code>ghci</code> 進去 GHCi</li>
<li>輸入 <code>:l</code> + <code>檔名</code> 載入檔案</li>
<li>在 GHCi 執行 function</li>
</ol>
<h2 id="以_runghc_執行_Script">以 runghc 執行 Script</h2><hr>
<p>Haskell 也可以不用編譯，直接以 script 形式執行。</p>
<p><img src="/images/haskell/ghc/ghc011.png" alt="ghc011"></p>
<ol>
<li><code>runghc</code> + <code>檔案名稱</code> 即可立即執行</li>
</ol>
<h2 id="直接執行_Script">直接執行 Script</h2><hr>
<p>也可如同 Bash 一樣，直接執行 script。</p>
<p><strong>HelloWorld.hs</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#!/usr/bin/env runghc</span></span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = </span><br><span class="line">  print <span class="string">"Hello World!"</span></span><br></pre></td></tr></table></figure>
<p>在第一行加上 <code>#!/usr/bin/env runghc</code></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x <span class="constant">HelloWorld.</span>hs</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 設定 <code>HelloWorld.hs</code> 能被執行。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./<span class="constant">HelloWorld.</span>hs</span><br></pre></td></tr></table></figure>
<p>直接執行 <code>HelloWorld.hs</code>。</p>
<p><img src="/images/haskell/ghc/ghc008.png" alt="ghc008"></p>
<h2 id="Haskell_for_Mac">Haskell for Mac</h2><hr>
<p><img src="/images/haskell/ghc/ghc006.png" alt="ghc006"></p>
<ol>
<li>建立 <code>HelloWorld.hs</code></li>
<li>在左側建立 <code>main</code> function</li>
<li>在右側 <code>Run Playground</code> 執行 function，相當於 GHCi</li>
<li>下方顯示結果</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Haskell 除了可編譯外，尚提供 REPL 與 Script 模式，無論你習慣編譯式語言或者 Script，都可以找到自己習慣的方式</li>
<li>Haskell 也可以類似 Bash 方式直接執行</li>
<li>若使用 Haskell for Mac 這類 IDE，也類似 GHCi，可以每個 function 單獨測試</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Haskell 除了編譯，也提供 REPL 與 Script]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Asynchronous]]></title>
    <link href="https://oomusou.io/ecmascript/asynchronous/"/>
    <id>https://oomusou.io/ecmascript/asynchronous/</id>
    <published>2018-10-07T13:23:43.000Z</published>
    <updated>2018-10-07T14:46:06.077Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 對 Asynchronous 總共有 Promise、Generator 與 Async Await 三種支援，其中 Generator 屬於較進階的應用，主要是在寫 library，但 Promise 與 Async Await 則非常重要，寫 application 也很常用到。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015 (Promise)<br>ECMAScript 2017 (Async Await)</p>
<h2 id="API">API</h2><hr>
<p><strong>productApi.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; API &#125; <span class="keyword">from</span> <span class="string">'../environment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  fetchProducts: () =&gt; axios.get(<span class="string">`<span class="subst">$&#123;API&#125;</span>/products`</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>實務上我們會將 API 部分另外寫在 <code>api</code> 目錄下，且另外寫 <code>fetchXXX()</code> method，但 <code>axios.get()</code> 回傳的到底是什麼型別呢？</p>
<p>是 ECMAScript 2015 新的 <code>Promise</code> 型別。</p>
<h2 id="Promise">Promise</h2><hr>
<p>由於 Asynchronous 在所有 Synchronous 執行完才會執行，因此對於 AJAX 回傳的資料，對於 Synchronous 而言，屬於一種 <code>未來值</code>。</p>
<p>也就是 AJAX 所回傳的資料，將來一定會有，但具體時間未知，只能先回傳 <code>Promise</code> 物件給你，一旦 AJAX 抓到資料，你就可以用 Promise 去換真實的資料。</p>
<p><img src="/images/ecmascript/async/async000.jpg" alt="async000"></p>
<p>就類似你去麥當勞買漢堡，錢都給了，但漢堡還沒做好，但未來一定會有，也是 <code>未來值</code>，因此店員會給你 <code>取餐單</code>，將來你可以用 <code>取餐單</code> 去換漢堡。</p>
<p><code>取餐單</code> 就是 Promise。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">const</span> response = res =&gt;</span><br><span class="line">    <span class="keyword">this</span>.products = res.data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> error = e =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> done = () =&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line"></span><br><span class="line">  productApi</span><br><span class="line">    .fetchProducts()</span><br><span class="line">    .then(response)</span><br><span class="line">    .catch(error)</span><br><span class="line">    .finally(done);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><code>fetchProducts()</code> 會回傳 <code>Promise</code> 物件，該物件總共有 3 個  operator (也是 Higher Order Function)。</p>
<ul>
<li><strong>then()</strong>：傳入要獲取 AJAX 資料的 function，當 AJAX 抓到資料後，會自己執行 function</li>
<li><strong>catch()</strong>：傳入若 AJAX 錯誤所執行的 function，當 AJAX 出錯時，會自己執行 function</li>
<li><strong>finally()</strong>：傳入 AJAX 最後所執行的 function，當 AJAX 執行完正，會自己執行 function</li>
</ul>
<blockquote>
<p><code>finally()</code> 目前在 ECMAScript 定義為 stage 4，也就是即將 ECMAScript 正式定義，重要是 Babel 已經率先支援，因此可安心使用</p>
</blockquote>
<h2 id="Async_Await">Async Await</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> mounted() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> productApi.fetchProducts();</span><br><span class="line">    <span class="keyword">this</span>.products = response.data;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>Promise 屬於 FP 觀念下的產物  (也就是 Monad Pattern)，若你習慣 Imperative 思維，也可以透過 <code>Async Await</code> 將 Asynchronous 寫的很 Synchronous。</p>
<p>將 function 前面宣告 <code>async</code>，表示此為 Asynchronous Function，也就是內部將使用 <code>await</code>。</p>
<p><code>response</code> 為 <code>productApi.fetchProducts()</code> 所回傳的 Promise，是 <code>未來值</code>，<code>觀念上</code> 會 await 等 <code>response</code> 成真後才會繼續執行。</p>
<p>因為看起來很像 Synchronous 寫法，因此可以使用原本的 <code>try catch finally</code>。</p>
<blockquote>
<p>Async Await 只是程式碼看起來很像 Synchronous，但起本質仍然是 Asynchronous，因為 await 一定要對方回傳 Promise 才能使用，所以是百分之百的 Syntax Sugar</p>
<p>Async Await 來自於 C# 5，在 ECMAScript 2017 正式定案，Babel 也完美支援</p>
</blockquote>
<h2 id="Why_Promise_?">Why Promise ?</h2><hr>
<p>由 JavaScript 的 Event Loop Model 可知，有三種屬於 Asynchronous：</p>
<ul>
<li>DOM</li>
<li>AJAX (XMLHttpRequest)</li>
<li>setTimeout()</li>
</ul>
<p>由於前端一定要使用 AJAX 呼叫 API，這屬於 Asynchronous 行為，會被安排在 Callback Queue ，等 Synchronous 執行完，最後才執行 Asynchronous。</p>
<p>在 ES5 之前，若 Asynchronous 之間有相依的先後關係，在 jQuery + Callback 只能這樣寫：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'/products'</span>, (err, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> product = ret.json();</span><br><span class="line">        $.get(<span class="string">'/product/$&#123; product[0].id&#125;'</span>, (err, res) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> item = res.json();</span><br><span class="line">                <span class="built_in">console</span>.log(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這就是有名的 <strong>Callback Hell</strong>：</p>
<ul>
<li>很容易寫出巢狀很深的 code 難以維護</li>
<li>每個 Callback 都要自己維護 Exception</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/products'</span>)</span><br><span class="line">  .then(res =&gt; res.json())</span><br><span class="line">  .then(product =&gt; fetch(<span class="string">'/products/$&#123; prdouct[0].id&#125;'</span>))</span><br><span class="line">  .then(res =&gt; res.json())</span><br><span class="line">  .then(item =&gt; <span class="built_in">console</span>.log(item));</span><br><span class="line">  .catch(e =&gt; <span class="built_in">console</span>.log(e));</span><br></pre></td></tr></table></figure>
<p>使用 Promise 後：</p>
<ul>
<li>程式碼風格改成 Pipeline 方式容易閱讀</li>
<li>每個 <code>then()</code> 都回傳一個全新的 Promise</li>
<li>統一處理 Exception</li>
</ul>
<blockquote>
<p>Callback 雖然也能解決 Asynchronous，但會造成 Callback Hell，應盡量避免使用，且隨著 ECMAScript 2015 將 Promise 定為標準，越來越多 Library 直接回傳 <code>Promise</code> 型別 (Axios、Protractor …)，且 Async Await 也是基於 Promise 技術，所以 Promise 已經成為不能不會的東西</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Async Await 只是讓你程式碼看起來很像 Synchronous，但其本質仍然是 Asynchronous，因為 Async Await 一定要搭配 Promise，而 Promise 就是 Asynchronous，因此 Async Await 算是 Syntax Sugar</li>
<li>雖然 Async Await 是 ECMAScript 2017 較新的東西，但個人認為 <code>語意</code> 其實並沒有 Promise 好，Async Await 會讓你使用 Imperative 方式思考，而 Promise  會讓你使用 Pipeline 方式思考，個人較喜歡 Promise</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/vue-promise" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/tc39" target="_blank" rel="external">TC39</a>, <a href="https://github.com/tc39/proposal-promise-finally" target="_blank" rel="external">Promise.prototype.finally</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">Promise</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="external">async function</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="external">await</a></p>
]]></content>
    <summary type="html">
    <![CDATA[解釋 Promise 與 Async Await]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Event Loop Model]]></title>
    <link href="https://oomusou.io/ecmascript/event-loop-model/"/>
    <id>https://oomusou.io/ecmascript/event-loop-model/</id>
    <published>2018-10-07T12:23:43.000Z</published>
    <updated>2018-10-07T14:42:12.966Z</updated>
    <content type="html"><![CDATA[<p>由於 JavaScript 是 Single Thread 語言，由於其 Single Thread 特色，對於繁重的運算動作，就無法如 C# 使用 Multi Thread 解決，因此 Asynchronous 在 JavaScript 格外重要。</p>
<p>Browser 使用獨特的 Event Loop Model 實現 Asynchronous，要能徹底了解其背後運作原理，才能掌握 JavaScript 的 Asynchronous。</p>
<a id="more"></a>
<h2 id="Single_Thread">Single Thread</h2><hr>
<ul>
<li>One call stack</li>
<li>One thing at a time</li>
</ul>
<p>JavaScript 最大的特色就是 Runtime 為 Single Thread，也就是只有一個  Call Stack，因此一個時間只能做一件事情。</p>
<p>也由於只有一個 Thread，只要遇到 <code>大量運算</code>，JavaScript 就會停住等待，因此使用者體驗就會不好。</p>
<blockquote>
<p>C# 只要遇到 <code>大量運算</code>，我們就會使用 Multi Thread，但 JavaScript 為 Single Thread，因此這招不能用在 JavaScript</p>
</blockquote>
<p>因此 Browser 做了擴充，有些東西並不是由 JavaScript Runtime 實作，而是由 Browser 提供：</p>
<ul>
<li>DOM</li>
<li>AJAX (XMLHttpRequest)</li>
<li>setTimout()</li>
</ul>
<p>也就是這三類 Browser 所提供的 API，屬於 Asynchronous 部分。</p>
<h2 id="Event_Loop_Model">Event Loop Model</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span>);</span><br><span class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Sam'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'World '</span>);</span><br><span class="line"><span class="comment">// Hello World Sam</span></span><br></pre></td></tr></table></figure>
<p>當 <code>setTimeout()</code> 為 <code>0</code> 秒時，會先執行 <code>console.log(&#39;Sam&#39;)</code> 還是 <code>console.log(&#39;World &#39;)</code> ?</p>
<blockquote>
<p>既然 dealy <code>0</code> 秒，且寫在前面，應該先執行吧 ?</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">concole.log(<span class="string">'Hello '</span>);</span><br><span class="line">$.get(<span class="string">'url'</span>, data =&gt; <span class="built_in">console</span>.log(data)); <span class="comment">// &#123; name: 'Sam' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">' World'</span>);</span><br><span class="line"><span class="comment">// Hello World &#123; name: 'Sam' &#125;</span></span><br></pre></td></tr></table></figure>
<p>當使用 AJAX 時，也會發現 <code>console.log(&#39; World&#39;)</code> 會先執行。</p>
<p><img src="/images/ecmascript/event-loop-model/loop000.svg" alt="eventloop000"></p>
<p>會先執行 Stack 內的 function，直到 Stack 都執行完，才會執行 Event Loop，將 Callback Queue 內的 function 執行完。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/images/ecmascript/event-loop-model/loop001.svg" alt="loop001"></p>
<ul>
<li><code>console.log(&#39;Hello &#39;)</code> 進 Stack</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop002.svg" alt="loop002"></p>
<ul>
<li>清空 Stack，在 Console 顯示 <code>Hello</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Sam'</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/images/ecmascript/event-loop-model/loop003.svg" alt="loop003"></p>
<ul>
<li><code>setTimeout()</code> 進 Stack</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop004.svg" alt="loop004"></p>
<ul>
<li>清空 Stack，執行 Browser Thread 的 <code>timer(0)</code> </li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop005.svg" alt="loop005"></p>
<ul>
<li><code>timer(0)</code> 時間一到，將 <code>callback</code> 塞進 Callback Queue</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'World '</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/images/ecmascript/event-loop-model/loop006.svg" alt="loop006"></p>
<ul>
<li><code>console.log(&#39;World &#39;)</code> 進 Stack</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop007.svg" alt="loop007"></p>
<ul>
<li>清空 Stack，在 Console 顯示 <code>Hello World</code></li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop008.svg" alt="loop008"></p>
<ul>
<li>所有 Synchronous Function 都已經執行完，開始執行 Event Loop</li>
</ul>
<p><img src="/images/ecmascript/event-loop-model/loop009.svg" alt="loop009"></p>
<ul>
<li>清空 Callback Queue，在 Console 顯示 <code>Hello World Sam</code></li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Asynchronous Function 會將 Callback 先塞進 Callback Queue，不會立即執行</li>
<li>等所有 Synchronous Function 都執行完，才開始執行 Event Loop 清空 Callback Queue 執行 Asynchronous Function</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Philp Robers : <a href="https://youtu.be/8aGhZQkoFbQ" target="_blank" rel="external">What the heck is the event loop anyway ?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[解釋 JavaScript 非同步的運作原理]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 ES Module]]></title>
    <link href="https://oomusou.io/ecmascript/module/"/>
    <id>https://oomusou.io/ecmascript/module/</id>
    <published>2018-10-04T12:23:43.000Z</published>
    <updated>2018-10-12T07:43:24.226Z</updated>
    <content type="html"><![CDATA[<p>ES5 很難寫大程式，主要是因為 JavaScript 沒有 Module 概念，常常一個檔案寫兩三千行程式，且大量使用 Global Variable 造成 Side Effect 很難維護。</p>
<p>早期 JavaScript 是使用 Module Pattern 解決，稍後更有 CommonJS 與 AMD 試圖制定 Module 標準，一直到 TC39 出手，在 ECMAScript 2015 定義 Module 後，JavaScript 的模組化總算塵埃落定，是 JavaScript 發展的重要里程碑。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Why_Module_?">Why Module ?</h2><hr>
<p>在 ES5 時代，Scope 只有兩種概念：Global 與 Function，而沒有如 C# 的 Namespace 或 Java 的 Package，因此很難將程式碼加以模組化，造成 JavaScript 很難寫大程式。</p>
<p>Module 須提供兩大功能：</p>
<ul>
<li>將 data 或 function 封裝在 Module 內</li>
<li>將 interface 暴露在 Module 外</li>
</ul>
<p>ES5 在語言層級並沒有提供以上支援。</p>
<h2 id="Module_Pattern">Module Pattern</h2><hr>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MouseCounterModule = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">const</span> handleClick = () =&gt;</span><br><span class="line">  	<span class="built_in">console</span>.log(++numClicks);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    countClick: () =&gt;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, handleClick);</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>當語言不支援時，第一個會想用的就是 Design Pattern 自救。</p>
<p>JavaScript 什麼都是用 function，Module 也用 function 就不意外了。</p>
<ul>
<li><strong>將 data 或 function 封裝在 Module 內</strong>：使用了 Closure + IIFE</li>
<li><strong>將 interface 暴露在 Module 外</strong>：return 全新 object</li>
</ul>
<blockquote>
<p><strong>IIFE</strong></p>
<p>Immediately Invoked Function Expression<br>定義 function 的同時，也順便執行 function，若配合 Closure，可將 data 封裝在 function 內，避免 data 暴露在 Global Scope</p>
</blockquote>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"MouseCounterModule.js"</span>/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"texty/javascript"</span>&gt;</span><span class="undefined"></span><br><span class="line">  MouseCounterModule.counterClick();    </span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>使用 HTML 載入 Dependency Module，此時 JavaScript 的載入順序就很重要，需要自行控制。</p>
<h2 id="AMD">AMD</h2><hr>
<blockquote>
<p><strong>AMD</strong></p>
<p>Asynchronous Module Defintion<br>針對 Browser 所設計的  Module 解決方案，使用 Asynchronous 方式載入 Module</p>
</blockquote>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'MouseCounterModule'</span>, [<span class="string">'jQuery'</span>], $ =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> handleClick = () =&gt; </span><br><span class="line">    <span class="built_in">console</span>.log(++numClicks);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    countClick: () =&gt;</span><br><span class="line">      $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, handleClick);</span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>define()</code> 為 AMD 所提供的 function：</p>
<ul>
<li>第一個參數：定義 Module 的 ID 作為識別</li>
<li>第二個參數：陣列，傳入其他 Dependency Module 的 ID</li>
<li>第三個參數：用來建立 Module 的 function</li>
</ul>
<p>除了 <code>define()</code> 外，該寫的 Module function 還是要寫。</p>
<ul>
<li><strong>將 data 或 function 封裝在 Module 內</strong>：在 function 內使用 Closure 封裝</li>
<li><strong>將 interface 暴露在 Module 外</strong>：return 全新 object</li>
</ul>
<p>不必再使用 IIFE，<code>define()</code> 會幫你執行。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'MouseCounterModule'</span>], mouseCounterModule =&gt;</span><br><span class="line">    mouseCounterModule.countClick();</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>require()</code> 為 AMD 所提供的 function：</p>
<ul>
<li>第一個參數：相依的外部 Module ID</li>
<li>第二個參數：使用 Module 的 function</li>
</ul>
<p>AMD 有以下特色：</p>
<ul>
<li>自動解析 Module 的 dependency，不用在乎 JavaScript 載入順序</li>
<li>Module 以 asynchronous 載入，不會 blocking 影響使用者體驗</li>
<li>允許一個檔案有多個 Module，也就是多個 <code>define()</code></li>
</ul>
<p>也因為 AMD 的 asynchronous 特性，特別適合在 Browser 使用。</p>
<h2 id="CommonJS">CommonJS</h2><hr>
<blockquote>
<p><strong>CommonJS</strong></p>
<p>為一般性 JavaScript 環境所設計的解決方案，Node.js 使用</p>
</blockquote>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jQuery'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClick = () =&gt; </span><br><span class="line">  <span class="built_in">console</span>.log(++numClicks);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  countClick: () =&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, handleClick);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>require()</code> 為 CommonJS 所提供的 function，負責載入 Dependency Module。</p>
<ul>
<li><p><strong>將 data 或 function 封裝在 Module 內</strong>：<code>numClicks</code> 與 <code>handleClick()</code> 看似 Global，但事實上其 scope 只有 Module level，不用特別使用 function 與 Closure 寫法就能達成封裝 data 與 function</p>
</li>
<li><p><strong>將 interface 暴露在 Module 外</strong>：將全新 object  指定給 <code>module.exports</code> 即可，不需特別 return</p>
</li>
</ul>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MouseCounterModule = <span class="built_in">require</span>(<span class="string">'MouseCounterModule.js'</span>);</span><br><span class="line"></span><br><span class="line">MouseCounterModule.counterClick();</span><br></pre></td></tr></table></figure>
<p>使用 <code>require()</code> 載入 Dependency Module 後即可使用，也不用搭配 Callback function。</p>
<p>CommonJS 有以下特色：</p>
<ul>
<li>Data 與 function 不需再使用 Closure，雖然看起來像 Global，但 CommonJS 會封裝在 Module 內</li>
<li>使用 <code>module.exports</code> 公開 interface</li>
<li>一個檔案就是一個 Module</li>
<li>語法比 AMD 優雅</li>
</ul>
<p>但 CommonJS 也有幾個缺點：</p>
<ul>
<li>但 <code>require()</code> 為 Synchronous，因此適合在 server 端使用</li>
<li>Browser 並未提供 <code>module</code> 與 <code>exports</code>，因此還要透過 <code>Browserify</code> 作轉換</li>
</ul>
<h2 id="ES_Module">ES Module</h2><hr>
<p>由於 JavaScript 社群存在這兩大 Module 標準，TC39 決定融合 AMD 與 CommonJS 的優點制定出 ES6 Module，至此 JavaScript 有了正式的 Module 規格。</p>
<ul>
<li>學習 CommonJS，一個檔案就是一個 Module</li>
<li>學習 CommonJS 簡單優雅的語法</li>
<li>學習 AMD 以 Asynchronous 載入 Module</li>
</ul>
<p><strong>MouseCounterModule.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ from <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numClicks = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClick = () =&gt;</span><br><span class="line">  <span class="built_in">console</span>.log(++numClicks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  countClick: () =&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, handleClick);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>import</code> 為 ECMAScript 2015 所提供的 keyword，負責載入 Dependency Module，可以 Synchronous 也可 Asynchronous。</p>
<p><code>export</code>  為 ECMAScript 2015 所提供的 keyword，負責暴露 interface 於 Module 外。</p>
<ul>
<li><p><strong>將 data 或 function 封裝在 Module 內</strong>：<code>numClicks</code> 與 <code>handleClick()</code> 看似 Global，但事實上其 scope 只有 Module level，不用特別使用 function 與 Closure 寫法就能達成封裝 data 與 function，這點與 CommonJS 一樣</p>
</li>
<li><p><strong>將 interface 暴露在 Module 外</strong>：將全新 object  透過 <code>export</code> 即可，不需特別 return</p>
</li>
</ul>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MouseCounterModule <span class="keyword">from</span> <span class="string">'MouseCounterModule.js'</span>;</span><br><span class="line"></span><br><span class="line">MouseCounterModule.counterClick();</span><br></pre></td></tr></table></figure>
<p>使用 <code>import</code> 載入 Dependency Module 後即可使用，也不用搭配 Callback function，這點與 CommonJS 一樣。</p>
<p>ES Module 有以下特色：</p>
<ul>
<li>提供 <code>export</code> 與 <code>import</code> 兩個 keyword 就解決</li>
<li>語法比 CommonJS 優雅</li>
</ul>
<h2 id="Definition">Definition</h2><hr>
<p>你可以將 data (variable、object、function、class) 加以 import 或 export。</p>
<p>Export 分為 Named Export 與 Default Export：</p>
<ul>
<li><strong>Named Export</strong>：data 必須有名稱</li>
<li><strong>Default Export</strong>：data 沒有名稱 (Anonymous Object、Anonymous Function、Anonymous Class)</li>
<li>一個 Module 只能有一個 Default Export，但能有無限多個 Named Export</li>
</ul>
<blockquote>
<p>Default Export 的 data 也可以有名稱，但因為會由 import 決定名稱，所以通常會使 data 沒有名稱</p>
</blockquote>
<h2 id="Named_Export">Named Export</h2><hr>
<h3 id="Variable">Variable</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> y = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>可直接對 <code>let</code> 與 <code>const</code> 變數加以 export 。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; x &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; y &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>可對變數分別 import，但 Named Import 要搭配 <code>{}</code>。</p>
<h3 id="Object">Object</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; x, y &#125;;</span><br></pre></td></tr></table></figure>
<p>可直接對 object 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; x, y &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>可對 object 直接 import，使用 Destructing Assignment 方式對 object 直接解構。</p>
<h3 id="Function">Function</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>add()</code> 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 function 加以 Named Import 要加上 <code>{}</code>。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<p>將 <code>add()</code> Arrow Function 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 Arrow Function 加以 Named Import 也要加上 <code>{}</code>。</p>
<h3 id="Class">Class</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>Counter</code> class 加以 export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Counter &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">const counter = new Counter(1, 1);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 class 加以 Named Import 要加上 <code>{}</code>。</p>
<blockquote>
<p>無論對 variable / object / function / class 加以 Named Export，都會事先明確命名，然後在 Named Import 時都加上 <code>{}</code></p>
</blockquote>
<h2 id="Default_Export">Default Export</h2><hr>
<h3 id="Variable-1">Variable</h3><p>ES 6 無法對 <code>var</code>、<code>let</code> 與 <code>const</code> 使用 Default Export。</p>
<h3 id="Object-1">Object</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; x, y &#125;;</span><br></pre></td></tr></table></figure>
<p>對於 Anonymous Object 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyObject <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(MyObject.x);</span><br><span class="line"><span class="built_in">console</span>.log(MyObject.y);</span><br></pre></td></tr></table></figure>
<p>對 Anonymous Object 使用 Default Import，由於 Anonymous Object 本來就沒有名字，要在 Default Import 重新命名。</p>
<p>Default Import 不用加上 <code>{}</code>。</p>
<h3 id="Function-1">Function</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>對於 Anonymous Function 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br></pre></td></tr></table></figure>
<p>對 Anonymous Function 使用 Default Import，由於 Anonymous Function 本來就沒有名字，要在 Default Import 重新命名。</p>
<p>Default Import 不用加上 <code>{}</code>。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<p>對於 Arrow Function 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(add(1, 1));</span><br></pre></td></tr></table></figure>
<p>對 Arrow Function 使用 Default Import，由於 Arrow Function 本來就沒有名字，要在 Default Import 重新命名。</p>
<h3 id="Class-1">Class</h3><p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>對於 Anonymous Class 可使用 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">const counter = new Counter(1, 1);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br></pre></td></tr></table></figure>
<p>對 Anonymous Class 使用 Default Import，由於 Anonymous Class 本來就沒有名字，要在 Default Import 重新命名。</p>
<blockquote>
<p>無論對 variable / object / function / class 加以 Default Export，可不用事先明確命名 (當然要事先命名亦可，但沒有太大意義)，然後在 Named Import 時不用加上 <code>{}</code></p>
<p>React 與 Vue 喜歡使用 Default Export，優點是可由 user 自行命名，彈性最高；Angular 則喜歡使用 Named Export，由 Framework 事先命名，優點是整個 community 名稱統一</p>
</blockquote>
<h2 id="Named_+_Default_Export">Named + Default Export</h2><p>一個 Module 只允許一個 Default Export，但可以有多個 Named Export。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'Sam'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>name</code> 與 <code>add()</code> 為 Named Export，但 Anonymous Class 為 Default Export。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> Counter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br><span class="line"><span class="comment">// Sam</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>Named Export 要搭配 Named Import。</p>
<p>Default Export 則搭配 Default Export。</p>
<h2 id="Import_Entire_Module">Import Entire Module</h2><hr>
<p>實務上一個 Module 可能有很多 Export，要一個一個 Import 很辛苦，可以將整個 Module 都 Import 進來。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> MyModule <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(MyModule.name);</span><br><span class="line"><span class="built_in">console</span>.log(MyModule.add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> MyModule.default(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(counter.sum());</span><br></pre></td></tr></table></figure>
<p>對於 Named Export 沒問題，名字會維持原來的名稱。</p>
<p>但對於沒有名稱的 Default Export，會以 <code>default</code> 為名稱。</p>
<h2 id="Alias">Alias</h2><hr>
<p>若對原本 data 名稱覺得不滿意，在 Named Export 或 Named Import 時都可以重新取別名。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add <span class="keyword">as</span> sum &#125;;</span><br></pre></td></tr></table></figure>
<p>在 Named Export 時，已經使用 <code>as</code> 將 <code>add</code> 取別名為 <code>sum</code>，需搭配  <code>{}</code>。</p>
<p><strong>main.js</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; from <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>既然已經取別名為 <code>sum</code>，就以 <code>sum</code> 為名稱 import 進來。</p>
<p><strong>my-module.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = (x, y) =&gt; x + y;</span><br></pre></td></tr></table></figure>
<p>直接使用 Named Export 將 <code>add()</code> export 出來。</p>
<p><strong>main.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add <span class="keyword">as</span> sum &#125; <span class="keyword">from</span> <span class="string">'my-module'</span></span><br><span class="line"></span><br><span class="line">console.log(sum(1, 1));</span><br></pre></td></tr></table></figure>
<p>在 Named Import 時才使用 <code>as</code> 取別名亦可。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>ES6 Module 語法很簡單，只有 <code>export</code> 與 <code>import</code> 兩個 keyword</li>
<li>ES6 Module 分成 Named Export 與 Default Export，一個 Module 只能有一個 Default Export，但可以有多個 Named Export</li>
<li>可以使用 <code>import * as module</code> ，將整個 Module 都 import 進來</li>
<li><code>export</code> 與 <code>import</code> 都可搭配 <code>as</code> 取別名</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://en.wikipedia.org/wiki/John_Resig" target="_blank" rel="external">John Resig</a>, <a href="https://www.manning.com/books/secrets-of-the-javascript-ninja-second-edition" target="_blank" rel="external">Secret of the JavaScript Ninja, 2nd</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="external">export</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="external">import</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Module 是 ECMAScript 發展的重要里程碑]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Refactor to LINQ => Select]]></title>
    <link href="https://oomusou.io/linq/select/"/>
    <id>https://oomusou.io/linq/select/</id>
    <published>2018-10-01T14:23:43.000Z</published>
    <updated>2018-10-01T01:54:05.479Z</updated>
    <content type="html"><![CDATA[<p>LINQ 是 C# 3.0 實現 FP 重要里程碑，提供大量的 Operator，讓我們以 Pure Function 將 data 以 Dataflow 與 Pipeline 方式實現。本系列將先以 Imperative 實作，然後再重構成 FP，最後再重構成 LINQ Operator。</p>
<p>本文將討論 <code>Select</code> Operator。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.2.3</p>
<h2 id="Imperative">Imperative</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(item * <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Enumerable.Range()</code> 產生 <code>1, 2, 3</code>，建立暫存的 <code>result</code> List，將所有元素都乘以 <code>2</code>，最後使用 <code>foreach()</code> 印出每個值。</p>
<p>由於資料的改變，建立新的暫存 List 處理，是 Imperative 慣用手法。</p>
<h2 id="Refactor_to_HOF">Refactor to HOF</h2><p>實務上這種建立新暫存 List 處理的作法，常常會遇到，若每次都使用 <code>foreach</code> 這種 statement 寫法，重複使用能力為 0，就每次都要不斷的寫 <code>foreach</code>。</p>
<p>若我們能將這種 <code>foreach</code> 配合新暫存 List 處理做法，抽成 <code>MyMap()</code> Higher Order Function，我們就能不斷 reuse <code>MyMap()</code>，只要將不同的商業邏輯以 function 傳進 <code>MyMap()</code> 即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = MyMap(data, Double);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                result.Add(func(item));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Add(func(item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己以 <code>MyMap()</code> 實作出 <code>foreach</code> statement + 暫存 List 處理的 Higher Order Function 版本。</p>
<p>第一個參數為 data，第二個參數為 function。</p>
<p>如此 <code>MyMap()</code> function 就能被重複使用。</p>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = MyMap(data, Double);</span><br></pre></td></tr></table></figure>
<p>原來的 <code>foreach()</code> statement 重構成 <code>MyMap()</code> Higher Order Function，將 data 與 <code>Double</code> Local Function 傳入即可。 </p>
<h2 id="Refactor_to_Yield_Return">Refactor to Yield Return</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = MyMap(data, Double);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">MyMap</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; func</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>但要建立暫存 List 會影響執行效率，也浪費記憶體，尤其暫存 List 只是中繼資料，並不是最後執行結果</p>
</li>
<li><p><code>MyMap()</code> 還要重新執行一次 <code>foreach</code> loop，也會影響執行效率</p>
</li>
</ul>
<p>因此改用 <code>yield return</code> 實現 Lazy Evaluation，直到真正需要結果時，才會執行 <code>func(item)</code>，如此就不用建立暫存 List，既能解省記憶體，又能減少一次 <code>foreach</code> loop 執行，能大幅增進執行效率。</p>
<h2 id="Refactor_to_Generics">Refactor to Generics</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = MyMap(data, Double);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 <code>MyMap()</code> 不只適用於 <code>int</code>，而且可適用於任何型別，因此重構成 <code>&lt;T, R&gt;</code>。</p>
<h2 id="Refactor_to_Extension_Method">Refactor to Extension Method</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .MyMap(Double)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(Console.WriteLine);</span><br><span class="line">                </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;R&gt; MyMap&lt;T, R&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Func&lt;T, R&gt; func)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">func</span>(<span class="params">item</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyMap()</code> 需要兩個參數，使用上不是那麼方便，而且也無法 Pipeline 般使用，因此將第一個參數加上 <code>this</code>，成為 Extension Method。</p>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumerable</span><br><span class="line">    .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    .MyMap(Double)</span><br><span class="line">    .ToList()</span><br><span class="line">    .ForEach(Console.WriteLine);</span><br></pre></td></tr></table></figure>
<p>如此 <code>MyMap()</code> 就與 <code>Range()</code> 串起來了，而且也減少了一個參數。</p>
<h2 id="Refactor_to_LINQ">Refactor to LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(Double)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(Console.WriteLine);</span><br><span class="line">                </span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 LINQ 早已提供 <code>Select()</code>，不必我們自己實作，其功能完全等效於自己實作的 <code>MyMap()</code>。</p>
<blockquote>
<p>一般 FP 世界，將這種 operator 稱為 Map，如 ECMAScript 有<code>Array.prototype.map()</code>，F# 有 <code>List.map()</code>，在 LINQ 則稱為 <code>Select()</code></p>
</blockquote>
<h2 id="Refactor_to_Using_Static">Refactor to Using Static</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(Double)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">Double</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>using static</code> 之後，則 <code>Range()</code> 與 <code>WriteLine()</code> 可進一步縮短，更符合 FP 風格。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>就算自己重構，也會重構出 <code>Select()</code> Higher Order Function，只是因為太常使用，LINQ 已經內建 <code>Select()</code></li>
<li>Yield return 可實現 Lazy Evaluation，繼可節省記憶體，又可增進執行效率</li>
<li>善用 <code>using static</code>，可讓 class 的 static method 更像 function</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LINQSelect" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以重構角度探討 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Const]]></title>
    <link href="https://oomusou.io/ecmascript/const/"/>
    <id>https://oomusou.io/ecmascript/const/</id>
    <published>2018-09-30T13:23:43.000Z</published>
    <updated>2018-09-30T12:00:38.024Z</updated>
    <content type="html"><![CDATA[<p><code>const</code> 也是 ECMAScript 2015+ 的代表 keyword，應盡量使用 <code>const</code> 避免 Side Effect，除非真的要修改變數。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Definition">Definition</h2><hr>
<p>宣告常數於 block <code>{}</code> 內。</p>
<blockquote>
<p>與 <code>let</code> 差異只有 <code>let</code> 是 <code>變數</code>，而 <code>const</code> 是 <code>常數</code>，且都是 block level</p>
</blockquote>
<h2 id="Scope">Scope</h2><hr>
<p><strong>scope01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">constTest();</span><br><span class="line"><span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>
<p>與 <code>let</code> 一樣都是 <code>block</code> level，由於 <code>x = 2</code> 修改 <code>x</code> ，因此 SyntaxError。</p>
<p><strong>scope02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">'global'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.x);</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>在 global level 使用 const，也不會污染 DOM 的 <code>window</code> object。</p>
<h2 id="Initialization">Initialization</h2><hr>
<p><strong>initialization01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 可先宣告，然後再給值，但 <code>const</code> 一定要 <code>宣告同時給值</code>。</p>
<p>只能寫成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因為 const 強調不能被 reassign，因此 <code>宣告同時給值</code> 合理</p>
</blockquote>
<h2 id="Not_Immutable">Not Immutable</h2><hr>
<p><strong>not-immutable.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">data.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data.name);</span><br><span class="line"><span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure>
<p><code>const</code> 並不代表 data 是 Immutable，只代表變數不能被 reassign。</p>
<h2 id="Define_Function">Define Function</h2><hr>
<p><strong>define-function.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = (x, y) =&gt; x + y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>理論上也可以使用 <code>let</code> 定義 function，但因為 function 經過定義後就不會被 reassign，所以實務上都是使用 <code>const</code>。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>應優先使用 <code>const</code>  避免 Side Effect，也同時養成 Declarative Programming 習慣，盡量避免 Imperative 方式一直修改變數</li>
<li><code>const</code> 並不是 Immutable，僅是變數不能被 reassign</li>
<li>實務上建議使用 <code>const</code> 定義 function</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ecmascript_let" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN JavaScript</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="external">const</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 const 讓變數不會被 reassign]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FP 之 Yield 與 Lazy Evaluation]]></title>
    <link href="https://oomusou.io/fp/lazy-evaluation/"/>
    <id>https://oomusou.io/fp/lazy-evaluation/</id>
    <published>2018-09-30T12:23:43.000Z</published>
    <updated>2018-10-07T14:02:43.696Z</updated>
    <content type="html"><![CDATA[<p>為了使 function 重複使用能力更高，我們會盡量將 function 寫成 composable function，也因為如此，function 之間不斷地建立 data，且每個 function 又必須各自執行  <code>for</code> loop，這些都是執行效能殺手，而 <code>Yield</code> 與 <code>Lazy Evaluation</code> 讓我們優雅的解決這兩大難題。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.4</p>
<h2 id="Composable_Function">Composable Function</h2><hr>
<p>一個 function 若要能跟其他 function 完美組合，需達成 4 個條件：</p>
<ul>
<li><strong>Pure</strong> : function 不能有 Side Effect</li>
<li><strong>Chainable</strong> : 也就是 Pipeline，讓 data 以 Dataflow 方式一直流下去</li>
<li><strong>General</strong> : function 要越 <code>一般化</code>，越 <code>針對性</code> 則越難 Compose 重複使用</li>
<li><strong>Shape-preserving</strong> : funciton 要能保持原本資料結構，才能在相同型別下繼續 Compose 與 Pipeline</li>
</ul>
<p>很多人對於 FP 的 Chainable 有兩點疑慮：</p>
<ol>
<li>Function 之間不斷的傳遞 data，則必須在記憶體建立一份新 data，這將大幅影響執行效能</li>
<li>每個 function 都要再重新執行一次 <code>for</code> loop，這將大幅影響執行效能</li>
</ol>
<p>也由於這兩個因素，雖然 FP 更為優雅，因為效能因素，很多人對 FP 採取懷疑態度。</p>
<p>但 FP 引進 Lazy Evaluation 之後，這兩個疑慮都將獲得解決。</p>
<h2 id="Imperative">Imperative</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .Each(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">                result.Add(mapper(iter));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">                <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Add(iter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Each&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Each : "</span> + iter);</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">        .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        .Each(WriteLine);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p>假設我們自行實現 <code>Map()</code> 與 <code>Filter()</code> ，則結果如預期為 <code>6</code> 與 <code>9</code>。</p>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">        result.Add(mapper(iter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們會先建立一個新的 <code>List</code>，執行一次 <code>foreach</code> loop，並將 <code>mapper()</code> 結果新增至 <code>List</code>，最後再 return <code>List</code>。</p>
<p>這是典型 Imperative 常用手法。</p>
<p>30 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            result.Add(iter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也一樣建立一個新 <code>List</code>，執行一次 <code>foreach</code> loop，再根據 <code>predicate()</code> 篩選後的結果新增至 List，最後再 return <code>List</code>。</p>
<p>也一樣是 Imperative 常用手法。</p>
<p><img src="/images/fp/lazy-evaluation/yield000.png" alt="yield000"></p>
<p>執行結果也如預期，先執行完 <code>Map()</code>，再執行 <code>Filter()</code>，最後 <code>Each()</code>。</p>
<p>目前的 <code>Map()</code> 與 <code>Filter()</code>，已經達成 Composable Function 的要求，只是執行效率並不好：</p>
<ul>
<li><p><code>Map()</code> 與 <code>Filter()</code> 都要不斷建立新的 <code>List</code></p>
</li>
<li><p><code>Map()</code> 與 <code>Filter()</code> 都要各自再跑一次 <code>foreach</code> loop</p>
</li>
</ul>
<h2 id="Lazy_Evaluation">Lazy Evaluation</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .Each(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">mapper</span>(<span class="params">iter</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">                <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Each&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Each : "</span> + iter);</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">mapper</span>(<span class="params">iter</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>List</code> 拿掉，將新增至 <code>List</code> 重構成 <code>yield</code>。</p>
<p>26 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>List</code> 拿掉，將新增至 <code>List</code> 重構成 <code>yield</code>。</p>
<p><img src="/images/fp/lazy-evaluation/yield001.png" alt="yield001"></p>
<p>執行結果完全一樣，但執行方式已經完全不一樣。</p>
<p>我們發現執行順序變成每個數字各自執行 <code>Map() -&gt; Filter() -&gt; Each()</code>，而不是原本整個<code>List</code> 全部一起 <code>Map() -&gt; Filter() -&gt; Each()</code>。</p>
<p>當使用 <code>yield</code> 時，<code>Map()</code> 與 <code>Filter()</code> 並未執行，而是等 <code>Each()</code> 的 Side Effect : <code>WriteLine()</code> 執行時，才去呼叫 <code>Filter()</code>，然後 <code>Filter()</code> 去呼叫 <code>Map()</code>，<code>Map()</code> 才真正開始執行，<code>Map()</code> 執行完再立即將結果傳給 <code>Filter()</code>，最後再傳給 <code>Each()</code> 執行<code>WriteLine()</code> 達成需求。</p>
<p>這就是所謂 <strong>Lazy Evaluation</strong>，function 的所有計算，都因為 Side Effect 發動後才會開始。</p>
<p>Lazy Evaluation 有兩大優點 :</p>
<ul>
<li><strong>不需建立中繼 Data</strong>：Lazy Evaluation 使 Function 之間不需傳遞 data，因此也不用建立 data，省下建立 data 時間與記憶體</li>
<li><strong>直執行一次 Loop</strong>：Imperative 方式每個 funtion 都要自己執行 Loop，影響執行效能，但 Lazy Evaluation 只有一次 loop</li>
</ul>
<h2 id="使用_LINQ">使用 LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Select(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Where(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可再將程式碼重構成 LINQ，<code>Map()</code> 相當於 LINQ 的 <code>Select()</code>，而 <code>Filter()</code> 相當於 <code>Where()</code>。</p>
<p><img src="/images/fp/lazy-evaluation/yield002.png" alt="yield002"></p>
<ol>
<li>事實上 LINQ 內部就是使用 <code>yield</code> 實現，這也是 LINQ 高效的原因</li>
</ol>
<h2 id="使用時機">使用時機</h2><hr>
<ul>
<li>當 FP 寫 Higher Order Function 時，由於要不斷的將 data 傳給下一個 Higher Order Function，此時就是適合使用 <code>yield</code> 與 Lazy Evaluation，避免 function 間的不斷建立 data 與 多次 loop 影響執行效能</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>yield</code> 是眾多程式語言都具備的基礎功能，PHP 也有 <code>yield</code>，在 ECMAScript 2015 則稱為 Generator，但大部分人都採用 Imperative 方式寫程式，很少人會使用Lazy Evaluation 思考；事實上如 Haskell，所有 function 都是 Lazy Evaluation，這對 FP 的執行效能有非常大的幫助</li>
<li>是否覺得 Lazy Evaluation 很有 Agile 的味道呢 ? XDD</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LazyEvaluation" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[Yield 是實現 Lazy Evaluation 最簡單的方式]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Let]]></title>
    <link href="https://oomusou.io/ecmascript/let/"/>
    <id>https://oomusou.io/ecmascript/let/</id>
    <published>2018-09-27T13:23:43.000Z</published>
    <updated>2018-09-28T02:08:18.626Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 2015 是 JavaScript 歷史上最重要的一次升級，也讓 JavaScript 終於趕上主流程式語言的高度，若要明顯的分辨 ES5 與 ES6，最明顯的方式的方式就是看有沒有使用 <code>let</code>。</p>
<a id="more"></a>
<h2 id="Verson">Verson</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Let">Let</h2><hr>
<p>宣告變數於 block <code>{}</code> 內。</p>
<blockquote>
<p><code>var</code> 宣告變數於 function 內或 function 外 (global)</p>
</blockquote>
<h2 id="Scope">Scope</h2><hr>
<p><strong>scope01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varTest();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">varTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line">  x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">varTest();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>因為 Hoisting，<code>var x</code> 被移到最上層，scope 為 function 內，因此離開 <code>if (true)</code> 仍然為 <code>2</code>。</p>
<p><strong>scope02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">letTest();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>ES5 沒有 <code>let</code> 無法執行。</p>
<p>第 4 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>let</code> 後，其 scope 為 block <code>{}</code>，只有在 <code>{}</code> 為 <code>2</code>，離開 <code>{}</code> 就變回 <code>1</code>。</p>
<blockquote>
<p>以主流程式語言而言，變數的 scope 都是 block <code>{}</code>，而非 function，因此 ECMAScript 的 <code>let</code> 較符合大家的習慣，如此就可如 C# 一樣，將變數宣告在程式碼要用的地方，而不是宣告在 function 最前面，因此 TC39 建議全面使用 <code>let</code> 取代 <code>var</code></p>
</blockquote>
<p><strong>scope03.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 22</span></span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// 22</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>let b = 22</code>，為 block level。</p>
<p>13 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>var b = 2</code>，為 global level。</p>
<p><strong>scope04.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">cnt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p><code>var</code> 為 function level，因此 <code>for</code> loop 執行完還存在。</p>
<p><strong>scope05.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">cnt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 為 block level，超出 <code>for</code> loop 就抓不到了。</p>
<blockquote>
<p><code>for</code> loop 應全面使用 <code>let</code> 避免 Side Effect</p>
</blockquote>
<p><strong>scope06.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'global'</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="string">'global'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.y);</span><br><span class="line"><span class="comment">// global</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><code>var</code> 與 <code>let</code> 雖然都可建立 global 變數，但 <code>var</code> 會污染 DOM 的 <code>window</code> object，但 <code>let</code> 不會。</p>
<blockquote>
<p>若要使用 global 變數，應全面使用 <code>let</code> 取代 <code>var</code></p>
</blockquote>
<h2 id="Redeclaration">Redeclaration</h2><hr>
<p><strong>redeclaration01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可以執行。</p>
<p><code>var</code> 允許對變數重複宣告。</p>
<p><strong>redeclaration02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都無法執行。</p>
<p><code>let</code> 不允許對變數重複宣告。</p>
<p><strong>redeclaration03.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">var</span> y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行時</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>var</code> 會 Hoisting，所以允許 redeclaration。</p>
<p><strong>redeclaration04.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>若將 <code>var</code> 改成 <code>let</code>，則 ES5 與 ES6 都無法執行。</p>
<p>因為 let 認 <code>{}</code> 為 scope，不允許 redeclaration。</p>
<p><strong>redeclaration05.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">      <span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(y);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>在每個 <code>case</code> 加上 <code>{}</code>，則可以 redeclaration。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>var</code> 為 function level 或 global level；而 <code>let</code> 為 block level</li>
<li><code>var</code> 的 global 變數會污染 DOM 的 <code>window</code> object，但 <code>let</code> 不會</li>
<li>實務上建議全面使用 <code>let</code> 取代 <code>var</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ecmascript_let" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN JavaScript</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="external">let</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 let 宣告變數]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[發現 JavaScript 本質]]></title>
    <link href="https://oomusou.io/ecmascript/essence/"/>
    <id>https://oomusou.io/ecmascript/essence/</id>
    <published>2018-09-27T12:23:43.000Z</published>
    <updated>2018-09-27T22:54:10.073Z</updated>
    <content type="html"><![CDATA[<p>大家在學習 JavaScript 時，是否覺得 JavaScript 跟主流 OOP 程式語言，如 C++ / Java / C# 不太一樣？為什麼 JavaScript 沒有 interface？為什麼 JavaScript 很難使用 OOP Design Pattern ？為什麼我會從很討厭 JavaScript 到很喜歡 JavaScript？</p>
<p>這要從 JavaScript 的本質談起，因為我看到了JavaScript 可愛的一面。</p>
<a id="more"></a>
<h2 id="Feature">Feature</h2><hr>
<p>JavaScript 有兩大語言特色：</p>
<ol>
<li>JavaScript 是動態語言</li>
<li>JavaScript 是以 Function 為核心的語言</li>
</ol>
<h2 id="JavaScript_是動態語言">JavaScript 是動態語言</h2><hr>
<ul>
<li>JavaScript 可輕易為 object 建立新的 property，這在 C# <code>很難做到</code></li>
<li>JavaScript  可以輕易改變 <code>變數型別</code>，這在 C# <code>無法做到</code></li>
</ul>
<p>這種動態特性是好是壞見仁見智：</p>
<p>優點：</p>
<ul>
<li>對於 library 開發者，動態特性可以實現很多黑魔法，在 run-time 改變很多行為，Vue 就是善用 JavaScript 這種特性</li>
</ul>
<p>缺點：</p>
<ul>
<li>對於 application 開發者，動態特性有太多黑魔法不容易維護</li>
<li>太多行為都是 run-time 決定，不利於開發工具分析與重構</li>
</ul>
<blockquote>
<p>JavaScript 族群也分兩派，一派很喜歡動態特型，另外一派則完全不使用其動態特性，這一類族群最後會偏向使用 TypeScript  (Angular、RxJS、VS Code)</p>
<p>以我個人而言，若寫 application 時，我不會使用動態特性；若開發 library，為了 library 好用，會選擇性使用其動態特性</p>
</blockquote>
<h2 id="JavaScript_是以_Function_為核心的語言">JavaScript 是以 Function 為核心的語言</h2><hr>
<p>以下幾點可以證明 JavaScript 是以 Function 為核心的語言，而非 Class：</p>
<ul>
<li>JavaScript 雖然有 Java 字眼，但本質與 Java 完全不同，就如同 <code>林志玲</code> 與 <code>林志炫</code> 的關係 (就是沒有關係)</li>
<li>JavaScript 原型來自於 Scheme，而 Scheme 來自於 LISP，這都是典型的 Functional Programming Language，而非從 C++ 或 Java</li>
<li>ES5 雖然有 class 觀念，但卻是利用 Constructor Function 模擬出來的</li>
<li>ES5 雖然有 Inheritance 觀念，但卻是用 Function Prototype 實踐</li>
<li>ES6 雖然有 class 與 extends，但其本質仍然是 Constructor Function 與 Function Prototype</li>
</ul>
<blockquote>
<p>也就是 OOP 並非 JavaScript 的核心價值，僅僅提供最基本的 OOP 支援，而且 ECMAScript 2016 之後的發展，也沒再對 OOP 有更進一步的支援，但 ECMAScript 對 FP 的支援卻越來越完整</p>
<p>也就是 JavaScript 對 OOP 支援僅屬於 Entry Level，連 C# 1.0 都不如</p>
<p>而 JavaScript 也沒打算對 OOP 有進一步支援，如 OOP 必備的 Interface、Generics 都不可能出現在 ECMAScript，因為這些都不是 JavaScript 的核心價值，這也是為什麼會有 TypeScript 出現</p>
<p>但 JavaScript 對 FP 支援則越來越完整，FP 的代表性功能都將陸續出現在新版 ECMAScript 中</p>
</blockquote>
<h2 id="JavaScript_的世界觀">JavaScript 的世界觀</h2><hr>
<p>JavaScript 雖然也有 <code>物件</code>，但其世界觀與 OOP 的 <code>物件</code> 並不相同：</p>
<ul>
<li><strong>OOP</strong>：強調 <code>資料</code> 與 <code>功能</code> 合一，都封裝在 class 內，以 class 為封裝的最小單位，寫程式就是在寫 class，<code>資料</code> 就是 field，<code>功能</code> 就是 method，因為 field 的內容不同，因此有 object</li>
<li><strong>JavaScript</strong>：強調 <code>資料</code> 與 <code>功能</code> 分家，<code>資料</code> 就是 object，<code>功能</code> 就是 function，以 function 為封裝的最小單位，寫程式就是在寫 function，若要將資料封裝在 function 內，會使用 closure</li>
</ul>
<blockquote>
<p>也就是同樣是 <code>物件</code>，OOP 認為 class 是 <code>資料</code> 與 <code>功能</code> 的抽象，也因為有 <code>功能</code>，所以才必須要有 interface 定義 <code>功能</code> 的 <code>合約</code></p>
<p>但 JavaScript 認為 <code>功能</code> 只放 <code>資料</code> 即可，<code>功能</code> 寫在 function 內，也因為 object 沒有 <code>功能</code>，所以不需要 interface 作為 <code>合約</code></p>
<p>Q : JavaScript 的 object 明明可以放 function，這與 class 的 method 不是很類似嗎 ?</p>
</blockquote>
<p>JavaScript 認為 <code>Function as Data</code>，也稱為 <code>First Class Function</code>，因此 function 可以如 data 傳進其他 function，也可如 data 回傳 function，甚至將 function 放在 array 中，也就是你怎麼處理 data，就能怎麼處理 function。</p>
<p>也因為 <code>Function as Data</code>    ，function 是被當成 data 掛進 object 中，而不是 class 的 method。</p>
<blockquote>
<p>C# 雖然也可以將 function 傳入到其他 function，但必須透過 Delegate，也就是將 function 封裝成 Delegate 物件後，才能提供類似 JavaScript 功能，因為 C# 本質是 OOP</p>
</blockquote>
<h2 id="JavaScript_與_OOP">JavaScript 與 OOP</h2><hr>
<p>JavaScript 只是把 <code>物件</code> 用在處理 data，而不是如 OOP 將 <code>物件</code> 當成 <code>抽象</code> 使用，這是 JavaScript 與其他 OOP 語言最大的差異。</p>
<p>這也是為什麼 OOP 的 Design Pattern 套用在 JavaScript 都很奇怪，但 FP 的 Design Pattern 套用在 JavaScript 都很順利。</p>
<p>因為 JavaScript 的本質是 FP，不是 OOP，而且 ECMAScript 也沒打算將 JavaScript 繼續往 OOP 邁進。</p>
<blockquote>
<p>假如還是希望能以 OOP 寫 JavaScript，那就要挑選 TypeScript，TypeScript 持續對 OOP 進行強化，也有 Interface 與 Generics</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>JavaScript 的 object 僅用來處理 data，不是拿來當 <code>抽象</code> 使用</li>
<li><code>Funtion as Data</code>，在 JavaScript 中，function 被視為 data 使用</li>
<li>由於 JavaScript 語言特性不同，若以 OOP 語言，如 C++ / C# / Java 思維去思考 JavaScript，就會很難進步，會覺得 JavaScript 是很糟糕的語言</li>
<li>但若以 FP 語言，如 F# / ReasonML / Haskell 思維去思考 JavaScript，就會豁然開朗，會覺得 JavaScript 是很棒的語言</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[JavaScript 可愛的一面]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ECMAScript 之 Var]]></title>
    <link href="https://oomusou.io/ecmascript/var/"/>
    <id>https://oomusou.io/ecmascript/var/</id>
    <published>2018-09-26T12:23:43.000Z</published>
    <updated>2018-09-27T09:03:21.685Z</updated>
    <content type="html"><![CDATA[<p><code>var</code> 從 ES5 就存在，也是 ES5 的代表 keyword，看到 <code>var</code> 就可以判斷為 JavaScript。</p>
<p>但 <code>var</code> 在 ES6 有了一些改變，重要性也不若以往，TC39 甚至建議完全不要使用 <code>var</code>，改用 <code>let</code> 與 <code>const</code>。</p>
<a id="more"></a>
<h2 id="Verson">Verson</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Var">Var</h2><hr>
<p>宣告變數於 function 內或 function 外 (global)。</p>
<ul>
<li><strong>Scope</strong>：為 execution context，分 function (function 內) 與 global (function 外)，而非 <code>{}</code></li>
<li><strong>Auto Global</strong>：若沒 <code>var</code> 一個變數，會自動 <code>升級</code> 成 global 變數 (ES5 ok、但 ES6 廢除)</li>
<li><strong>Undefined</strong>：有 <code>var</code> 但未指定值，就是 <code>undefined</code></li>
<li><strong>Hoisting</strong>：無論你寫在 function 內第幾行，都會在 code 執行 <code>前</code> 先宣告變數</li>
<li><strong>Re-declare</strong>：若重新 <code>var</code> 一個變數，原來的值仍會存在</li>
</ul>
<h2 id="Scope">Scope</h2><hr>
<p><strong>scope01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> z = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(z);</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都無法執行。</p>
<p><code>z</code> 的 execution context 為 function 內，所以 function 外部抓不到 <code>z</code>，會在 run-time 跳出 <code>ReferenceError</code>。</p>
<p><strong>scope02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">z = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 可執行，ES6 會噴 <code>ReferenceError</code>。</p>
<p>在 ES5 允許 global variable 不使用 <code>var</code> 宣告變數，但 ES6 會啟動 <code>strict mode</code>，儘管是 global variable，也一定要使用 <code>var</code>。</p>
<h2 id="Auto_Global">Auto Global</h2><hr>
<p><strong>auto-global.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  y = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 可執行，ES6 會噴 <code>ReferenceError</code>。</p>
<p><code>y</code> 在 ES5 會自動升級為 global 變數，還是會印出 <code>1</code>，但 ES6 會啟動 <code>strict mode</code>，<code>y</code> 無法升級成 global 變數，會在 run-time 跳出 <code>ReferenceError</code>。</p>
<h2 id="Undefined">Undefined</h2><hr>
<p><strong>undefined01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'still going...'</span>);</span><br><span class="line"><span class="comment">// RefferenceError</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都無法執行。</p>
<p>Run-time <code>ReferenceError</code>，因為 <code>a</code> 沒有 <code>var</code> 宣告。</p>
<p><strong>undefined02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'still going...'</span>);</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// still going...</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p><code>a</code> 只宣告但沒有給值，因此為 <code>undefined</code>。</p>
<blockquote>
<p>ECMAScript 對於變數，沒有 <code>預設值</code>，也不是 <code>null</code>，而是特有 <code>undefined</code></p>
<p>有些瀏覽器為 <code>&quot;&quot;</code></p>
</blockquote>
<h2 id="Hoisting">Hoisting</h2><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bla = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> bla;</span><br></pre></td></tr></table></figure>
<p>但實際執行時為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bla;</span><br><span class="line">bla = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>也就是無論是 ES5 或 ES6，都會自動將 <code>var</code> 移到程式碼的最前面先執行。</p>
<p><strong>hoisting01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">111</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 111</span></span><br></pre></td></tr></table></figure>
<p>實際執行時</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">  bar = <span class="number">111</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 111</span></span><br></pre></td></tr></table></figure>
<p>無論 ES5 或 ES6，因為 <code>var bar</code> 會被 Hoisting 到 function 的最前面，因此為 <code>undefined</code>。</p>
<blockquote>
<p>因為 var 會 Hoisting，導致 JavaScript 的程式碼風格與 C# 迥異：</p>
<ul>
<li>JavaScript 會變數宣告在 function 內一開始</li>
<li>C# 會在使用才宣告變數</li>
</ul>
</blockquote>
<p><strong>hoisting02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y, y = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + y); </span><br><span class="line"><span class="comment">// undefinedA</span></span><br></pre></td></tr></table></figure>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">var</span> y;</span><br><span class="line">x = y;</span><br><span class="line">y = <span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + y); </span><br><span class="line"><span class="comment">// undefinedA</span></span><br></pre></td></tr></table></figure>
<p>因為 <code>var y</code> 會先被 Hoisting，所以 <code>x = y</code> 時，<code>y</code> 還是 <code>undefined</code>，因此 <code>x</code> 也是 <code>undefined</code>。</p>
<blockquote>
<p>實務上建議一行只 <code>var</code> 一個變數</p>
</blockquote>
<h2 id="Redeclaration">Redeclaration</h2><hr>
<p><strong>redeclaration01.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>因此 <code>var x</code> 被 Hoisting，所以結果都是 <code>2</code>。</p>
<p><strong>redeclaration02.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>ES5 與 ES6 都可執行。</p>
<p>實際執行為</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>由於 Hoisting 機制，JavaScript 允許 re-declare。</p>
<blockquote>
<p>C# 無法這樣寫，compile 就會報錯</p>
<p>Babel 可編譯也可執行，SonarQube 會抓出來</p>
<p>但實務上不建議使用 re-declare 機制</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>在 ES6，無論 function 內的 variable 或 global variable，一律要使用 <code>var</code>，否則會噴 <code>ReferenceError</code></li>
<li>JavaScript 有獨特的 <code>undefined</code>，只要變數沒有給定值都是 <code>undefined</code></li>
<li>由於 JavaScript 獨特的 Hoisting 機制，導致變數宣告都集中在 function 的最前面，與 C# 不同</li>
<li>由於 Hoisting 機制，JavaScript 允許 re-declare，與 C# 不同，但 SonarQube 會抓到錯誤，且實務上不建議這樣寫</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ecmascript_var" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">JavaScript MDN</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" target="_blank" rel="external">var</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 var 宣告變數]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Refactor to LINQ => ForEach]]></title>
    <link href="https://oomusou.io/linq/foreach/"/>
    <id>https://oomusou.io/linq/foreach/</id>
    <published>2018-09-25T13:23:43.000Z</published>
    <updated>2018-09-26T16:11:05.824Z</updated>
    <content type="html"><![CDATA[<p>LINQ 是 C# 3.0 實現 FP 重要里程碑，提供大量的 Operator，讓我們以 Pure Function 將 data 以 Dataflow 與 Pipeline 方式實現。本系列將先以 Imperative 實作，然後再重構成 FP，最後再重構成 LINQ Operator。</p>
<p>首先從最基本的 <code>ForEach</code> Operator 談起。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.2.3</p>
<h2 id="Imperative">Imperative</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Enumerable.Range()</code> 產生 <code>1, 2, 3</code>，最後使用 <code>foreach()</code> 印出每個值。</p>
<p><code>foreach</code> statement 是 Imperative 慣用手法。</p>
<h2 id="Refactor_to_HOF">Refactor to HOF</h2><hr>
<p>實務上這種 <code>foreach</code> 天天都要用到，但用 <code>foreach</code> 這種 statement 寫法，重複使用能力為 0，就每天都要不斷的寫 <code>foreach</code>。</p>
<p>若我們能將 <code>foreach</code> 抽成 <code>ForEach()</code> Higher Order Function，我們就能不斷 reuse <code>ForEach()</code>，只要將不同的商業邏輯以 function 傳進 <code>ForEach()</code> 即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            </span><br><span class="line">            MyForEach(data, Console.WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyForEach</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Action&lt;<span class="keyword">int</span>&gt; action</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                action(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyForEach</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; data, Action&lt;<span class="keyword">int</span>&gt; action</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        action(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己以 <code>MyForEach()</code> 實作出 <code>foreach</code> statement 的 Higher Order Function 版本。</p>
<p>第一個參數為 data，第二個參數為 function。</p>
<p>將 <code>foreach</code> statement 包進 <code>MyForEach()</code> function，如此 <code>foreach</code> statement 就能被重複使用。</p>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyForEach(data, Console.WriteLine);</span><br></pre></td></tr></table></figure>
<p>原來的 <code>foreach</code> statement 重構成 <code>MyForEach()</code> Higher Order Function，只要將 data 與 <code>Console.WriteLine</code> 傳入即可。</p>
<h2 id="Refactor_to_Generics">Refactor to Generics</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            </span><br><span class="line">            MyForEach(data, Console.WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                action(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        action(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 <code>MyForEach()</code> 不只適用於 <code>int</code>，而且可適用於任何型別，因此重構成 <code>&lt;T&gt;</code>。</p>
<h2 id="Refactor_to_Extension_Method">Refactor to Extension Method</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .MyForEach(Console.WriteLine);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">            &#123;</span><br><span class="line">                action(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Action&lt;T&gt; action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        action(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MyForEach()</code> 需要兩個參數，使用上不是那麼方便，而且也無法 Pipeline 般使用，因此將第一個參數加上 <code>this</code>，成為 Extension Method，</p>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enumerable</span><br><span class="line">    .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    .MyForEach(Console.WriteLine);</span><br></pre></td></tr></table></figure>
<p>如此 <code>MyForEach()</code> 就與 <code>Range()</code> 串起來了，而且也減少了一個參數。</p>
<h2 id="Refactor_to_LINQ">Refactor to LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(Console.WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事實上 LINQ 早已提供 <code>ForEach()</code>，不必我們自己實作。</p>
<blockquote>
<p>因為 <code>ForEach()</code> 為 <code>List</code> 所提供的 operator，因此必須先將 <code>IEnumerable</code> 由 <code>ToList()</code> 轉成 <code>List</code>。</p>
</blockquote>
<h2 id="Refactor_to_Using_Static">Refactor to Using Static</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>using static</code> 之後，則 <code>Range()</code> 與 <code>WriteLine()</code> 可進一步縮短，更符合 FP 風格。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>就算自己重構，也會重構出 <code>ForEach()</code> Higher Order Function，只是因為太常使用，LINQ 已經內建 <code>ForEach()</code></li>
<li>善用 <code>using static</code>，可讓 class 的 static method 更像 function</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LINQForEach" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以重構角度探討 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
</feed>
