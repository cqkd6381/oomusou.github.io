<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://oomusou.io/"/>
  <updated>2018-09-24T08:12:46.346Z</updated>
  <id>https://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[深入探討 FP 之 Pure Function 與 Side Effect]]></title>
    <link href="https://oomusou.io/fp/pure-function/"/>
    <id>https://oomusou.io/fp/pure-function/</id>
    <published>2018-09-26T12:23:43.000Z</published>
    <updated>2018-09-24T08:12:46.346Z</updated>
    <content type="html"><![CDATA[<p>Functional Programming 要求 Data 與 Function 分離，其中 Data 要求的是 Immutability，而 Function 要求的就是 Pure Function。這是 FP 的兩大基石，所有其他的特性都是由這兩個基本原則展開。</p>
<p>Pure Function 最簡單的定義就是 <code>不能產生 Side Effect</code>，但究竟什麼是 Side Effect 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>C# 7.2</p>
<blockquote>
<p>本文為 <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Funtional Programming in C#</a> 一書第二章的讀後心得</p>
</blockquote>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p><strong>Pure Function</strong></p>
<ul>
<li>與 Mathematical Function 一致</li>
<li>Ouput 僅與 Input Argument 相關</li>
<li>不會產生 Side Effect</li>
</ul>
</blockquote>
<p>與 Pure Function 相對的，就是 Impure Function：</p>
<blockquote>
<p><strong>Impure Function</strong></p>
<ul>
<li>大部分 Programming Function </li>
<li>除了 Input Argument 外，尚有其他因素影響 Output (Field、Exception、I/O)</li>
<li>會產生 Side Effect</li>
</ul>
</blockquote>
<p>我們可發現 Pure Function 與 Impure Function 是相對的，其他定義都很容易理解，唯獨 Side Effect 需要另外解釋。</p>
<h2 id="Side_Effect">Side Effect</h2><hr>
<ul>
<li>Mutate Global State</li>
<li>Mutate Input Argument</li>
<li>Throw Exception</li>
<li>Perform I/O Operation</li>
</ul>
<h3 id="Mutate_Global_State">Mutate Global State</h3><p>凡在 function 以外的 scope，就算是 Global State，如 OOP 的 field，也被視為 Global State。</p>
<p>修改 Global State 被視為有 Side Effect。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">var</span> count = counter.AddOne()</span><br><span class="line">                           .AddOne()</span><br><span class="line">                           .Count;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>對 <code>counter</code> 增加 2 次，結果為 <code>2</code>。</p>
<p><strong>Counter.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Count &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Counter</span>(<span class="params"><span class="keyword">int</span> count</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Counter <span class="title">AddOne</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OOP 強調 Data 與 Function 合一，所以會將 <code>Count</code> 視為 field，封裝在 <code>Counter</code> class 內。</p>
<p><code>AddOne()</code> 被視為有 Side Effect，因為其修改了 function 外部的 <code>Count</code> field，屬於 Global State。</p>
<p>為了做 Fluent Interface，OOP 會以 <code>return this</code> 方式。</p>
<p><strong>Counter.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Count &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Counter</span>(<span class="params"><span class="keyword">int</span> count</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CounterExt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Counter <span class="title">AddOne</span>(<span class="params"><span class="keyword">this</span> Counter counter</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Counter(counter.Count + <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FP 強調 Data 與 Function 分家，因此 Data 屬於 <code>Counter</code> class，而 Function 屬於 <code>CounterExt</code> class。</p>
<p><code>AddOne()</code> 沒有 Side Effect，因為根據 argument 得到目前的 count，計算後回傳新的 <code>Counter</code> object，完全與 function 外部無關。</p>
<p>FP 藉由 Extension Method 達成 Fluent Interface。</p>
<blockquote>
<p>儘管由 OOP 改用 FP，但 client 的寫法完全沒有改變</p>
</blockquote>
<h3 id="Mutate_Input_Argument">Mutate Input Argument</h3><p>修改 function 的 argument，而造成 function 外界的 data 被修改，也視為 Side Effect。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">decimal</span> <span class="title">RecomputeTotal</span>(<span class="params">Order order, List&lt;OrderLine&gt; linesToDelete</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> line <span class="keyword">in</span> order.OrderLines)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.Quantity == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            linesToDelete.Add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            result += line.Product.Price * line.Quantity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RecomputeTotal</code> 被視為有 Side Effect，因為新增了<code>linesToDelete</code> List，造成對 <code>RecomputeTotal()</code> function 外部的 data 有影響。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">decimal</span>, IEnumerable&lt;OrderLine&gt;) RecomputeTotal(Order)</span><br><span class="line">    =&gt; (order.OrderLines.Sum(x =&gt; x.Product.Price * x.Quantity)),</span><br><span class="line">        order.OrderLines.Where(x =&gt; x.Quantity == <span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<p>使用回傳 <code>order.OrderLines.Where(x =&gt; x.Quantity == 0)</code> 取代新增 <code>linesToDelete</code> List，如此不會影響 function 外部 data，因此沒有 Side Effect。</p>
<h3 id="Throw_Exception">Throw Exception</h3><p>因為以下兩個原因，Throw Exception 也被視為 Side Effect：</p>
<ul>
<li>Exception 屬於 function 外部 scope，也算 Global State</li>
<li>Throw Exception 後，其他 fuction 必須去 <code>try catch</code> 處理，由於不是來自於 function argument，會使得其他 function 不是 Pure Function</li>
</ul>
<blockquote>
<p>FP 也有自己的 Exception 處理機制，如 F# 的 <code>Result</code>、Haskell 的 <code>Either</code></p>
</blockquote>
<h3 id="Perform_I/O_Operation">Perform I/O Operation</h3><p>在現實世界中，不可能所有 function 都在計算或者 mapping，如</p>
<ul>
<li>呼叫 API</li>
<li>寫入資料庫、寫到 console</li>
<li>讀出系統時間</li>
</ul>
<p><img src="/images/fp/pure-function/pure000.png" alt="pure000"></p>
<p>這些都屬於無法避免的 Side Effect，但我們可將 Side Effect 集中在 Pure Function 前後，而不是在 function 內隨意的 Side Effect。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Pure Function 與 Side Effect 為 FP 的入門磚，看似基本，但實務上並不容易實現，常常一不小心就寫出 Impure Function</li>
<li>I/O 是無法避免的 Side Effect，但 FP 能將 Side Effect 降到最低</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[定義 Pure Function 與 Side Effect]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 WebStorm 設定 ECMAScript 2015+ 與 File Watcher ?]]></title>
    <link href="https://oomusou.io/webstorm/es6-file-watcher/"/>
    <id>https://oomusou.io/webstorm/es6-file-watcher/</id>
    <published>2018-09-19T12:23:43.000Z</published>
    <updated>2018-09-19T04:38:40.669Z</updated>
    <content type="html"><![CDATA[<p>雖然可以搭配 Webpack 將 ECMAScript 2015+ 編譯成 ES5，但有時只是想簡單學習 ECMAScript 2015+，此時可以透過 WebStorm 內建的 File Watcher，只要 ECMAScript 一存檔，WebStorm 就會自動呼叫 Babel 幫我們編譯成 ES5。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>WebStorm 2018.2.3<br>Babel CLI 6.26.0<br>Babel-preset-env 1.7.0</p>
<h2 id="Babel_CLI">Babel CLI</h2><hr>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="built_in">global</span> <span class="keyword">add</span> babel-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/es6-file-watcher/es6000.png" alt="es6000"></p>
<p>WebStorm 必須依賴 Babel 才能將 ECMAScript 2015+ 編譯，因此必須先安裝 transpiler。</p>
<p>以 global 方式安裝 <code>bable-cli</code>。</p>
<p><img src="/images/webstorm/es6-file-watcher/es6001.png" alt="es6001"></p>
<h2 id="建立專案">建立專案</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6004.png" alt="es6004"></p>
<ol>
<li>建立一個簡單的專案，使用 <code>Empty Project</code> 即可</li>
<li>設定專案所建立的目錄位置</li>
</ol>
<h2 id="Babel-preset-env">Babel-preset-env</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="built_ins">add</span> babel-preset-<span class="built_ins">env</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/webstorm/es6-file-watcher/es6002.png" alt="es6002"></p>
<p>Babel CLI 只是包含 transpiler，但 ECMAScript 每年都有新的語言定義，因此要另外安裝 Babel-preset-env。</p>
<p>將 <code>babel-preset-env</code> 安裝在專案目錄下。</p>
<p><img src="/images/webstorm/es6-file-watcher/es6003.png" alt="es6003"></p>
<h2 id="支援_ECMAScript_2015+">支援 ECMAScript 2015+</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6009.png" alt="es6009"></p>
<ol>
<li><strong><em>Preferences -&gt; Language &amp; Frameworks -&gt; JavaScript</em></strong></li>
<li><strong>JavaScript language version</strong> ： <code>ECMAScript 6</code></li>
</ol>
<h2 id="File_Watcher">File Watcher</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6005.png" alt="es6005"></p>
<ol>
<li><strong><em>Preferences -&gt; Tools -&gt; File Watchers</em></strong></li>
<li>按 <code>+</code> 新增 File Watcher</li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6006.png" alt="es6006"></p>
<ol>
<li>WebStorm 預設提供了很多 File Watcher 設定，選擇 <code>Babel</code></li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6007.png" alt="es6007"></p>
<ol>
<li>接受預設值即可，按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6008.png" alt="es6008"></p>
<ol>
<li>成功新增了 Babel File Watcher</li>
</ol>
<h2 id="Hello_World">Hello World</h2><hr>
<p><img src="/images/webstorm/es6-file-watcher/es6010.png" alt="es6010"></p>
<ol>
<li>使用 ECMAScript 2015 語法的 <code>HelloWorld.js</code></li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6011.png" alt="es6011"></p>
<ol>
<li>只要一存檔，File Watcher 就會啟動 Babel，編譯成 ES5 的 <code>HelloWorld.js</code></li>
</ol>
<p><img src="/images/webstorm/es6-file-watcher/es6012.png" alt="es6012"></p>
<ol>
<li>使用 Node.js 執行 ES5 版本的 <code>HelloWorld.js</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 ECMAScript 2015+ 需要 transpile，因此很多人卻步，事實上在 WebStorm 只要配合 File Watcher，就會自動呼叫 Babel 編譯，開發體驗與 ES5 完全一樣</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://blog.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm Blog</a>, <a href="https://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/" target="_blank" rel="external">ECMAScript 6 in WebStorm: Transpiling</a></p>
]]></content>
    <summary type="html">
    <![CDATA[讓 WebStorm 自動編譯 ECMAScript 2015+]]>
    
    </summary>
    
      <category term="ECMAScript" scheme="https://oomusou.io/tags/ECMAScript/"/>
    
      <category term="WebStorm" scheme="https://oomusou.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 DefaultIfEmpty() 取代 null 判斷]]></title>
    <link href="https://oomusou.io/linq/defaultifempty/"/>
    <id>https://oomusou.io/linq/defaultifempty/</id>
    <published>2018-09-06T13:23:43.000Z</published>
    <updated>2018-09-08T02:11:15.000Z</updated>
    <content type="html"><![CDATA[<p>在使用 LINQ 的 <code>Where()</code>，大部分人都會再搭配 <code>FirstOrDefault()</code>，如此 <code>Where()</code> 找不到時就不會拋出 Exception，而是改判斷 <code>null</code> 。</p>
<p>但判斷 <code>null</code> 也不是什麼好事，因為 <code>null</code> 就像癌細胞，只要出現 <code>null</code>，就到處都要判斷 <code>null</code>，而且還很容易忘記判斷 <code>null</code> 導致 run-time 錯誤。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.2</p>
<h2 id="Imperative">Imperative</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> members = <span class="keyword">new</span> List&lt;Member&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"You"</span>, Password = <span class="string">"4567"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> user = <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> member = members</span><br><span class="line">                .Where(x =&gt; x.Username == user.Username &amp;&amp; x.Password == user.Password)</span><br><span class="line">                .FirstOrDefault();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">string</span> result;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (member != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                result = member.Username;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine($<span class="string">"Welcome &#123;result&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = members</span><br><span class="line">  .Where(x =&gt; x.Username == user.Username &amp;&amp; x.Password == user.Password)</span><br><span class="line">  .FirstOrDefault();</span><br></pre></td></tr></table></figure>
<p>大部分人會採用 <code>Where()</code> 搭配 <code>FirstOrDefault()</code> 寫法。</p>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (member != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    result = member.Username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    result = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後再搭配 <code>null</code> 判斷。</p>
<p>這是典型 Imperative 寫法。</p>
<h2 id="FP">FP</h2><hr>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> members = <span class="keyword">new</span> List&lt;Member&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Member &#123;Username = <span class="string">"You"</span>, Password = <span class="string">"4567"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> user = <span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;;</span><br><span class="line"></span><br><span class="line">            members</span><br><span class="line">                .Where(IsMember(user))</span><br><span class="line">                .DefaultIfEmpty(DefaultMember())</span><br><span class="line">                .Select(ToFormat)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line"></span><br><span class="line">            Func&lt;Member, <span class="keyword">bool</span>&gt; IsMember(Member member)</span><br><span class="line">                =&gt; x =&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br><span class="line"></span><br><span class="line">            <span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">ToFormat</span>(<span class="params">Member x</span>) </span>=&gt; $<span class="string">"Welcome : &#123;x.Username&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">members</span><br><span class="line">    .Where(IsMember(user))</span><br><span class="line">    .DefaultIfEmpty(DefaultMember())</span><br><span class="line">    .Select(ToFormat)</span><br><span class="line">    .ToList()</span><br><span class="line">    .ForEach(WriteLine);</span><br></pre></td></tr></table></figure>
<p>一樣使用 <code>Where()</code>，但 <code>IsMember()</code> 為 Higher Order Function，傳入 <code>user</code> 後，會傳回 <code>Where()</code> 所需要的 Predicate Function。</p>
<p>為了避免 <code>Where()</code> 找不到資料，馬上加上 <code>DefaultIfEmpty()</code>，指定什麼叫做 Default，這樣就不用判斷 <code>null</code> 了，找不到的資料就是 Default。</p>
<p>然後執行 <code>Select()</code> 轉換要顯示的格式。</p>
<p>目前為止都屬於 FP 的 Pure Function 部分，沒有 Side Effect。</p>
<p>最後要印出來，屬於 Side Effect 部分，從 <code>IEnumerable</code> 轉成 <code>List</code> ，呼叫 <code>ForEach()</code> 執行 Side Effect 的 <code>WriteLine</code>。</p>
<p>全部以 Data Flow 方式執行，非常漂亮。</p>
<p>27 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Member, <span class="keyword">bool</span>&gt; IsMember(Member member)</span><br><span class="line">    =&gt; x =&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br></pre></td></tr></table></figure>
<p>此為 Higher Order Function，目的在傳回 <code>Func&lt;Member, bool&gt;</code> ，提供 <code>Where()</code> 所需要的 Predicate Function，可傳入任何 user 資料。</p>
<p>30 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">    </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br></pre></td></tr></table></figure>
<p>提供 <code>DefaultIfEmpty()</code> 所需要的 Default Member。</p>
<p>33 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">ToFormat</span>(<span class="params">Member x</span>) </span>=&gt; $<span class="string">"Welcome : &#123;x.Username&#125;"</span>;</span><br></pre></td></tr></table></figure>
<p>提供 <code>Select()</code> 所需要的 Selector Function。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於使用了 <code>DefaultIfEmpty()</code>，我們就不用再判斷 <code>null</code> ，可以使用 FP 的 Data Flow 方式加以處理，完全 Pure Function 沒有 Side Effect，直到最後 <code>Select()</code> 完，才呼叫 <code>ForEach()</code> 執行 Side Effect 的 <code>WriteLine</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LINQDefaultIfEmpty" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[更 FP 的方式使用 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 .NET Core 開發 Web API (GET) ?]]></title>
    <link href="https://oomusou.io/netcore/webapi/get/"/>
    <id>https://oomusou.io/netcore/webapi/get/</id>
    <published>2018-09-06T12:23:43.000Z</published>
    <updated>2018-09-06T10:31:45.000Z</updated>
    <content type="html"><![CDATA[<p>當前後端分離後，後端退守 API，使用 .NET Core 實現 Web API 為最常見的功能，本文將以實務上常使用的 <code>查詢會員</code> 為範例，示範如何實作出 GET action 的 Web API。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>Rider 2018.2<br>Paw 3.1.5</p>
<h2 id="Check_API_(GET)">Check API (GET)</h2><hr>
<h3 id="Is_Member">Is Member</h3><p><img src="/images/netcore/webapi/get/post000.png" alt="post000"></p>
<ol>
<li><p>使用 <code>GET</code>，<code>http://localhost:5001/api/exists/Sam</code> 查詢</p>
</li>
<li><p>回傳</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    exists: "true"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若為會員，會回傳 <code>exists</code> 為 <code>true</code>。</p>
<h3 id="Not_Member">Not Member</h3><p><img src="/images/netcore/webapi/get/post001.png" alt="post001"></p>
<ol>
<li><p>使用 <code>GET</code>，<code>http://localhost:5001/api/exists/Kevin</code></p>
</li>
<li><p>回傳</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     exists: "false"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若為會員，會回傳 <code>exists</code> 為 <code>false</code>。</p>
<p><strong>ExistsController.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Exists.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exists.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [Route(<span class="string">"api/[controller]"</span>)]</span><br><span class="line">    [ApiController]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExistsController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members</span><br><span class="line">            = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GET api/exists/:username</span></span><br><span class="line">        [HttpGet(<span class="string">"&#123;username&#125;"</span>)]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">CheckMember</span>(<span class="params"><span class="keyword">string</span> username</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _members</span><br><span class="line">                .Where(IsMember)</span><br><span class="line">                .DefaultIfEmpty(DefaultMember())</span><br><span class="line">                .Select(Result)</span><br><span class="line">                .First();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>) </span>=&gt; x.Username == username;</span><br><span class="line"></span><br><span class="line">            <span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Response &#123;Exists = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members </span><br><span class="line">    = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>為簡化起見，就沒從 database 判斷 username 與 password，暫時將資料放在 <code>List</code> 內。</p>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HttpGet(<span class="string">"&#123;username&#125;"</span>)]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">CheckMember</span>(<span class="params"><span class="keyword">string</span> username</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>HttpGet</code> attribute 描述 <code>LoginMember</code> 使用 GET action</li>
<li>回傳值 <code>Response</code> 自訂型別，被包在 .NET Core 規定的 <code>ActionResult</code> 內</li>
</ul>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> _members</span><br><span class="line">    .Where(IsMember)</span><br><span class="line">    .DefaultIfEmpty(DefaultMember())</span><br><span class="line">    .Select(Result)</span><br><span class="line">    .First();</span><br></pre></td></tr></table></figure>
<p><code>Where()</code>：判斷資料是否在 <code>List</code> 內</p>
<blockquote>
<p>LINQ 的 <code>Where()</code> 相當於 FP 的 <code>filter()</code></p>
</blockquote>
<p><code>DefaultIfEmpty()</code> ：<code>Where()</code> 一定可能找不到資料，因此會回傳 <code>null</code>，但 <code>null</code> 相當於癌細胞，只要一使用到 <code>null</code>，就必須到處判斷 <code>null</code> ，非常麻煩，而且只要有一個地方沒判斷到 <code>null</code>，程式就可能在 run-time 出錯。</p>
<p>比較好的方式是在 <code>Where()</code> 之後馬上配上 <code>DefaultIfEmpty()</code> 描述，只要 <code>Where()</code> 找不到資料，就不會回傳 <code>null</code>，而是回傳 default object。</p>
<blockquote>
<p><code>DefaultIfEmpty()</code> 就是 LINQ 支援 <strong>Null Object Pattern</strong> / <strong>Default Object Pattern</strong> 的一種實現</p>
</blockquote>
<p><code>Select()</code>：我們要回傳的是 <code>Response</code> 自訂型別，而不是 <code>Member</code> 型別，勢必要做轉換，<code>Select()</code> 幫我們將 <code>Member</code> 自訂型別轉成 <code>Result</code> 自訂型別。</p>
<blockquote>
<p>LINQ 的 <code>Select()</code> 相當於 FP 的 <code>map()</code></p>
</blockquote>
<p><code>First()</code>：別忘了 <code>Select()</code> 的轉換有個特色：原本是 <code>Collection</code>，<code>Select()</code> 之後還是 <code>Collection</code>，但我們要的是 <code>Response</code>，因此使用 <code>First()</code> 只取一筆 <code>Response</code>。</p>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>) </span>=&gt; x.Username == username;</span><br></pre></td></tr></table></figure>
<p><code>IsMember()</code> Local Function，提供 <code>Where()</code> 的 Predicate Function。</p>
<blockquote>
<p>Q : Parameter 使用 <code>x</code> 符合 Clean Code 原則 ?</p>
</blockquote>
<p>Local Function 與 Lambda 強調的就是 function 要短要小，且常常配合 Body Expression，若 parameter 名稱取太長，Lambda 就不美了。</p>
<p>由於 Lambda 來自於數學，一般會採用數學 <code>y = f(x)</code> 習慣，使用 <code>x</code>、<code>y</code>、<code>z</code> 即可。</p>
<p><code>x</code> 會難閱讀嗎 ? 由於 Local Function 與 Lambda 很短，很容易看到看到其型別定義，所以沒有閱讀與維護的問題。</p>
<p>27 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">    </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br></pre></td></tr></table></figure>
<p><code>DefaultMember()</code> Local Function，主要提供 <code>DefaultIfEmpty()</code> 所需要的 default object。</p>
<p>32 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">  </span>=&gt; <span class="keyword">new</span> Response</span><br><span class="line">  &#123;</span><br><span class="line">    Success = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username),</span><br><span class="line">    Username = x.Username</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><code>Result()</code> Local Function，主要提供 <code>Select()</code> 所需要的 data 與型別轉換。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core 提供了  <code>HttpGet</code> attribute，讓我們簡單的將 Controller 的 Method 提供 Web API 的 GET 服務</li>
<li>使用 LINQ 的 <code>Where()</code> 與 <code>DefaultIfEmpty()</code> 讓我們避開 <code>null</code> 魔咒，不用再到處判斷 <code>null</code>，也就是所謂的 Null Object Pattern 或 Default Object Pattern 的實踐</li>
<li>Local Function 與 Lambda 的 parameter 可以打破 OOP 與 Imperative 的習慣，以 <code>x</code>、<code>y</code>、<code>z</code> 命名即可，因為 Lambda 功能都很單一，且 function 很短，不像 Imperative 會拉很長，因此才需要取有意義的 parameter 名稱</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/WebAPIGET" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 GET 實現查詢會員 API]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
      <category term="Web API" scheme="https://oomusou.io/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 .NET Core 開發 Web API (POST) ?]]></title>
    <link href="https://oomusou.io/netcore/webapi/post/"/>
    <id>https://oomusou.io/netcore/webapi/post/</id>
    <published>2018-09-05T12:23:43.000Z</published>
    <updated>2018-09-06T10:34:24.000Z</updated>
    <content type="html"><![CDATA[<p>當前後端分離後，後端退守 API，使用 .NET Core 實現 Web API 為最常見的功能，本文將以實務上常使用的 <code>會員登入</code> 為範例，示範如何實作出 POST action 的 Web API。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>Rider 2018.2<br>Paw 3.1.5</p>
<h2 id="Login_API_(POST)">Login API (POST)</h2><hr>
<h3 id="Login_Success">Login Success</h3><p><img src="/images/netcore/webapi/post/post000.png" alt="post000"></p>
<ol>
<li>使用 <code>POST</code>，<code>http://localhost:5001/api/login</code></li>
<li>傳入 </li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    username: "Sam",</span><br><span class="line">    password: "1234"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>回傳</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    success: "true",</span><br><span class="line">    username: "Sam"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若 login 成功，會回傳 <code>success</code> 為 <code>true</code>，與 <code>username</code> 為 user 名稱。</p>
<h3 id="Login_Failed">Login Failed</h3><p><img src="/images/netcore/webapi/post/post001.png" alt="post001"></p>
<ol>
<li>使用 <code>POST</code>，<code>http://localhost:5001/api/login</code></li>
<li>傳入 </li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    username: "Kevin",</span><br><span class="line">    password: "1234"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>回傳</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    success: "false",</span><br><span class="line">    username: ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若 login 失敗，會回傳 <code>success</code> 為 <code>false</code>，與 <code>username</code> 為 <code>空白</code>。</p>
<p><strong>LoginController.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Login.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Login.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [Route(<span class="string">"api/[controller]"</span>)]</span><br><span class="line">    [ApiController]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members </span><br><span class="line">            = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// POST api/login</span></span><br><span class="line">        [HttpPost]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">LoginMember</span>(<span class="params">[FromBody] Member member</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _members</span><br><span class="line">                .Where(IsMember)</span><br><span class="line">                .DefaultIfEmpty(DefaultMember())</span><br><span class="line">                .Select(Result)</span><br><span class="line">                .First();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>)</span><br><span class="line">                </span>=&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br><span class="line"></span><br><span class="line">            <span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">                </span>=&gt; <span class="keyword">new</span> Response</span><br><span class="line">                &#123;</span><br><span class="line">                    Success = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username),</span><br><span class="line">                    Username = x.Username</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Member&gt; _members</span><br><span class="line">    = <span class="keyword">new</span> List&lt;Member&gt; &#123;<span class="keyword">new</span> Member &#123;Username = <span class="string">"Sam"</span>, Password = <span class="string">"1234"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>為簡化起見，就沒從 database 判斷 username 與 password，暫時將資料放在 <code>List</code> 內。</p>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult&lt;Response&gt; <span class="title">LoginMember</span>(<span class="params">[FromBody] Member member</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>HttpPost</code> attribute 描述 <code>LoginMember</code> 使用 POST action</li>
<li>使用 <code>FromBody</code> attribute 描述 data 來自於 Body，並且自動轉型 <code>Member</code> 自訂型別</li>
<li>回傳值 <code>Response</code> 自訂型別，被包在 .NET Core 規定的 <code>ActionResult</code> 內</li>
</ul>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> _members</span><br><span class="line">    .Where(IsMember)</span><br><span class="line">    .DefaultIfEmpty(DefaultMember())</span><br><span class="line">    .Select(Result)</span><br><span class="line">    .FirstOrDefault();</span><br></pre></td></tr></table></figure>
<p><code>Where()</code>：判斷資料是否在 <code>List</code> 內</p>
<blockquote>
<p>LINQ 的 <code>Where()</code> 相當於 FP 的 <code>filter()</code></p>
</blockquote>
<p><code>DefaultIfEmpty()</code> ：<code>Where()</code> 一定可能找不到資料，因此會回傳 <code>null</code>，但 <code>null</code> 相當於癌細胞，只要一使用到 <code>null</code>，就必須到處判斷 <code>null</code> ，非常麻煩，而且只要有一個地方沒判斷到 <code>null</code>，程式就可能在 run-time 出錯。</p>
<p>比較好的方式是在 <code>Where()</code> 之後馬上配上 <code>DefaultIfEmpty()</code> 描述，只要 <code>Where()</code> 找不到資料，就不會回傳 <code>null</code>，而是回傳 default object。</p>
<blockquote>
<p><code>DefaultIfEmpty()</code> 就是 LINQ 支援 <strong>Null Object Pattern</strong> / <strong>Default Object Pattern</strong> 的一種實現</p>
</blockquote>
<p><code>Select()</code>：我們要回傳的是 <code>Response</code> 自訂型別，而不是 <code>Member</code> 型別，勢必要做轉換，<code>Select()</code> 幫我們將 <code>Member</code> 自訂型別轉成 <code>Result</code> 自訂型別。</p>
<blockquote>
<p>LINQ 的 <code>Select()</code> 相當於 FP 的 <code>map()</code></p>
</blockquote>
<p><code>First()</code>：別忘了 <code>Select()</code> 的轉換有個特色：原本是 <code>Collection</code>，<code>Select()</code> 之後還是 <code>Collection</code>，但我們要的是 <code>Response</code>，因此使用 <code>First()</code> 只取一筆 <code>Response</code>。</p>
<p>25 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsMember</span>(<span class="params">Member x</span>)</span><br><span class="line">    </span>=&gt; x.Username == member.Username &amp;&amp; x.Password == member.Password;</span><br></pre></td></tr></table></figure>
<p><code>IsMember()</code> Local Function，提供 <code>Where()</code> 的 Predicate Function。</p>
<blockquote>
<p>Q : Parameter 使用 <code>x</code> 符合 Clean Code 原則 ?</p>
</blockquote>
<p>Local Function 與 Lambda 強調的就是 function 要短要小，且常常配合 Body Expression，若 parameter 名稱取太長，Lambda 就不美了。</p>
<p>由於 Lambda 來自於數學，一般會採用數學 <code>y = f(x)</code> 習慣，使用 <code>x</code>、<code>y</code>、<code>z</code> 即可。</p>
<p><code>x</code> 會難閱讀嗎 ? 由於 Local Function 與 Lambda 很短，很容易看到看到其型別定義，所以沒有閱讀與維護的問題。</p>
<p>28 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Member <span class="title">DefaultMember</span>(<span class="params"></span>)</span><br><span class="line">    </span>=&gt; <span class="keyword">new</span> Member &#123;Username = <span class="keyword">string</span>.Empty, Password = <span class="keyword">string</span>.Empty&#125;;</span><br></pre></td></tr></table></figure>
<p><code>DefaultMember()</code> Local Function，主要提供 <code>DefaultIfEmpty()</code> 所需要的 default object。</p>
<p>31 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Response <span class="title">Result</span>(<span class="params">Member x</span>)</span><br><span class="line">  </span>=&gt; <span class="keyword">new</span> Response</span><br><span class="line">  &#123;</span><br><span class="line">    Success = !<span class="keyword">string</span>.IsNullOrEmpty(x.Username),</span><br><span class="line">    Username = x.Username</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p><code>Result()</code> Local Function，主要提供 <code>Select()</code> 所需要的 data 與型別轉換。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core 提供了  <code>HttpPost</code> attribute 與  <code>FromBody</code> attribute，讓我們簡單的將 Controller 的 Method 提供 Web API 的 POST 服務</li>
<li>使用 LINQ 的 <code>Where()</code> 與 <code>DefaultIfEmpty()</code> 讓我們避開 <code>null</code> 魔咒，不用再到處判斷 <code>null</code>，也就是所謂的 Null Object Pattern 或 Default Object Pattern 的實踐</li>
<li>Local Function 與 Lambda 的 parameter 可以打破 OOP 與 Imperative 的習慣，以 <code>x</code>、<code>y</code>、<code>z</code> 命名即可，因為 Lambda 功能都很單一，且 function 很短，不像 Imperative 會拉很長，因此才需要取有意義的 parameter 名稱</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/WebAPIPOST" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 POST 實現會員登入 API]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
      <category term="Web API" scheme="https://oomusou.io/tags/Web-API/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何不啟用 SonarQube 內建的 Rule ?]]></title>
    <link href="https://oomusou.io/sonarqube/deactivate-rule/"/>
    <id>https://oomusou.io/sonarqube/deactivate-rule/</id>
    <published>2018-09-03T12:23:43.000Z</published>
    <updated>2018-09-03T07:18:41.000Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 內建很多檢查 rule，但有些 rule 可能不適合團隊，暫時不想啟用，該如何在 SonarQube 設定呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.06.1-ce-mac59 (26764)<br>SonarQube 7.1 (build 11001)</p>
<h2 id="Rules">Rules</h2><hr>
<p><img src="/images/sonarqube/deactivate-rule/rule000.png" alt="rule000"></p>
<p><strong><em>Rule -&gt; C#</em></strong></p>
<p>若第一個 rule :  <code>=+ should not be used instead of +=</code>  不適合團隊，想暫時不啟用檢查。</p>
<blockquote>
<p>並不是這個 rule 不好，只是因為是第一個 C# rule，所以以此為範例</p>
</blockquote>
<p>SonarQube 舊版允許你直接不啟用某個 rule，但新版取消了這個功能，無法直接不啟用。</p>
<h2 id="Quality_Profiles">Quality Profiles</h2><hr>
<p><img src="/images/sonarqube/deactivate-rule/rule001.png" alt="rule001"></p>
<p><strong><em>Quality Profiles -&gt; C#</em></strong></p>
<p>SonarQube 預設使用的 Quality Profile 是 <code>Sonar way</code>，目前 <code>Sonar way</code> 無法取消 rule。</p>
<p>若要取消 rule，必須建立自己的 Quality Profile，然後才能取消。</p>
<p><img src="/images/sonarqube/deactivate-rule/rule002.png" alt="rule002"></p>
<ul>
<li>選擇右側  <code>option</code> 的 <code>Copy</code></li>
</ul>
<p><img src="/images/sonarqube/deactivate-rule/rule003.png" alt="rule003"></p>
<ol>
<li>輸入新的 Quality Profile 名稱</li>
<li>按 <code>Copy</code> 確定</li>
</ol>
<p><img src="/images/sonarqube/deactivate-rule/rule004.png" alt="rule004"></p>
<p><strong><em>Quality Profiles -&gt; C#</em></strong></p>
<ul>
<li>選擇 <code>My way</code>，選擇右側  <code>option</code> 的 <code>Set as Default</code></li>
</ul>
<p><img src="/images/sonarqube/deactivate-rule/rule005.png" alt="rule005"></p>
<ul>
<li><code>My way</code> 成為 C# project 預設的 Quality Profile</li>
</ul>
<h2 id="Deactivate_Rule">Deactivate Rule</h2><hr>
<p><img src="/images/sonarqube/deactivate-rule/rule006.png" alt="rule006"></p>
<p><strong><em>Quality Profiles -&gt; C#</em></strong></p>
<ul>
<li>點擊 <code>My way</code> Quality Profile</li>
</ul>
<p><img src="/images/sonarqube/deactivate-rule/rule007.png" alt="rule007"></p>
<ol>
<li>點擊 <code>Active</code> 下所有的 rule</li>
</ol>
<p><img src="/images/sonarqube/deactivate-rule/rule008.png" alt="rule008"></p>
<ol>
<li>找到我們想取消的 <code>=+ should not be used instead of +=</code> rule</li>
<li>按 <code>Deactivate</code> 取消</li>
</ol>
<p><img src="/images/sonarqube/deactivate-rule/rule009.png" alt="rule009"></p>
<ol>
<li><code>=+ should not be used instead of +=</code> rule 已被 <code>Deactivate</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>原本認為很簡單的功能，但因為 SonarQube 的設計有改變，竟然花了一些時間才搞定，特別記錄下來</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[SonarQube 無法修改預設的 Sonar way]]>
    
    </summary>
    
      <category term="SonarQube" scheme="https://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[將 Using Statement 重構成 Using() Function]]></title>
    <link href="https://oomusou.io/fp/using/"/>
    <id>https://oomusou.io/fp/using/</id>
    <published>2018-08-21T12:23:43.000Z</published>
    <updated>2018-08-21T13:51:56.000Z</updated>
    <content type="html"><![CDATA[<p>C# 有個著名的 <code>using</code> statement，對於實踐 <code>IDisposable</code> 的物件特別好用，但 <code>using</code> 是個 statement，在 Imperative 世界沒問題，但在 Functional 世界，statement 就類似 <code>句點</code>，讓我們無法繼續 Pipeline 或對其他 function 做 Compose，我們能否比照將 <code>foreach</code> statement 重構成 <code>ForEach()</code> function，也將 <code>using</code> statement 重構成 <code>using()</code> function 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>F# 4.5<br>Rider 2018.1.4</p>
<h2 id="C#_之_Using_Statement">C# 之 Using Statement</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> streamReader = <span class="keyword">new</span> StreamReader(<span class="string">"TestFile.txt"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> line = streamReader.ReadToEnd();</span><br><span class="line">                Console.WriteLine(line);</span><br><span class="line">                <span class="comment">// Hello World</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>StreamReader</code> 是個典型實踐 <code>IDisposable</code> 的物件，所以在使用時都會使用 <code>using statement</code> 包起來，等離開 <code>{}</code> scope 時，自動呼叫 <code>Dispose()</code> 釋放 resource。</p>
<p>這些都是我們都習慣的 C#。</p>
<p>但 <code>using</code> 是 statement，在 Imperative 世界沒問題，反正程式碼都是一行一行循序執行。</p>
<p>但在 Functional 世界，我們要求 code 要 Pipeline，要 Compose，所以 FP 喜歡使用 expression，不喜歡 statement。</p>
<p>Statemet 就類似 <code>句點</code>，讓所有的 Pipeline 都中斷了。</p>
<p>其實仔細看 <code>using</code> statement，其實包含幾個部分：</p>
<ul>
<li><strong>Setup</strong> : 獲得 resource</li>
<li><strong>Body</strong> : 執行 resource </li>
<li><strong>Teardown</strong> : 釋放 resource</li>
</ul>
<p>其中 <code>using</code> statement 就是幫我們做 teardown 部分。</p>
<p>因此我們可以自己寫一個 <code>Using()</code> function，將 setup 與 body 傳入 <code>Using()</code>。</p>
<h2 id="C#_之_Using()_Function">C# 之 Using() Function</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> Functional.F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Using(<span class="keyword">new</span> StreamReader(<span class="string">"TestFile.txt"</span>), ReadFile)</span><br><span class="line">                .WriteLine();</span><br><span class="line">                       </span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">ReadFile</span>(<span class="params">StreamReader streamReader</span>) </span>=&gt; streamReader.ReadToEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Using(<span class="keyword">new</span> StreamReader(<span class="string">"TestFile.txt"</span>), ReadFile)</span><br><span class="line">	.WriteLine();</span><br></pre></td></tr></table></figure>
<p>使用 <code>Using()</code> function，將 setup 傳入第一個參數，將 body 傳入第二個參數。</p>
<p>由於 <code>ReadFile()</code> 回傳為 <code>string</code>，因此 <code>Using()</code> 也是回傳 <code>string</code>，這樣就可以使用 Pipeline 方式 <code>WriteLine()</code> 直接印出。</p>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">ReadFile</span>(<span class="params">StreamReader streamReader</span>) </span>=&gt; streamReader.ReadToEnd();</span><br></pre></td></tr></table></figure>
<p>Body 以 local function 定義。</p>
<p>至於 <code>Using()</code> 與 <code>WriteLine()</code> 怎麼來的呢 ? 是我們自己寫的 Higher Order Function。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Functional</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">F</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> R Using&lt;TDisp, R&gt;(TDisp disposable, Func&lt;TDisp, R&gt; f) <span class="keyword">where</span> TDisp : IDisposable</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (disposable) <span class="keyword">return</span> f(disposable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLine</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> data</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.WriteLine(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> R Using&lt;TDisp, R&gt;(TDisp disposable, Func&lt;TDisp, R&gt; f) <span class="keyword">where</span> TDisp : IDisposable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (disposable) <span class="keyword">return</span> f(disposable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己寫一個 <code>Using()</code> HOF，第一個參數傳入 <code>IDisposable</code> 物件，第二個參數傳入 body function。</p>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLine</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> data</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    Console.WriteLine(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己為 <code>string</code> 加上 <code>WriteLine()</code> Extension Method，這就就可以對 <code>string</code> 繼續 Pipeline 印出。</p>
<blockquote>
<p>C# 為了讓 <code>using</code> 用起來更 FP，我們必須自己實作 <code>Using()</code> 與 <code>WriteLine()</code>，但在 Functional First 的 F#，除了提供 Imperative 的 <code>use</code> 外，也提供了 Functional 的 <code>using()</code>，我們完全不用自己另外實作</p>
</blockquote>
<h2 id="F#_之_Use_Bind">F# 之 Use Bind</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFromFile (fileName: string) = </span><br><span class="line">    <span class="keyword">use</span> streamReader = <span class="keyword">new</span> StreamReader(fileName)</span><br><span class="line">    streamReader.ReadToEnd()</span><br><span class="line">    </span><br><span class="line">readFromFile <span class="string">"TestFile.txt"</span></span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br></pre></td></tr></table></figure>
<p>F# 之 <code>use</code> 類似於 <code>let</code>，差別是 <code>use</code> 在離開 function 就會呼叫 <code>Dispose()</code>，不需特別加上 <code>{}</code> 縮排一層。</p>
<p>由於 <code>readFromFile()</code> 回傳 <code>string</code>，可以直接 Pipeline 接內建的 <code>printf()</code>。</p>
<p>但 <code>use</code> 仍然是個 statement。</p>
<h2 id="F#_之_Using()_Function">F# 之 Using() Function</h2><hr>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile (streamReader: StreamReader) =</span><br><span class="line">    streamReader.ReadToEnd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFromFile (fileName: string) =</span><br><span class="line">    using(<span class="keyword">new</span> StreamReader(fileName)) readFile </span><br><span class="line">    </span><br><span class="line">readFromFile <span class="string">"TestFile.txt"</span></span><br><span class="line">|&gt; printf <span class="string">"%A"</span></span><br></pre></td></tr></table></figure>
<p>第 6 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> readFromFile (fileName: string) =</span><br><span class="line">    using(<span class="keyword">new</span> StreamReader(fileName)) readFile</span><br></pre></td></tr></table></figure>
<p>改用 F# 內建的 <code>using()</code>，第一個參數傳入 <code>IDisposable</code> 物件，第二個參數傳入 body function，其實跟自己用 C# 實作的 <code>Using()</code> 是一樣的。</p>
<p>第 3 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> readFile (streamReader: StreamReader) =</span><br><span class="line">    streamReader.ReadToEnd()</span><br></pre></td></tr></table></figure>
<p>定義 body function。</p>
<blockquote>
<p>由於 <code>using()</code> 與 <code>printf()</code> 都是 F# 內建，因此我們就不必再自己實作了</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>將 C# 由 <code>using</code> statement 改成 <code>using()</code> function，乍看之下意義不大；但若去看 F# 同時提供 <code>use</code> statement 與 <code>using()</code> function 時，就可看出 F# 的用心良苦，同時支援了 Imperative 與 Functional 兩種 paradigm</li>
<li>由於 F# 每個 function 都是 composable，因此我們就不必再自已寫 <code>WriteLine()</code> 了，直接 <code>printf()</code> 就可以 pipeline 起來</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<ul>
<li>C# : 完整的範例可以在我的 <a href="https://github.com/oomusou/CSharpUsing" target="_blank" rel="external">GitHub</a> 上找到</li>
<li>F# : 完整的範例可以在我的 <a href="https://github.com/oomusou/FSharpUsing" target="_blank" rel="external">GitHub</a> 上找到</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使 using 更適合 FP 操作]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="F#" scheme="https://oomusou.io/tags/F/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 FP 之 Higher Order Function]]></title>
    <link href="https://oomusou.io/fp/hof/"/>
    <id>https://oomusou.io/fp/hof/</id>
    <published>2018-08-19T12:23:43.000Z</published>
    <updated>2018-08-21T12:58:01.000Z</updated>
    <content type="html"><![CDATA[<p>Higher Order Function (HOF) 可以說是 FP 的精華，就算是目前主流 OOP，也大都接受了 HOF 概念，但實務上要活用 HOF 並不容易，需要時間與訓練，本文整理出實務上最常使用 HOF 的 4 種 Pattern，讓大家更容易運用在日常開發中。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>C# 7.2</p>
<blockquote>
<p>本文為 <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Funtional Programming in C#</a> 一書第一章的讀後心得</p>
</blockquote>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p><strong>Higher Order Function</strong> </p>
<ul>
<li>以 function 作為 function 的 input</li>
<li>以 function 作為 function 的 outpt</li>
<li>符合以上其中之一條件就算 Higer Order Function，簡稱 <strong>HOF</strong></li>
</ul>
</blockquote>
<p>在 C# 中，最典型的 HOF 就是 LINQ，如最常用的 <code>Select()</code>、<code>Where()</code> 就是 HOF。</p>
<blockquote>
<p>本文將以 HOF 稱呼 Higher Order Function</p>
</blockquote>
<h2 id="實務上的應用">實務上的應用</h2><hr>
<p>HOF 在實務上可歸納出以下 4 種 Pattern：</p>
<ul>
<li><p>Inversion of Control</p>
</li>
<li><p>Adapter Function</p>
</li>
<li><p>Function Factory</p>
</li>
<li><p>To Avoid Duplication</p>
</li>
</ul>
<h2 id="Inversion_of_Control">Inversion of Control</h2><hr>
<blockquote>
<p><strong>Inversion of Control</strong></p>
<p>原本由高階模組決定 <code>控制流程</code>，改成由 <code>低階模組</code> 決定 <code>控制流程</code>，高階模組只決定 <code>實作部分</code></p>
<p>可將 <code>控制流程</code> 寫成 Library 或 Framework，實現 Separation of Concerns (關注點分離)：低階模組關注於 <code>控制流程</code>，而高階模組專心於 <code>實作部分</code></p>
<p>HOF 目的在實現 Inversion of Control</p>
</blockquote>
<p>以 LINQ 的 <code>Where()</code> 為例 (相當於 FP 的 <code>Filter()</code>) </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Where&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; data, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(T iter <span class="keyword">in</span> data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>低階模組 LINQ 的 <code>Where</code> 決定了整個 <code>控制流程</code>，包含 <code>foreach</code> 與 <code>if</code>， 高階模組只決定 predicate 的 <code>實作部分</code>，這就是 Inversion of Control。</p>
<p><img src="/images/fp/hof/hof000.png" alt="hof000"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Cache&lt;T&gt; where T : class</span><br><span class="line">&#123;</span><br><span class="line">    public T Get(Guid id) =&gt; ...</span><br><span class="line">        </span><br><span class="line">    public T Get(Guid id, Func&lt;T&gt; onMiss) =&gt; Get(id) ?? onMiss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若可由 Guid 對 <code>Cache</code> 抓資料，若有資料則從 Cache 傳回，若沒資料則執行高階模組提供的 function。</p>
<p>我們可發現低階模組 <code>Cache</code> 決定 <code>控制流程</code>，高階模組則提供 <code>onMiss</code> function 的實作，可能是複雜的演算法計算，也可能是實際從資料庫抓資料。</p>
<p>HOF 最常使用的場景就是為了實現 Inversion of Control。</p>
<blockquote>
<p>IoC 與 DIP (Dependency Inversion Principle 依賴反轉原則) 並不一樣，IoC 強調的是 <code>控制流程</code> 的反轉，而 DIP 強調的是藉由 interface 達到 <code>依賴</code> 的反轉</p>
</blockquote>
<h2 id="Adapter_Function">Adapter Function</h2><hr>
<blockquote>
<p><strong>Adapter Function</strong></p>
<p>HOF 的目的在於改變 function 的 Signature</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span>=&gt; x / y;</span><br><span class="line"><span class="keyword">var</span> result = divide(<span class="number">10</span>, <span class="number">2</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>原本  <code>divide()</code> 的 <code>被除數</code> 是 <code>x</code>，<code>除數</code> 是 <code>y</code>。</p>
<p>因為需求改變，<code>被除數</code> 改成 <code>y</code>，而 <code>除數</code> 改成 <code>x</code>，也就是 Signature 會改變，argument 會對調。</p>
<p>當然可以直接修改 code，基於 <code>開放封閉原則</code>，且這也是常見的需求，決定將此功能 <code>一般化</code>，將寫一個 function 來處理。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Func&lt;T2, T1, R&gt; SwapArgs&lt;T1, T2, R&gt;(<span class="keyword">this</span> Func&lt;T1, T2, R&gt; f)</span><br><span class="line">    =&gt; (t2, t1) =&gt; f(t1, t2);</span><br></pre></td></tr></table></figure>
<p><code>SwapArgs()</code> 回傳一個新的 function，其 argument 由原本的 <code>(t1, t2)</code> 改成 <code>(t2, t1)</code>。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divideBy = divide.SwapArgs();</span><br><span class="line"><span class="keyword">var</span> result = divideBy(<span class="number">2</span>, <span class="number">10</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 OOP 中，若 Interface 不同，我們會使用 Adapter Pattern，將 interface 加以轉換</li>
<li>在 FP 中，Function Signature 就是 Interface，若 Signature 不同，我們可使用 HOF 加以轉換，也稱為 Adapter Function</li>
</ul>
<h2 id="Function_Factory">Function Factory</h2><hr>
<blockquote>
<p><strong>Function Factory</strong></p>
<p>HOF 的目的就是建立新的 function</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = Enumerable.Range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                     .Where(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"><span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>
<p>目前只能找出 <code>偶數</code>，也就是 <code>除以 2</code> 整除。</p>
<p>若我們想讓功能更 <code>一般化</code>，能找出 <code>除以 n</code> 整除的資料。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; isMod(<span class="keyword">int</span> n) =&gt; x =&gt; x % n == <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> data1 = Enumerable.Range(<span class="number">1</span>, <span class="number">10</span>).Where(isMod(<span class="number">2</span>)); <span class="comment">// 2, 4, 6, 8, 10</span></span><br><span class="line"><span class="keyword">var</span> data2 = Enumerable.Range(<span class="number">1</span>, <span class="number">10</span>).Where(isMod(<span class="number">3</span>)); <span class="comment">// 3, 6, 9</span></span><br></pre></td></tr></table></figure>
<p><code>isMod()</code> HOF 不只更 <code>一般化</code>，<code>可讀性</code> 也更高。</p>
<p><code>isMod()</code> HOF 目的並不是回傳 data，而是回傳 <code>Where()</code> 所需要的 function。</p>
<p><img src="/images/fp/hof/hof001.png" alt="hof001"></p>
<h2 id="To_Avoid_Duplication">To Avoid Duplication</h2><hr>
<blockquote>
<p><strong>To Avoid Duplication</strong></p>
<p>HOF 的目的在抽出程式碼共用部分</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Foo1</span>(<span class="params">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f1, ...</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> x = f1(...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Foo2</span>(<span class="params">Func&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f2, ...</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> x = f2(...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實務上常會發現不同 function，前面 setup 部分都相同，最後 teardown 部分也相同，只有中間 body 部分不同，這種時機就很適合使用 HOF，將共用部分抽出來。</p>
<p><strong>將 Setup / Teardown 抽成共用</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbLogger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> connString;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateLog</span>(<span class="params">LogMessage logMessage</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            conn.Execute(<span class="string">"sp_create_log"</span>, logMessage, CommandType.StoredProcedure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;LogMessage&gt; <span class="title">GetLogs</span>(<span class="params">DateTime since</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            conn.Query&lt;LogMessage&gt;(<span class="string">@"SELECT * FROM [Logs] WHERE [Timestamp] &gt; @since"</span>, <span class="keyword">new</span> &#123;since = since&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我們可以發現 <code>CreateLog()</code> 與 <code>GetLogs()</code> 在 <code>using</code> 部份有重複，因此可以建立 HOF 將共用部分抽出來。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConnectionHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R Connect&lt;R&gt;(<span class="keyword">string</span> connString, Func&lt;IDbConnection, R&gt; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">return</span> f(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>ConnectionHelper.Connect()</code> HOF，將 <code>CreateLog()</code> 與  <code>GetLogs()</code> 共用部分抽出來。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> ConnectionHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbLogger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> connString;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateLog</span>(<span class="params">LogMessage logMessage</span>)</span><br><span class="line">        </span>=&gt; Connect(connString, c =&gt; c.Execute(<span class="string">"sp_create_log"</span>, logMessage, CommandType.StoredProcedure));</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;LogMessage&gt; <span class="title">GetLogs</span>(<span class="params">DateTime since</span>)</span><br><span class="line">        </span>=&gt; Connect(connString, c =&gt; c.Query&lt;LogMessage&gt;(<span class="string">@"SELECT * FROM [Logs] WHERE [Timestamp] &gt; @since"</span>, <span class="keyword">new</span> &#123;since = since&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽出共用到 <code>ConnectionHelper</code> 之後，<code>DbLogger</code> 就不再有程式碼重複的部分。</p>
<blockquote>
<p>實務上常將程式碼中 setup 與 teardown 部分抽成 HOF 共用</p>
</blockquote>
<p><strong>將 using 重構成 HOF</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">static</span> <span class="title">class</span> <span class="title">ConnectionHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R Connect&lt;R&gt;(<span class="keyword">string</span> connString, Func&lt;IDbConnection, R&gt; f)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> SqlConnection(connString))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">return</span> f(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>using</code> 為 C# 內建的 statement，其實仔細一看，<code>using</code> 也是在做 setup 與 teardown 的事情：</p>
<ul>
<li><strong>Setup</strong> : 獲得 <code>IDisposable</code> resource</li>
<li><strong>Body</strong> : 執行 <code>{}</code> 內的程式碼</li>
<li><strong>Teardown</strong>：呼叫 <code>Dispose()</code> 釋放 resource</li>
</ul>
<p>我們可以也可以比照將 <code>foreach</code> statement 重構成 <code>ForEach()</code> function，將 <code>using</code> statement 重構成 <code>Using()</code> function。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LaYumba.Functional</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">F</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> R Using&lt;TDisp, R&gt;(TDisp disposable, Func&lt;TDisp, R&gt; f) <span class="keyword">where</span> TDisp : IDisposable</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span>(disposable) <span class="keyword">return</span> f(disposable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>Using()</code> 建立在自己的 Functional Library 內。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> LaYumba.Functional.F;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConnectionHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R Connect&lt;R&gt;(<span class="keyword">string</span> connString, Func&lt;IDbConnection, R&gt; f)</span><br><span class="line">        =&gt; Using(<span class="keyword">new</span> SqlConnection(connStr), conn =&gt; &#123; conn.Open(); <span class="keyword">return</span> f(conn); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>using</code> 由 statement 重構成 <code>Using()</code> function 後，有幾個優點 :</p>
<ul>
<li><code>Connect()</code> 程式碼更加簡潔，可以使用 Expression Body</li>
<li><code>Using()</code> 是 function，不是 statement，因此能夠再與其他 function 作 compose</li>
</ul>
<h2 id="HOF_的優點與缺點">HOF 的優點與缺點</h2><hr>
<p><strong>優點</strong></p>
<ul>
<li><strong>Conciseness</strong> : 使用 function 後，能夠再與其他 function 作 compose，幾乎都是一行就能解決，這也是為什麼 C# 要全面提供 Expression Body</li>
<li><strong>Avoid Duplication</strong> : Setup 與 teardown 的邏輯不再重複</li>
<li><strong>Separation of Concerns</strong> : <code>ConnectionHelper</code> 關注 connection 管理；而 <code>DbLogger</code> 關注於 log 相關邏輯</li>
</ul>
<p><strong>缺點</strong><br><img src="/images/fp/hof/hof002.png" alt="hof002"></p>
<ul>
<li>HOF 會使得 call stack 增加，可能會對效能有所影響，不過這是 CPU 層級，差異只是在幾個 clock cycle，所以可以忽略不計</li>
<li>由於 call stack 的增加，debug 會比較複雜</li>
</ul>
<p>不過 HOF 所帶給我們的優點，仍然是一個值得投資 trade off。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>HOF 已經是算是目前所有程式語言都能接受的觀念，儘管是 OOP，也都能夠接受 HOF</li>
<li>過度使用 HOF 反而會使得 code 過度抽象化而難以理解，記得要以 <code>可讀性</code> 為前提，適當地使用 HOF</li>
<li>HOF 雖然可能造成 call stack 增加而難以 debug，但 HOF 所帶來的優點更多，仍然值得投資</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[歸納出 HOF 常用的 4 種 Pattern]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何執行 Haskell Script ?]]></title>
    <link href="https://oomusou.io/haskell/ghc/"/>
    <id>https://oomusou.io/haskell/ghc/</id>
    <published>2018-08-18T15:23:43.000Z</published>
    <updated>2018-08-19T00:31:22.000Z</updated>
    <content type="html"><![CDATA[<p>GHC 是 Haskell 最有名的 compiler，除了可編譯 Haskell 外，還提供了 REPL 與 Script 模式，讓我們甚至可以直接寫  Haskell Script，非常有趣。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>GHC 8.4.3</p>
<h2 id="安裝_GHC">安裝 GHC</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install ghc</span><br></pre></td></tr></table></figure>
<p>使用 Homebew 安裝 GHC。</p>
<h2 id="REPL_執行_Haskell">REPL 執行 Haskell</h2><hr>
<p><strong>修改 Prompt</strong></p>
<p>預設 prompt 為 <code>Prelude&gt;</code>，可自行修改成 <code>ghci&gt;</code>。</p>
<p><strong>.ghci</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="operator"><span class="keyword">set</span> <span class="keyword">prompt</span> <span class="string">"ghci&gt; "</span></span></span><br></pre></td></tr></table></figure>
<p>在 home directory 建立 <code>.ghci</code>，設定 prompt 為 <code>ghci</code>。</p>
<p><img src="/images/haskell/ghc/ghc000.png" alt="ghc000"></p>
<p><strong>執行 GHCi</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ghci</span><br></pre></td></tr></table></figure>
<p>輸入 ghci 執行 GHC 的 REPL 模式。</p>
<p><img src="/images/haskell/ghc/ghc001.png" alt="ghc001"></p>
<ol>
<li>輸入 <code>ghci</code></li>
<li>在 REPL 模式輸入 <code>putStrLn &quot;Hello World&quot;</code> 顯示 <code>Hello World</code></li>
</ol>
<p><strong>離開 GHCi</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ghci</span>&gt; <span class="pseudo">:quit</span></span><br></pre></td></tr></table></figure>
<p>輸入 <code>:quit</code> 離開 GHCi。</p>
<p><img src="/images/haskell/ghc/ghc002.png" alt="ghc002"></p>
<h2 id="編譯執行_Haskell">編譯執行 Haskell</h2><hr>
<p>GHC 可將 Haskell 編譯成執行檔執行。</p>
<p><strong>建立 Hello World</strong></p>
<p><strong>hello-world.hs</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = putStrLn <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p>以 Haskell 印出簡單的 <code>Hello World</code>。</p>
<p><strong>GHC 編譯</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ghc -o hello-world ./hello-world.hs</span><br></pre></td></tr></table></figure>
<p>使用 <code>ghc</code> 編譯 <code>hello-world.hs</code>。</p>
<ul>
<li><strong>-o</strong> : <code>o</code> utput 執行檔的檔名</li>
</ul>
<p><img src="/images/haskell/ghc/ghc003.png" alt="ghc003"></p>
<p><img src="/images/haskell/ghc/ghc004.png" alt="ghc004"></p>
<ol>
<li>編譯出 <code>hello-world</code> 執行檔，也一併編譯出 <code>.hi</code>、<code>.hs</code> 與 <code>.o</code> 等中間檔</li>
</ol>
<p><strong>執行 Hello World</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./hello-world</span><br></pre></td></tr></table></figure>
<p>直接執行 <code>hello-world</code> 執行檔。</p>
<p><img src="/images/haskell/ghc/ghc005.png" alt="ghc005"></p>
<h2 id="Script_執行_Haskell">Script 執行 Haskell</h2><hr>
<p>Haskell 也可以不用編譯，直接以 Script 形式執行。</p>
<p><strong>建立 Hello World Script</strong></p>
<p><strong>hello-world.hs</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#!/usr/bin/env runghc --</span></span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = putStrLn <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/ghc/ghc006.png" alt="ghc006"></p>
<p><strong>設定執行權限</strong></p>
<p>Script 要能執行，必須先設定其有被執行權限。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x hello-world.hs</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 設定 <code>hello-world.hs</code> 能被執行。</p>
<p><img src="/images/haskell/ghc/ghc007.png" alt="ghc007"></p>
<ol>
<li><code>紅色</code> 代表有執行權限。</li>
</ol>
<p><strong>執行 Hello World Script</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>./hello-world.hs</span><br></pre></td></tr></table></figure>
<p>直接執行 <code>hello-world.hs</code>。</p>
<p><img src="/images/haskell/ghc/ghc008.png" alt="ghc008"></p>
<p>為了證明 GHC 沒有偷偷編譯，我們來看一下目前目錄。</p>
<p><img src="/images/haskell/ghc/ghc009.png" alt="ghc009"></p>
<ol>
<li>仍然只有 <code>hello-world.hs</code>，證明 GHC 沒有偷偷編譯再執行</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Haskell 除了可編譯外，尚提供 REPL 與 Script</li>
<li>尤其是 Haskell Script，讓 Haskell 的可用性又更上一層樓</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Haskell 除了編譯，也提供 REPL 與 Script]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 FP 之 Yield 與 Lazy Evaluation]]></title>
    <link href="https://oomusou.io/fp/lazy-evaluation/"/>
    <id>https://oomusou.io/fp/lazy-evaluation/</id>
    <published>2018-08-18T12:23:43.000Z</published>
    <updated>2018-08-18T15:38:23.000Z</updated>
    <content type="html"><![CDATA[<p>為了使 function 重複使用能力更高，我們會盡量將 function 寫成 composable function，但也因為如此，我們需要將處理完的 data 傳遞給下一個 function，而 function 之間不斷地傳遞 data，是執行效能殺手；而 <code>Yield</code> 與 <code>Lazy Evaluation</code> 讓我們 function 之間不需傳遞 data，大幅提高執行效能。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.4</p>
<h2 id="Composable_Function">Composable Function</h2><hr>
<p>一個 function 若要能跟其他 function 完美組合，需達成 4 個條件：</p>
<ul>
<li><strong>Pure</strong> : function 不能有 Side Effect</li>
<li><strong>Chainable</strong> : 也就是 Pipeline，讓 data 以 Dataflow 方式一直流下去</li>
<li><strong>General</strong> : function 要越 <code>一般化</code>，越 <code>針對性</code> 則越難 Compose 重複使用</li>
<li><strong>Shape-preserving</strong> : funciton 要能保持原本資料結構，才能在相同型別下繼續 Compose 與 Pipeline</li>
</ul>
<p>也因為 Chainable 與 Shape-preserving，我們需要在 function 之間不斷的傳遞 data，則必須在記憶體建立一份 data，然後將 data 複製一份到記憶體其他地方，這會大幅影響執行效能，這也是 FP 一開始最被人詬病之處。</p>
<p>但 FP 引進 Lazy Evaluation 觀念之後，data 要不斷複製的問題得到解決；在 C# 2.0 是以 <code>yield</code> 實現 Lazy Evaluation。</p>
<h2 id="無_Lazy_Evaluation">無 Lazy Evaluation</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .Each(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">                result.Add(mapper(iter));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">                <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Add(iter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Each&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Each : "</span> + iter);</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">        .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        .Each(WriteLine);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p>假設我們自行實現 <code>Map()</code> 與 <code>Filter()</code> ，則結果如預期為 <code>6</code> 與 <code>9</code>。</p>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">        result.Add(mapper(iter));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們會先建立一個新的 <code>List</code>，並將 <code>mapper()</code> 結果新增至 <code>List</code>，最後再 return <code>List</code>。</p>
<p>這是典型 Imperative 常用手法。</p>
<p>30 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            result.Add(iter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也一樣建立一個新 <code>List</code>，根據 <code>predicate()</code> 篩選後的結果新增至 List，最後再 return <code>List</code>。</p>
<p>也一樣是 Imperative 常用手法。</p>
<p><img src="/images/fp/lazy-evaluation/yield000.png" alt="yield000"></p>
<p>執行結果也如預期，先執行完 <code>Map()</code>，再執行 <code>Filter()</code>，最後 <code>Each()</code>。</p>
<p>目前的 <code>Map()</code> 與 <code>Filter()</code>，已經達成 Composable Function 的要求，只是執行效率並不好，因為 <code>Map()</code> 與 <code>Filter()</code> 都要不斷建立新的 <code>List</code>，並傳回 <code>List</code>，這些操作都不是在 CPU，而是在記憶體，因此會是效能瓶頸。</p>
<h2 id="有_Lazy_Evaluation">有 Lazy Evaluation</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Map(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Filter(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .Each(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">                <span class="function"><span class="keyword">yield</span> return <span class="title">mapper</span>(<span class="params">iter</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">                <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> Each&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                WriteLine(<span class="string">"Each : "</span> + iter);</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Map&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, T&gt; mapper)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Map : "</span> + iter);</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> return <span class="title">mapper</span>(<span class="params">iter</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>List</code> 拿掉，將新增至 <code>List</code> 重構成 <code>yield</code>。</p>
<p>26 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;T&gt; Filter&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; list, Func&lt;T, <span class="keyword">bool</span>&gt; predicate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteLine(<span class="string">"Filter : "</span> + iter);</span><br><span class="line">        <span class="keyword">if</span> (predicate(iter))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> iter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>List</code> 拿掉，將新增至 <code>List</code> 重構成 <code>yield</code>。</p>
<p><img src="/images/fp/lazy-evaluation/yield001.png" alt="yield001"></p>
<p>執行結果完全一樣，但執行順序已經完全不一樣。</p>
<p>我們發現執行順序變成每個數字各自執行 <code>Map() -&gt; Filter() -&gt; Each()</code>，而不是原本整個<code>List</code> 全部一起 <code>Map() -&gt; Filter() -&gt; Each()</code>。</p>
<p>當使用 <code>yield</code> 時，<code>Map()</code> 與 <code>Filter()</code> 並未執行，而是等 <code>Each()</code> 的 Side Effect : <code>WriteLine()</code> 執行時，才去呼叫 <code>Filter()</code>，然後 <code>Filter()</code> 去呼叫 <code>Map()</code>，<code>Map()</code> 才真正開始執行，<code>Map()</code> 執行完再立即將結果傳給 <code>Filter()</code>，最後再傳給 <code>Each()</code> 執行<code>WriteLine()</code> 達成需求。</p>
<p>這就是所謂 <strong>Lazy Evaluation</strong>，function 的所有計算，都因為 Side Effect 發動後才會開始。</p>
<p>Lazy Evaluation 有兩大優點 :</p>
<ul>
<li><strong>省下傳遞 data 時間</strong> : Function 之間不需傳遞 data，只有在 Side Effect 發動後才會計算，省下 data 建立與傳遞時間</li>
<li><strong>節省記憶體</strong> : 若 data 量龐大，且能夠執行的記憶體有限，則 Lazy Evaluation 就非常有用，因為完全不需事先在記憶體內建立 data</li>
</ul>
<h2 id="使用_LINQ">使用 LINQ</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            IEnumerable&lt;<span class="keyword">int</span>&gt; nums = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            nums.Select(x =&gt; x * <span class="number">3</span>)</span><br><span class="line">                .Where(x =&gt; x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可再將程式碼重構成 LINQ，<code>Map()</code> 相當於 LINQ 的 <code>Select()</code>，而 <code>Filter()</code> 相當於 <code>Where()</code>。</p>
<p><img src="/images/fp/lazy-evaluation/yield002.png" alt="yield002"></p>
<ol>
<li>事實上 LINQ 內部就是使用 <code>yield</code> 實現，這也是 LINQ 高效的原因</li>
</ol>
<h2 id="使用時機">使用時機</h2><hr>
<ul>
<li>當 FP 寫 Higher Order Function 時，由於要不斷的將 data 傳給下一個 Higher Order Function，此時就是適合使用 <code>yield</code>，避免 function 間的傳遞 data 影響執行效能</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>yield</code> 是眾多程式語言都具備的基礎功能，PHP 也有 <code>yield</code>，在 ECMAScript 2015 則稱為 Generator，但大部分人都採用 Imperative 方式寫程式，很少人會使用 Lazy Evaluation 思考；事實上如 Haskell，所有 function 都是 Lazy Evaluation，這對 FP 的執行效能有非常大的幫助</li>
<li>是否覺得 Lazy Evaluation 很有 Agile 的味道呢 ? XDD</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/LazyEvaluation" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[Yield 是實現 Lazy Evaluation 最簡單的方式]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 VS Code 開發 Haskell ?]]></title>
    <link href="https://oomusou.io/haskell/hie/"/>
    <id>https://oomusou.io/haskell/hie/</id>
    <published>2018-08-13T15:23:43.000Z</published>
    <updated>2018-08-14T02:56:12.000Z</updated>
    <content type="html"><![CDATA[<p>Haskell 是個非常純的 FP 語言，如所有 data 都是 Immutable，所有 function 都是 Lazy Evaluation，這些觀念都是一般程式語言所沒有的，透過 Haskell，可以讓我們學習更純的 FP 概念，而不是 workaround 式的 FP，進而改變思考方式。</p>
<p>Haskell IDE Engine 是基於 LSP (Language Service Protocol)，讓我們在 VS Code 就可以享受如 IDE 強大功能。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Stack 1.7.1<br>Haskell IDE Engine 0.2.2.0<br>Haskell Language Server 0.0.21<br>VS Code 1.25.1</p>
<h2 id="Haskell_Stack">Haskell Stack</h2><hr>
<p>Stack 為 Haskell 的 CLI，最大特色是將 GHC 安裝在專案目錄下，不會污染系統環境。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install haskell-stack</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 Stack。</p>
<p><img src="/images/haskell/hie/hie004.png" alt="hie004"></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stack <span class="keyword">install</span> cabal-<span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>HIE 也需要 <code>cabal</code>，使用 Stack 安裝 <code>cabal-install</code>，<code>cabal</code> 將安裝到 <code>~/local/bin</code> 目錄下。</p>
<p><img src="/images/haskell/hie/hie013.png" alt="hie013"></p>
<h2 id="設定路徑">設定路徑</h2><hr>
<p>HIE 所需的檔案都會放在 <code>~/.local/bin</code> 下，先設定好系統路徑。</p>
<p><img src="/images/haskell/hie/hie010.png" alt="hie010"></p>
<h2 id="建立專案">建立專案</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stack</span> <span class="keyword">new</span> hello-world</span><br></pre></td></tr></table></figure>
<p>使用 Stack 建立專案。</p>
<p><img src="/images/haskell/hie/hie005.png" alt="hie005"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd hello-world</span><br><span class="line">hello-world <span class="variable">$ </span>stack setup</span><br></pre></td></tr></table></figure>
<p>使用 Stack 安裝 Haskell 專案所需要的 GHC。</p>
<p><img src="/images/haskell/hie/hie006.png" alt="hie006"></p>
<h2 id="編譯專案">編譯專案</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello-world $ <span class="built_in">stack</span> build</span><br></pre></td></tr></table></figure>
<p>使用 Stack 編譯 Haskell 專案。</p>
<p><img src="/images/haskell/hie/hie007.png" alt="hie007"></p>
<h2 id="執行_Haskell">執行 Haskell</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello-world $ stack <span class="built_in">exec</span> hello-world-exe</span><br></pre></td></tr></table></figure>
<p>Stack 預設會將專案編譯成 <code>專案名稱-exe</code>，使用 <code>stack exec</code> 執行 Haskell 執行檔。</p>
<blockquote>
<p>其實 <code>hello-world-exe</code> 已經是執行檔，只在目錄在很深，使用 <code>stack exec</code> 會自動幫我們找到執行檔執行，<code>stack exec</code> 並非 Haskell run-time</p>
</blockquote>
<p><img src="/images/haskell/hie/hie008.png" alt="hie008"></p>
<h2 id="Haskell_IDE_Engine">Haskell IDE Engine</h2><hr>
<p>Haskell IDE Engine 是基於 LSP (Language Service Protocol) 實作，簡稱 HIE。</p>
<p>VS Code 透過 HIE，就能達成相當於 IDE 才有的功能，目前 HIE 還無法在 Homebrew 找到，必須親自編譯。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/haskell</span><span class="regexp">/haskell-ide-engine --recursive</span></span><br></pre></td></tr></table></figure>
<p>Git clone 最新的 HIE 專案。</p>
<p><img src="/images/haskell/hie/hie000.png" alt="hie000"></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> haskell-ide-engine</span><br><span class="line">haskell-ide-engine $ <span class="keyword">make</span> build-<span class="keyword">all</span></span><br></pre></td></tr></table></figure>
<ol>
<li>進入 <code>haskell-ide-engine</code> 目錄</li>
<li>使用 Make 編譯 HIE</li>
</ol>
<p><img src="/images/haskell/hie/hie001.png" alt="hie001"></p>
<blockquote>
<p>這段時間會非常久，請耐心等待，在我的 Macbook Pro 15 Mid2014，需要約 40 分鐘時間編譯</p>
</blockquote>
<p><img src="/images/haskell/hie/hie003.png" alt="hie003"></p>
<p>若 Make 沒錯誤，最後的訊息如上。</p>
<p><img src="/images/haskell/hie/hie002.png" alt="hie002"></p>
<p>除了 <code>cabal</code> 為剛剛 <code>stack install cabal-install</code> 所安裝，剩下的檔案都是 <code>make build-all</code>  所編譯。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hie <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/haskell/hie/hie011.png" alt="hie011"></p>
<ol>
<li>能顯示 HIE 版本，表示 HIE 編譯成功</li>
</ol>
<h2 id="VS_Code">VS Code</h2><hr>
<p>HIE 已經編譯成功，最後一哩路是 VS Code 的套件部分。</p>
<p><img src="/images/haskell/hie/hie009.png" alt="hie009"></p>
<ol>
<li>在 VS Code 安裝 <code>Haskell Language Server</code></li>
</ol>
<p><img src="/images/haskell/hie/hie012.png" alt="hie012"></p>
<p>VS Code 開啟 Haskell 專案，若沒有任何錯誤訊息，則表示 HIE 安裝成功。</p>
<blockquote>
<p><code>~/.local/bin</code> 設定在系統路徑非常重要，否則要在 VS Code 設定 HIE 路徑，非常麻煩</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Haskell IDE Engine 為 LSP，透過 HIE，我們就可以使用我們喜歡的 VS Code 編輯 Haskell，並享受 IDE 般支援</li>
<li>HIE 目前在 macOS 尚無 Homebrew 可下載，必須親自編譯才能使用</li>
<li>設定好 VS Code + HIE，就可以開心享受 Haskell 的純 FP 思維了 </li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/haskell" target="_blank" rel="external">Haskell</a>, <a href="https://github.com/haskell/haskell-ide-engine" target="_blank" rel="external">Haskell IDE Engine</a><br><a href="https://qiita.com/waddlaw" target="_blank" rel="external">Waddlaw</a>, <a href="https://qiita.com/waddlaw/items/b83cd10311200095fe87" target="_blank" rel="external">VS Code と haskell-ide-engine で Haskell 開発環境を構築する</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 VS Code + Haskell IDE Engine]]>
    
    </summary>
    
      <category term="Haskell" scheme="https://oomusou.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Functional Programming 簡介]]></title>
    <link href="https://oomusou.io/fp/intro/"/>
    <id>https://oomusou.io/fp/intro/</id>
    <published>2018-08-06T12:23:43.000Z</published>
    <updated>2018-08-19T01:01:37.000Z</updated>
    <content type="html"><![CDATA[<p>這幾年由於 Reactive Programming 興起，使得 FP 這古老的 Programming Paradigm 又成為顯學，FP 大都使用 JavaScript、Haskell … 等偏 FP 語言闡述，很少人使用 C# 來談 FP，本系列將使用大家的老朋友 C#，帶領大家一步一步進入 FP 世界。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>C# 7.2</p>
<blockquote>
<p>本文為 <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Funtional Programming in C#</a> 一書第一章的讀後心得</p>
</blockquote>
<h2 id="Introduction">Introduction</h2><hr>
<ul>
<li>FP 是一種 Programming Paradigm，不是 Design Pattern 也不是 Framework，更不是 Language</li>
<li>是一種以 function 為中心的 <code>思考方式</code> 與 <code>程式風格</code></li>
<li>有別於目前主流 Imperative、OOP，所以被稱為<code>邪教</code> ? </li>
</ul>
<blockquote>
<p>Imperative</p>
<p>以 command 或 statement 方式，一行一行的執行程式</p>
</blockquote>
<h2 id="Function">Function</h2><hr>
<p>在討論什麼是 Functional Programming 之前，我們先來定義什麼是 <strong>Function</strong> :</p>
<p><strong>Mathematical Function</strong></p>
<p><img src="/images/fp/intro/fp000.svg" alt="fp000"></p>
<p>在數學裡，function 就是 x 與 <code>y = f(x)</code> 的對應關係。</p>
<blockquote>
<p>f(x) 結果只與 x 的輸入有關，不會其他任何東西相關。</p>
</blockquote>
<p><img src="/images/fp/intro/fp001.svg" alt="fp001"></p>
<ul>
<li><strong>Domain</strong> : 所有的 <code>x</code> 稱為 <code>定義域</code></li>
<li><strong>Codomain</strong> : 所有 <code>可能</code> 的 <code>f(x)</code> 稱為 <code>對應域</code></li>
<li><strong>Range</strong> : 所有 <code>實際</code> 的 <code>f(x)</code> 稱為 <code>值域</code></li>
</ul>
<blockquote>
<p>這些都不是什麼高深的數學，在國一的代數我們就會了</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span>(<span class="params"><span class="keyword">int</span> x</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>int</code> : 為 Codomain</li>
<li><code>int x</code> :  為 Domain</li>
</ul>
<p>Pure Function : Codomain 只與 Domain 相關。</p>
<blockquote>
<p>Pure Function 就是 Mathematical Function 在程式語言的實踐</p>
</blockquote>
<p><strong>Programming Function</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> z = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span>(<span class="params"><span class="keyword">int</span> x</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    w = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x + z + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>func()</code> 可以讀取 <code>func()</code> 外面的 <code>z</code>，甚至可以改寫 <code>func()</code> 外部的 <code>w</code>，這就是所謂的 Side Effect。</p>
<p>因為讀取與寫入 function 的外部變數造成 Side Effect，使得變數改變的 <code>時機</code> 變得很重要，也就是所謂的 Race Condition。</p>
<blockquote>
<p>OS 恐龍書花了很多的篇幅都在解決 Race Condition (Lock、Mutex ….)。</p>
</blockquote>
<h2 id="Functional_Programming">Functional Programming</h2><hr>
<blockquote>
<p>把 function 當成 data 使用，並避免 State Mutation</p>
</blockquote>
<ul>
<li>Function as data (把 function 當成 data 使用)</li>
<li>No state mutation (不要修改 data，只要修改資料，就需擔心可能 Race Condition)</li>
</ul>
<h2 id="Function_as_Data">Function as Data</h2><hr>
<blockquote>
<p>比  function 當成 data 使用</p>
</blockquote>
<ul>
<li>能把 function 當 input、把 function 當 return</li>
<li>能將 function 指定給變數</li>
<li>能將 function 存進 Collection</li>
</ul>
<blockquote>
<p>以前 data 能怎麼用，function 就怎麼用</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">triple</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; (x * <span class="number">3</span>).ToString();</span><br><span class="line"></span><br><span class="line">            Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(triple)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p>10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">triple</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; (x * <span class="number">3</span>).ToString();</span><br></pre></td></tr></table></figure>
<p>使用 C# 7 的 Local Function 宣告 <code>triple()</code> 。</p>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range(<span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>使用 <code>Range()</code> 建立 <code>IEnumerable&lt;int&gt;</code>，因為有 <code>using static System.Linq.Enumerable;</code></p>
<blockquote>
<p><code>using static</code> 在 FP 建議使用，會讓 code 更精簡</p>
</blockquote>
<p>13 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.Select(triple)</span><br></pre></td></tr></table></figure>
<p><code>Select()</code> 就是 FP 的 <code>Map()</code>，為 <code>IEnumerable</code> 的 Extension Method。</p>
<p>與 <code>Map()</code> 一樣，<code>Select()</code> 並沒有修改原本的 <code>Range(1, 3)</code>，而是 return 新的 IEnumerable。</p>
<p><code>triple</code> 為 function，但如 data 般傳進 <code>Select()</code>，<code>Select()</code> 也就是所謂的 Higher Order Function。</p>
<blockquote>
<p>在 LINQ 的 <code>.</code> ，若使用 Extension Method，則不是 OOP 的 Method，而是 FP 的 Pipeline</p>
</blockquote>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.ToList()</span><br><span class="line">.ForEach(WriteLine);</span><br></pre></td></tr></table></figure>
<p>因為 List 才有 <code>ForEach()</code>，所以要先轉成 List。</p>
<p>直接使用 <code>WriteLine</code>，因為有 <code>using static System.Console;</code>。</p>
<h2 id="No_State_Mutation">No State Mutation</h2><hr>
<blockquote>
<p>不要修改 data</p>
</blockquote>
<p><code>7, 6, 1</code> 只取 <code>奇數</code>，並且 <code>由小到大</code> 排序。</p>
<p><strong>Imperative</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> original = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> result = GetOddsByAsc(original);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetOddsByAsc</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; original</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> original)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (iter % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    result.Add(iter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result.Sort();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<p>21 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br></pre></td></tr></table></figure>
<p>Imperative 典型寫法會先建立一個 <code>result</code> 變數。</p>
<p>23 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> original)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (iter % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Add(iter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據 <code>條件</code> 不斷修改變數。</p>
<p>31 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.Sort();</span><br></pre></td></tr></table></figure>
<p>直接修改 <code>result</code> 資料排序。</p>
<p><strong>Functional</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> original = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> result = GetOddsByAsc(original);</span><br><span class="line"></span><br><span class="line">            result.ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetOddsByAsc</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; original</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">isOdd</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x % <span class="number">2</span> == <span class="number">1</span>;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">asc</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> original</span><br><span class="line">                .Where(isOdd)</span><br><span class="line">                .OrderBy(asc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<p>22 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> original</span><br><span class="line">    .Where(isOdd)</span><br><span class="line">    .OrderBy(asc);</span><br></pre></td></tr></table></figure>
<p><code>original</code> 經由 pipeline 方式，先經過 <code>Where()</code> 找出 <code>奇數</code>，最後再以 <code>asc</code> 排序。</p>
<p>Code 就類似 <code>講話</code>，看不到實作細節，可讀性高。</p>
<p>不需要建立 <code>result</code> 暫存變數，也沒有修改 <code>original</code> 與 <code>result</code>，從頭到尾都沒有修改 data，這就是所謂的 <code>No State Mutation</code>，而是每次 pipeline 都建立新的 data。</p>
<blockquote>
<ul>
<li>LINQ 的 <code>Where()</code> 就是 FP 的 <code>filter()</code>，</li>
<li>LINQ 的 <code>OrderBy()</code> 就是 FP 的 <code>sort()</code></li>
</ul>
</blockquote>
<h2 id="Parallel_Computation">Parallel Computation</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = Range(-<span class="number">10000</span>, <span class="number">20001</span>).Reverse().ToList();</span><br><span class="line"><span class="comment">// =&gt; [10000, 9999, ... , -9999, -10000]</span></span><br><span class="line">Action task1 = () =&gt; WriteLine(nums.Sum());</span><br><span class="line">Action task2 = () =&gt; &#123; nums.Sort(); WriteLine(nums.Sum()); &#125;;</span><br><span class="line"></span><br><span class="line">Parallel.Invoke(task1, task2);</span><br><span class="line"><span class="comment">// prints: 92332970</span></span><br><span class="line"><span class="comment">//         0</span></span><br></pre></td></tr></table></figure>
<p>由於 <code>Sort</code> 會直接去改 <code>nums</code>，造成了 Race Condition。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Linq.Enumerable</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = Range(-<span class="number">10000</span>, <span class="number">20001</span>).Reverse().ToList();</span><br><span class="line"><span class="comment">// =&gt; [10000, 9999, ... , -9999, -10000]</span></span><br><span class="line">Action task1 = () =&gt; WriteLine(nums.Sum());</span><br><span class="line">Action task2 = () =&gt; WriteLine(nums.OrderBy(x =&gt; x).Sum());</span><br><span class="line"></span><br><span class="line">Parallel.Invoke(task1, task2);</span><br><span class="line"><span class="comment">// prints: 0</span></span><br><span class="line"><span class="comment">//         0</span></span><br></pre></td></tr></table></figure>
<p><code>task2</code> 並不會去修改 <code>nums</code>，因此不會 Race Condition。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> original = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt; &#123;<span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> result = GetOddsByAsc(original);</span><br><span class="line"></span><br><span class="line">            result.ForEach(WriteLine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetOddsByAsc</span>(<span class="params">IEnumerable&lt;<span class="keyword">int</span>&gt; original</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">asc</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x;</span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">isOdd</span>(<span class="params"><span class="keyword">int</span> x</span>) </span>=&gt; x % <span class="number">2</span> == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> original</span><br><span class="line">                .AsParallel()</span><br><span class="line">                .Where(isOdd)</span><br><span class="line">                .OrderBy(asc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>22 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> original</span><br><span class="line">    .AsParallel()</span><br><span class="line">    .Where(isOdd)</span><br><span class="line">    .OrderBy(asc);</span><br></pre></td></tr></table></figure>
<p>只要加上 <code>AsParallel()</code> 之後，完全無痛升級多核心。</p>
<p>因為 <code>Where(isOdd)</code> 與 <code>OrderBy(asc)</code> 都是 Pure Function，沒有 Side Effect，也就沒有 Race Condition，因此可以放心使用多核心平行運算。</p>
<h2 id="FP_vs-_OOP">FP vs. OOP</h2><hr>
<p>OOP 是大家習慣的編程方式，FP 究竟有哪些觀念與 OOP 不同呢 ?</p>
<p><strong>Encapsulation</strong></p>
<ul>
<li>OOP : data 與 logic 包在 class 內</li>
<li>FP : data 與 logic 分家，data 就是 data，logic 就是 function，不使用 class</li>
</ul>
<p><strong>State Mutation</strong></p>
<ul>
<li>OOP : 繼續使用 Imperative 修改 state</li>
<li>FP : No State Mutation =&gt; Immutable =&gt; No Side Effect =&gt; No Race Condition =&gt; Pure Function =&gt; Dataflow =&gt; Pipeline (其實都在講同一件事情)</li>
</ul>
<blockquote>
<p>大部分人最難突破的 FP 點在此，這與傳統程式思維差異很大，為什麼不能改 data 呢 ?</p>
</blockquote>
<p><strong>Modularity</strong></p>
<ul>
<li>OOP : 以 class 為單位</li>
<li>FP : 以 function 為單元</li>
</ul>
<p><strong>Dependency</strong></p>
<ul>
<li>OOP : Dependency Injection</li>
<li>FP : Higher Order Function (Function Injection)</li>
</ul>
<p><strong>Loose Coupling</strong></p>
<ul>
<li>OOP : 使用 Interface</li>
<li>FP : Function Signature 就是 interface，使用 Function Composition / Function Pipeline</li>
</ul>
<h2 id="SOLID">SOLID</h2><hr>
<p><strong>SRP</strong></p>
<ul>
<li>OOP : Class 與 Method 要單一職責</li>
<li>FP :  Module 與 Function 要單一職責</li>
</ul>
<p><strong>OCP</strong></p>
<ul>
<li>OOP : Interface，使用 Object Composition</li>
<li>FP : Function Signature 就是 interface，使用 Function Composition</li>
</ul>
<p><strong>LSP</strong></p>
<ul>
<li>OOP : 有限度的繼承</li>
<li>FP : N/A</li>
</ul>
<p><strong>ISP</strong></p>
<ul>
<li>OOP : Interface 要盡量小</li>
<li>FP : Interface 小到極致就變成 function</li>
</ul>
<p><strong>DIP</strong></p>
<ul>
<li>OOP : Dependency Injection</li>
<li>FP : Higher Order Function</li>
</ul>
<blockquote>
<p>SOLID 原則在 OOP 與 FP 都適用，不過 OOP 與 FP 在實現手法並不一樣，OOP 以 class 實現，FP 以 function 實現</p>
</blockquote>
<h2 id="FP_鹹魚翻身">FP 鹹魚翻身</h2><hr>
<p>FP 其實是比 OOP 更古老的技術，LISP 早在 1958 年就問世，而 Smalltalk 則在 1972 年發表，但因為 FP 基於數學，且強調 No State Mutation，與 CPU 設計理念不合 (CPU 就是要你不斷改暫存器與記憶體)，很多人無法接受而視為 <code>邪教</code>，一直到最近才鹹魚翻身： </p>
<ol>
<li>硬體單核心時脈出現瓶頸，CPU 已經無法做出時脈超過 5GHz 以上，因此單執行緒程式速度也面臨瓶頸，但隨著半導體製程進步，單位面積可以塞入更多電晶體，因此 CPU 可以放進更多核心，但 Imperative 寫法依賴 Side Effect，使得多核心很難發揮，但 FP 沒有 Side Effect，很容易多核心平行運算，發揮多核心威力</li>
<li>Side Effect 寫法很難單元測試，因為不保證每次的結果都ㄧ樣，但 FP 的 Pure Function 很適合單元測試</li>
<li>OOP 的 Object Compostion 需依賴 Interface，容易造成 interface 滿天飛與 Over Design，但 FP 的 Function Compostion 不需要額外 interface，只要求你使用 Dataflow 思考，並使用 Pure Function 避免 Side Effect 即可</li>
<li>Reactive Programming 並不適合使用 OOP，但卻異常適合 FP，這使得 FP 找到了 <code>殺手級</code> 應用</li>
</ol>
<h2 id="C#_適合_FP_嗎_?">C# 適合 FP 嗎 ?</h2><hr>
<p>回想 FP 定義 :</p>
<ol>
<li>Function as Data</li>
<li>No State Mutation</li>
</ol>
<p><strong>Function as Data</strong></p>
<ul>
<li>C# 從 1.0 就有 Delegate，可以將 function 當成 input 與 output 使用</li>
<li>C# 3.0 支援 Lambda，讓 Anonymous Function 更容易實現</li>
<li>C# 3.0 支援 Func、Predicate、Action，讓 Anonyoua Delegate 更為方便</li>
<li>C# 的 Type Inference 比較弱，必須明確指定 Delegate 或 Func 型別 (不滿意但可接受，希望 C# 對 Type Inference 持續加油) </li>
</ul>
<p><strong>No State Mutation</strong></p>
<ul>
<li>Primitive Type 只有 <code>string</code> 與 <code>datetime</code> 為 Immutable</li>
<li>由於 C# 是從 Imperative 與 OOP 起家，任何 data 預設都是 Mutable，而不像 FP 語言預設 data 都是 Immutable，需自己加上 <code>readonly</code></li>
<li>自訂型別預設是 Mutable</li>
<li>Collection 預設是 Mutable，但已經提供 Immutable Collection</li>
</ul>
<p>所以大體上除了 Type Inference 與 Immutable 支援比較不足外，C# 7 算是個準 FP 語言，C# 亦持續朝更完整的 FP 邁進 :</p>
<ul>
<li>Record Type (Immutable 自訂 Type)</li>
<li>Algebraic Data Type (適合 DDD)</li>
<li>Pattern Matching</li>
<li>更強的 Tuple</li>
</ul>
<p>C# 8 將會是更成熟的 FP 語言。</p>
<h2 id="C#_對_FP_支援">C# 對 FP 支援</h2><p><strong>C# 3 與 LINQ</strong></p>
<ul>
<li>LINQ 本質上就是 FP，並不是使用 OOP 技術</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumerable</span><br><span class="line">    .Range(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    .Where(i =&gt; i % <span class="number">20</span> == <span class="number">0</span>)</span><br><span class="line">    .OrderBy(i =&gt; -i)</span><br><span class="line">    .Select(i =&gt; $<span class="string">"&#123;i&#125;%"</span>)</span><br></pre></td></tr></table></figure>
<p><code>Where()</code>、<code>OrderBy()</code>、<code>Select()</code> 都以 function 為參數，且並沒有去修改原本的 <code>Enumerable.Range(1, 100)</code>，完全符合 FP 的基本定義 :</p>
<ul>
<li>Function as Data</li>
<li>No State Mutation</li>
</ul>
<p>且 C# 提供了 Lambda，讓我們以更精簡的方式撰寫 Delegate，對於 FP 這種只使用一次的 Anonymous Function 特別有效，這也使得 C# 更適合寫 FP。</p>
<blockquote>
<p>不過 C# 社群大都沒發現 LINQ 的 FP 的本質，只有在處理 <code>IEnumerable</code> 與 <code>IQueryable</code> 才會使用 FP，其他 code 又繼續使用 Imperative 與 OOP，並沒有完全發揮 Functional C# 的潛力，也就是 FP 思維其實沒有深入 C# 社群</p>
</blockquote>
<p><strong>C# 6、7</strong></p>
<p>C# 6、7 乍看之下沒有提供實質功能，都是 syntax sugar，若以 OOP 角度來看的確如此，但若以 FP 角度，所有的 syntax sugar 都是為了讓 C# 成為更好的 FP 而準備。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Radius &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Circumference =&gt; PI * <span class="number">2</span> * Radius;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="keyword">double</span> radius</span>) </span>=&gt; Radius = radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Area</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">double</span> <span class="title">Square</span>(<span class="params"><span class="keyword">double</span> d</span>) </span>=&gt; Pow(d, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> PI * Square(Radius);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> (<span class="keyword">double</span> Circumference, <span class="keyword">double</span> Area) Stats =&gt; (Circumference, Area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Using Static</strong></p>
<p>第 1 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> Area</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">Square</span>(<span class="params"><span class="keyword">double</span> d</span>) </span>=&gt; Pow(d, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> PI * Square(Radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C# 6 的 <code>using static</code> 讓我們可以直接 <code>PI</code> 或 <code>Pow</code> 使用 <code>Math.PI</code> 與 <code>Math.Pow</code>。</p>
<blockquote>
<p>Q : 為什麼 <code>using static</code> 對 FP 重要 ?</p>
</blockquote>
<p>在 OOP，我們必須建立 object instance，然後才能用 method，主要是因為 OOP 的 instance method 會以 Imperative 與 Side Effect 方式使用 data，也就是 field，因此不同的 object instance 就有不同的 field，正就是 OOP 的 Encapsulation : data 與 logic 合一。</p>
<p>但因為 FP 是 data 與 logic 分家，logic 會以 static method 實現，也沒有 field，因此就不須建立 object instance，因此類似 <code>Math</code> 這種 instance variable 在 FP 就顯得沒有意義且多餘，因為 static method 都是 Pure Function，根本不需要 instance variable。</p>
<p><strong>Immutable Type</strong></p>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> Radius &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="keyword">double</span> radius</span>) </span>=&gt; Radius = radius;</span><br></pre></td></tr></table></figure>
<p>C# 目前的缺點就是沒有 <code>直接</code> 支援  Immutable 自訂型別，C# 6 透過宣告 getter-only 的 auto-property，compiler 會自動建立 <code>readonly</code> 的 field，且只能透過 constructor 設定其值，達到 <code>No State Mutation</code> 的要求。</p>
<p><strong>Expression Body</strong></p>
<p>第 6 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> Circumference =&gt; PI * <span class="number">2</span> * Radius;</span><br></pre></td></tr></table></figure>
<p>Property 可直接使用 Expression Body 語法。</p>
<blockquote>
<p>Q : 為什麼 Expression Body 對 FP 重要 ?</p>
</blockquote>
<p>因為 FP 很習慣寫 <code>小 property</code> 與 <code>小 function</code>，最後再靠 Function Composition 與 Function Pipeleine 組合起來，為了這種只有一行的 <code>小 function</code> ，還要加上 <code>{}</code>，除了浪費行數，也不符合 FP 的 Lambda 極簡風。</p>
<p>C# 6 一開始只有在 Property 與 Method 支援 Expression Body，但 C# 7 可以在 Constructor、Destructor、Getter 與 Setter 全面使用 Expression Body。</p>
<p><strong>Local Function</strong></p>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Square</span>(<span class="params"><span class="keyword">double</span> d</span>) </span>=&gt; Pow(d, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> PI * Square(Radius);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Local Function 使我們在 Method 內可直接建立 function。</p>
<blockquote>
<p>Q : 為什麼 Local Function 對 FP 重要 ?</p>
</blockquote>
<p>由於 FP 常常需要建立 <code>小 function</code>，最後再 compose 或 pipeline，C# 7 之前只能宣告 <code>Func</code> 型別變數並配合 Lambda，但 <code>Func</code> 寫法可讀性實在不高，這也使的 C# 族群不太願意抽 <code>小 function</code>。</p>
<p>但 Local Function 的可讀性就很高，也符合一般 function 的 syntax，讓我們更願意抽 <code>小 function</code> 來 compose。</p>
<p><strong>Better Tuple</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> (<span class="keyword">double</span> Circumference, <span class="keyword">double</span> Area) Stats =&gt; (Circumference, Area);</span><br></pre></td></tr></table></figure>
<p>為了回傳 Tuple 外，還可以對 element 指定有意義的名字，讓 client 使用 Tuple 時有 Intellisense 支援。</p>
<blockquote>
<p>Q : 為什麼 Tuple 對 FP 重要 ?</p>
</blockquote>
<p>因為 FP 會在 Function Composition 與 Function Pipeline 時，拆很多小 function 實現 Dataflow，而這些 <code>小 function</code> 在傳遞資料時，就會使用 Tuple，但為這種只使用一次的 data 定義自訂型別，又會造成自訂型別滿天飛的問題，但若使用 Tuple 就可避免此問題。</p>
<h2 id="C#_如何實現_Function_?">C# 如何實現 Function ?</h2><hr>
<p>這裡的 Function 是所謂的 Mathematical Function，也就是 Pure Function。</p>
<p><strong>Static Method</strong></p>
<p>由於 Pure Function 要求 output 只與 input 有關，也就是 Pure Function 沒有 Side Effect，因此會直接使用 Static Method，如 <code>System.Math</code> 一樣，且還可搭配 C# 6 的 <code>using static</code>，讓程式碼更精簡。</p>
<p><strong>Delegate</strong></p>
<p>FP 要求 <code>Function as Data</code>，也就是 Pure Function 會以參數方式傳進其他 function，C# 1.0 function 包成 Delegate 後，以 Delegate 形式傳進其它 function。</p>
<p>Delegate 要求兩個步驟 :</p>
<ul>
<li>宣告 Delegate 型別</li>
<li>實作符合 Delegate 型別的 function</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">int</span> Comparison&lt;T&gt; (T x, Y x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Delegate</code> 宣告 <code>Comparison</code> 型別。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = </span><br><span class="line">    Enumerable</span><br><span class="line">        .Range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        .Select(i =&gt; i * <span class="number">3</span>)</span><br><span class="line">        .ToList();</span><br><span class="line"></span><br><span class="line">Comparison&lt;<span class="keyword">int</span>&gt; alphabetically = </span><br><span class="line">    (<span class="number">1</span>, r) =&gt; l.ToString().CompareTo(r.ToString());</span><br><span class="line"></span><br><span class="line">list.Sort(alphabetically);</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparison&lt;<span class="keyword">int</span>&gt; alphabetically = </span><br><span class="line">    (<span class="number">1</span>, r) =&gt; l.ToString().CompareTo(r.ToString());</span><br></pre></td></tr></table></figure>
<p>根據 <code>Comparison</code> delegate 型別定義 <code>alphabetically</code> 變數，以 Lambda 描述 function。</p>
<blockquote>
<p>若實作不符合 Delegate 定義，compiler 就會報錯，所以 Delegate 也被稱為 Type-Safe Function Pointer。</p>
</blockquote>
<p>第 10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.Sort(alphabetically);</span><br></pre></td></tr></table></figure>
<p>將 <code>alphabetically</code> delegate 傳入 <code>List.Sort()</code>。</p>
<p><strong>Func &amp; Action</strong></p>
<p>Delegate 讓我們實現 <code>Function as Data</code>，但對於只使用一次的 Anonymous Delegate 型別，到處宣告 Delegate 就類似 interface 一樣，造成檔案爆炸。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">delegate</span> Greeting <span class="title">Greeter</span>(<span class="params">Person p</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>其實相當於</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Person, Greeting&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>.NET Framework 3 之後，以 Func 與 Action 取代 Custom Delegate</p>
</blockquote>
<p><strong>Lambda</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = </span><br><span class="line">    Enumerable</span><br><span class="line">        .Range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        .Select(i =&gt; i * <span class="number">3</span>)</span><br><span class="line">        .ToList();</span><br><span class="line"></span><br><span class="line">list.Sort((<span class="number">1</span>, r) =&gt; l.ToString().CompareTo(r.ToString();</span><br></pre></td></tr></table></figure>
<p>不用再宣告 <code>Comparison&lt;T&gt;</code> Delegate，也不用建立 <code>Comparison&lt;T&gt;</code> 的實作，直接以 Lambda 傳入 <code>List.Sort()</code>。</p>
<blockquote>
<p>寫 Lambda 時，不用寫型別，compiler 會自動使用 Type Inference 導出參數型別，且會將 Lambda 轉型成 Delegate 型別，判斷是不是符合 <code>List.Sort()</code> 要求</p>
<p>因此 Lamba 雖然寫起來像 <code>弱型別</code>，但絲毫不會影響原本 Delegate 強型別的特性，這就是 Type Inference 強大之處</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> days = Enum.GetValues(<span class="keyword">typeof</span>(DayOfWeek)).Cast&lt;DayOfWeek&gt;();</span><br><span class="line"><span class="comment">// =&gt; [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]</span></span><br><span class="line"></span><br><span class="line"><span class="function">IEnumerable&lt;DayOfWeek&gt; <span class="title">daysStartingWith</span>(<span class="params"><span class="keyword">string</span> pattern</span>)</span><br><span class="line">	</span>=&gt; days.Where(d =&gt; d.ToString().StartsWith(pattern));</span><br><span class="line"></span><br><span class="line">daysStartingWith(<span class="string">"S"</span>)</span><br><span class="line"><span class="comment">// =&gt; [Sunday, Saturday]</span></span><br></pre></td></tr></table></figure>
<p>不只 JavaScript 有 Closure，事實上 C# 也是有 Closure。</p>
<p> <code>daysStartingWith()</code> 會回傳 function，但傳入的參數 <code>S</code> 會以 Closure 方式存在於回傳的 function。</p>
<p><strong>Dictionary</strong></p>
<p>既然 Pure Function 只與 input 有關，我們甚至可以使用 <code>查表法</code> 的方式實作 function :</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frenchFor = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">bool</span>, <span class="keyword">string</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">true</span>]  = <span class="string">"Vari"</span>,</span><br><span class="line">    [<span class="keyword">false</span>] = <span class="string">"Faux"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">frenchFor[<span class="keyword">true</span>];</span><br></pre></td></tr></table></figure>
<p>C# 6 提供了新的 Dictionary 初始化語法，甚至可以使用 <code>true</code> 與 <code>false</code> 當 key。</p>
<blockquote>
<p>實務上有兩種需求很適合使用 Dictionary</p>
<ol>
<li>沒有邏輯可言的 data 轉換</li>
<li>花時間的運算</li>
</ol>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>FP 的 function 指的是 Mathematical Function，也就是 Pure Function，而不是 Programming Function</li>
<li>FP 屬於 Paradigm 層次，不是 framework 也不是程式語言，只要語言能支援 First-Class Function，就能以 FP 風格實現，若能支援 Immutable 與 Type Inference 更佳</li>
<li>C# 目前已經支援大部分的 FP 功能，隨著 C# 8 的發佈，FP 支援將更為完整</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.mathsisfun.com" target="_blank" rel="external">Math is Fun</a>, <a href="https://www.mathsisfun.com/sets/domain-range-codomain.html" target="_blank" rel="external">Domain, Range and Codomain</a><br>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以大家的老朋友 C# 談 FP]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="FP" scheme="https://oomusou.io/tags/FP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Refactoring to LINQ => ForEach]]></title>
    <link href="https://oomusou.io/linq/foreach/"/>
    <id>https://oomusou.io/linq/foreach/</id>
    <published>2018-08-04T12:23:43.000Z</published>
    <updated>2018-09-10T08:22:41.000Z</updated>
    <content type="html"><![CDATA[<p>LINQ 是 C# 3.0 實現 FP 重要里程碑，提供大量的 Operator，讓我們以 Pure Function 將 data 以 Dataflow 與 Pipeline 方式實現。本系列將先以 Imperative 實作，然後再重構成 FP，最後再重構成 LINQ Operator，並參考 LINQ source code 的實現方式。</p>
<p>首先從最基本的 <code>ForEach</code> Operator 談起。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.4</p>
<h2 id="User_Story">User Story</h2><hr>
<p>在 List 中有一堆名字，想要在 console 顯示每個名字。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Ben"</span>,</span><br><span class="line">                <span class="string">"Jafar"</span>,</span><br><span class="line">                <span class="string">"Matt"</span>,</span><br><span class="line">                <span class="string">"Priya"</span>,</span><br><span class="line">                <span class="string">"Brian"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Imperative_:_for">Imperative : for</h2><hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Ben"</span>,</span><br><span class="line">                <span class="string">"Jafar"</span>,</span><br><span class="line">                <span class="string">"Matt"</span>,</span><br><span class="line">                <span class="string">"Priya"</span>,</span><br><span class="line">                <span class="string">"Brian"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> counter = <span class="number">0</span>; counter &lt; names.Count; counter++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(names[counter]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> counter = <span class="number">0</span>; counter &lt; names.Count; counter++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(names[counter]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最直覺的方式 (其實應該說被制約的方式)， 就是透過 List 的 Indexer 將 List 的 item 取出來，並透過 <code>for</code> loop 去執行 <code>Console.WriteLine()</code>。</p>
<h2 id="Imperative_:_foreach">Imperative : foreach</h2><hr>
<p><img src="/images/linq/foreach/foreach000.png" alt="foreach000"></p>
<p>此時 Rider 已經提出警告，建議改用 <code>foreach</code></p>
<p><img src="/images/linq/foreach/foreach001.png" alt="foreach001"></p>
<ol>
<li>按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Convert to foreach</code></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Ben"</span>,</span><br><span class="line">                <span class="string">"Jafar"</span>,</span><br><span class="line">                <span class="string">"Matt"</span>,</span><br><span class="line">                <span class="string">"Priya"</span>,</span><br><span class="line">                <span class="string">"Brian"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重構成 <code>foreach</code> 後，就不必使用 <code>counter</code> 變數，也不用考慮 <code>counter++</code> 寫錯，<code>for</code> loop 的 counter 控制，是常見的 bug 來源，所以重構成 <code>foreach</code> 絕對比 <code>for</code> 來得好。</p>
<p>且 <code>foreach</code> 的語意也比 <code>for</code> 清楚 ，因為不用看到 counter 實作細節。</p>
<h2 id="FP_:_Higher_Order_Function">FP : Higher Order Function</h2><hr>
<p>實務上這種 <code>foreach</code> 天天都要用到，但用 <code>foreach</code> 這種 statement 寫法，重複使用能力為 0，就每天都要不斷的寫 <code>foreach</code>。</p>
<p>若我們能將 <code>foreach</code> 抽成 <code>ForEach()</code> Higher Order Function，我們就能不斷 reuse <code>ForEach()</code>，只要將不同的商業邏輯以 function 傳進 <code>ForEach()</code> 即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Ben"</span>,</span><br><span class="line">                <span class="string">"Jafar"</span>,</span><br><span class="line">                <span class="string">"Matt"</span>,</span><br><span class="line">                <span class="string">"Priya"</span>,</span><br><span class="line">                <span class="string">"Brian"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            names.MyForEach(name =&gt; Console.WriteLine(name));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> List&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                action(iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>22 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> List&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        action(iter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己以 <code>MyForEach()</code> 實作出 <code>foreach</code> 的 Higher Order Function 版本。</p>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names.MyForEach(name =&gt; Console.WriteLine(name));</span><br></pre></td></tr></table></figure>
<p>原來的 <code>foreach</code> statement 重構成 <code>MyForEach()</code> Higher Order Function 版本，只要將 <code>Console.WriteLine()</code> 改用 Lambda 傳入 <code>MyForEach()</code> 即可，如此 <code>foreach</code> 就能被 reuse 了。</p>
<p>不過 C# 在此可能感受不到 FP 所謂的 Dataflow 與 Pipeline，就語意而言，只能說我們為 List 寫了一個新 method : <code>MyForEach()</code> ，也就是 C# 所謂的 Extension Method，這符合傳統 C# 的 OOP 思維。</p>
<p>他山之石可以攻錯，我們來看看 F# 語法。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">"Ben"</span>; <span class="string">"Jafar"</span>; <span class="string">"Matt"</span>; <span class="string">"Priya"</span>; <span class="string">"Brian"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> MyForEach action list = </span><br><span class="line">    <span class="keyword">for</span> iter <span class="keyword">in</span> list <span class="keyword">do</span></span><br><span class="line">        action iter</span><br><span class="line">names </span><br><span class="line">|&gt; MyForEach (printfn <span class="string">"%A "</span>)</span><br></pre></td></tr></table></figure>
<p><code>names</code> 為 List，<code>myForEach()</code> 為自己實作的 <code>ForEach()</code> Higher Order function，若不懂 F# 語法先略過細節沒關係。</p>
<p><code>|&gt;</code> 為 pipeline，所以可以明顯看出其語意為 <code>names</code> data 以 Dataflow 與 Pipeline 方式傳給 <code>myForEach()</code> 執行 <code>printfn()</code>。</p>
<p>但 C# 並沒有特別提供 <code>|&gt;</code> 這種 pipeline 符號，而是繼續使用 OOP 的 <code>.</code> 。</p>
<p><code>.</code> 雖然方便，但心裡要知道，這裡的 <code>.</code> 並不是 OOP 的 method，而是 FP 的 Dataflow 與 Pipeline，只是也使用了 <code>.</code> 為符號，其本質是 F# 的 <code>|&gt;</code>，<code>.</code> 算是 <code>|&gt;</code> 的 syntax sugar。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> MyForEach&lt;T&gt;(<span class="keyword">this</span> List&lt;T&gt; list, Action&lt;T&gt; action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        action(iter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再舉例另外一個例子證明 <code>.</code> 並非 OOP 的 method，而是 FP 的 Pipeline。</p>
<p>我們實現 <code>MyForEach()</code> 時，並不是寫在 <code>List</code> class 內，而是透過 static method + this 參數成為 Extenstion Method，也就是<code>List</code> data 與  <code>MyForEach()</code> logic 是徹底分離，而非如 OOP 將 data 與 logic 寫在 <code>List</code> class 內，也再次證明 Extension Method 是 C# 實踐 Pipeline 的手法，而 <code>.</code> 只是 syntax sugar，其本質是 FP 的 Pipeline。</p>
<h2 id="IEnumrable">IEnumrable</h2><hr>
<p><img src="/images/linq/foreach/foreach002.png" alt="foreach002"></p>
<p>當初我們只是想為了 List 重構，所以 Extension Method 的型別只用了 List，Rider 提出建議：<code>List&lt;T&gt; 其實可以重構成 IEnumerable&lt;T&gt;</code>，如此 <code>MyForEach()</code> 重複使用能力更高。</p>
<p><img src="/images/linq/foreach/foreach003.png" alt="foreach003"></p>
<ol>
<li>將 cursor 放在 <code>List</code> 上，按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Make parameter type IEnumerable&lt;T&gt;</code></li>
</ol>
<p><img src="/images/linq/foreach/foreach005.png" alt="foreach005"></p>
<ol>
<li>將 <code>List&lt;T&gt;</code> 重構成 <code>IEnumerable&lt;T&gt;</code>。</li>
</ol>
<h2 id="Method_Group">Method Group</h2><hr>
<p><img src="/images/linq/foreach/foreach008.png" alt="foreach008"></p>
<p>Rider 建議將 Lambda 重構成 Method Group。</p>
<p><code>MyForEach()</code> 後接 Lambda 天經地義，但若 function 的型別定義的很清楚，讓 compiler 可以找到正確 signature 的 Overloading method，則不用寫 Lambda，傳入 method 名稱即可，這就是 Method Group，會讓 FP 寫法更加精簡。</p>
<p><code>MyForEach()</code> 很明確定義了 <code>Action&lt;T&gt;</code>，就只有一個 input 參數的 function，因此 compiler 有足夠的資訊找到 <code>Console.WriteLine()</code> 正確的 Overloading 版本，因此適合重構成 Method Group。</p>
<p><img src="/images/linq/foreach/foreach004.png" alt="foreach003"></p>
<ol>
<li>將 cursor 放在 <code>WriteLine</code> 上，按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Replace with method group</code></li>
</ol>
<p><img src="/images/linq/foreach/foreach006.png" alt="foreach006"></p>
<ol>
<li>只要傳入 Method 名稱即可，不用寫 Lambda</li>
</ol>
<h2 id="Using_static">Using static</h2><hr>
<p>其實目前的 <code>Console.WriteLine</code> 已經非常精簡，可讀性也高，但 C# 6 提供了 <code>using static</code>，可以讓你寫出更 FP 風格的 code。</p>
<p><img src="/images/linq/foreach/foreach007.png" alt="foreach007"></p>
<ol>
<li>將 cursor 放在 <code>Console</code> 上，按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Import static members</code></li>
</ol>
<p><img src="/images/linq/foreach/foreach009.png" alt="foreach009"></p>
<ol>
<li>將 <code>System.Console</code> 使用 <code>using static</code></li>
<li><code>MyForEach()</code> 只要傳入 <code>WriteLine</code> 即可，更像是 function</li>
</ol>
<h2 id="LINQ_:_ForEach">LINQ : ForEach</h2><hr>
<p>其實 <code>ForEach()</code> 這種很普遍的東西，在 LINQ 早已內建，我們改用 LINQ 版本。</p>
<p><img src="/images/linq/foreach/foreach010.png" alt="foreach010"></p>
<ol>
<li>直接使用 LINQ 的 <code>ForEach()</code>，將自己寫的 <code>MyForEach()</code> 刪除</li>
</ol>
<h2 id="LINQ_如何實踐_?">LINQ 如何實踐 ?</h2><hr>
<p><img src="/images/linq/foreach/foreach011.png" alt="foreach011"></p>
<p>我們來看看 LINQ 的 source code 如何實踐 <code>ForEach()</code> ?</p>
<p>一開始對 <code>action</code> 進行判斷，若沒有則拋出 exception。</p>
<p><code>action</code> 也搭配 <code>for</code> 進行，跟我們使用 <code>foreach</code> 類似。</p>
<blockquote>
<p>Q : 為什麼 <code>ForEach()</code> 是在 <code>List</code> class ? 而不是以 Extension Method 實現 ?</p>
</blockquote>
<p>這的確是 LINQ 設計上的好問題，LINQ 並沒有選擇將 <code>ForEach()</code> 以 Extension Method 對 <code>IEnumerable</code> 實作，而是直接寫在 <code>List</code> class 內。</p>
<p>這個設計也使得我們要使用 <code>ForEach()</code> 時，一定得 <code>ToList()</code> 成 List 才能使用。</p>
<p>為了使用上方便，我還是會在自己的 library 為 <code>IEnumerable</code> 加上 <code>ForEach()</code> Extension Method，這樣就不需 <code>ToList()</code> 了。</p>
<h2 id="使用時機">使用時機</h2><hr>
<p><code>ForEach()</code> 表面上看起來是 <code>foreach</code> statement 的 syntax sugar，但事實上 <code>ForEach()</code> 在 FP 的意義並非如此。</p>
<p>FP 將 data 以 Dataflow 與 Pipeline 方式處理，因此提供了眾多 operator，而 operator 則必須搭配 pure function，不能有 Side Effect。但 Side effect 總要有人處理，<code>ForEach()</code> 就是讓你統一處理 Side Effect 之處。</p>
<p>與 Imperative 寫法的差異是 : Imperative 總是不斷的在處理 Side Effect，因此造成結果難以預測、難以測試，bug 就是由此展開；但  FP 對於 data 處理堅持採用 Dataflow 與 Pipeline，不使用 Side Effect，因此對 data 處理是可預測且容易測試，直到最後 data 處理完，才不得已使用 <code>ForEach()</code> 處理 Side Effect。</p>
<p>如 <code>Console.WriteLine()</code> 就是 I/O，就是 Side Effect，這是無法避免的，最後使用 <code>ForEach()</code> 統一解決。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>.</code> 與 Extension Method 是 C# 的 syntax sugar，其本質就是 FP 的 data 與 logic 分離與 Pipeline</li>
<li>Method Group 讓 FP 寫法會更為精簡，也是 C# 很重要的發明</li>
<li>FP 的 operator 主要在處理 Dataflow 與 Pipeline，應該使用 pure function，但 <code>ForEach()</code> 是少數讓你處理 Side Effect 的 operator，應該將 side effect 集中在 <code>ForEach()</code> 處理</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/AppSettingsJson" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://reactivex.io" target="_blank" rel="external">ReactiveX</a>, <a href="http://reactivex.io/learnrx/" target="_blank" rel="external">Functional Programming in JavaScript</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以重構角度探討 LINQ]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="LINQ" scheme="https://oomusou.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 顯示 .NET Core 專案 Code Coverage ? (Docker)]]></title>
    <link href="https://oomusou.io/sonarqube/code-coverage/"/>
    <id>https://oomusou.io/sonarqube/code-coverage/</id>
    <published>2018-08-02T12:23:43.000Z</published>
    <updated>2018-08-02T03:03:59.000Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 除了能檢查 C# 品質外，還可以當成 dashboard 使用，讓整個團隊有統一入口關注專案的 Code Coverage。</p>
<p>SonarQube 支援 OpenCover 與 dotCover 兩種格式，本文將以 NUnit + Coverlet + OpenCover 介紹。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.06.0-ce-mac70 (26399)<br>.NET Core 2.1<br>SonarQube 7.1<br>SonarScanner 4.3.1.1372<br>NUnit 3.10.1<br>Coverlet 2.1.1<br>Rider 2018.1.3</p>
<h2 id="Coverlet">Coverlet</h2><hr>
<p><img src="/images/sonarqube/code-coverage/coverage000.png" alt="coverage000"></p>
<p>在 NUnit 專案加入 Coverlet package，這是個基於 .NET Core，且能跨平台計算 Code Coverage 的 package。</p>
<blockquote>
<p>OpenCover 與 dotCover 算 .NET 生態圈兩大最有名的 package，但目前都只能跑在 Windows 平台，Coverlet 算目前跨平台最佳 solution</p>
</blockquote>
<h2 id="Dockerfile">Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet</span><br><span class="line"></span><br><span class="line"><span class="built_in">ENV</span> SCANNER_VERSION=<span class="number">4.3</span>.<span class="number">1.1372</span></span><br><span class="line"><span class="built_in">ENV</span> SCANNER_HOME=/opt/scanner</span><br><span class="line"></span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update </span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y unzip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y openjdk-<span class="number">8</span>-jre</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/<span class="variable">$SCANNER_VERSION</span>/sonar-scanner-msbuild-<span class="variable">$SCANNER_VERSION</span>-netcoreapp2.<span class="number">0</span>.zip -O /opt/sonar-scanner-msbuild.zip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mkdir -p <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">unzip /opt/sonar-scanner-msbuild.zip <span class="operator">-d</span> <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">rm /opt/sonar-scanner-msbuild.zip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chmod <span class="number">775</span> <span class="variable">$SCANNER_HOME</span>/ -R</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">./ ./</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./scanner.sh"</span>]</span></span><br></pre></td></tr></table></figure>
<p>因為要在 .NET Core container 安裝 SonarScanner，所以要對 .NET Core 客製化 image。</p>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>使用 <code>FROM</code> 設定所使用的基底 image。</p>
<p>使用 Microsoft 官方的 <code>microsoft/dotnet</code> image。</p>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENV</span> SCANNER_VERSION=<span class="number">4.3</span>.<span class="number">1.1372</span></span><br><span class="line"><span class="built_in">ENV</span> SCANNER_HOME=/opt/scanner</span><br></pre></td></tr></table></figure>
<p>使用 <code>ENV</code> 設定 Dockerfile 的環境變數。</p>
<p><code>SCANNER_VERSION</code> : 因為 SonarScanner 的下載路徑，會與版本有關，所以特別設定成變數。</p>
<p><code>SCANNER_HOME</code> : 設定 SonarScanner 所安裝的目錄。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span></span><br></pre></td></tr></table></figure>
<p>設定 container 的工作目錄，也就是預設目錄都會在 <code>/app</code> 下。</p>
<p>第 8 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update </span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y unzip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y openjdk-<span class="number">8</span>-jre</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>RUN</code> 執行 CLI 指令。</p>
<ul>
<li>使用 <code>wget</code> 下載 SonarScanner</li>
<li>使用 <code>unzip</code> 對 zip 解壓縮</li>
<li><code>SonarScanner</code> 會使用 Java 執行，需要安裝 Java Runtime</li>
</ul>
<p>12 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -q https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/<span class="variable">$SCANNER_VERSION</span>/sonar-scanner-msbuild-<span class="variable">$SCANNER_VERSION</span>-netcoreapp2.<span class="number">0</span>.zip -O /opt/sonar-scanner-msbuild.zip</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>wget</code> 下載 SonarScanner 壓縮檔，並下載到 <code>/opt</code> 目錄下。</p>
<p>13 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">mkdir -p <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">unzip /opt/sonar-scanner-msbuild.zip <span class="operator">-d</span> <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">rm /opt/sonar-scanner-msbuild.zip</span></span><br></pre></td></tr></table></figure>
<p>建立 <code>/opt/scanner</code> 目錄，將 SonarScanner 壓縮檔解壓縮放到 <code>/opt/scanner</code> 目錄下，解壓縮完刪除 SonarScanner 壓縮檔。</p>
<p>16 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">chmod <span class="number">775</span> <span class="variable">$SCANNER_HOME</span>/ -R</span></span><br></pre></td></tr></table></figure>
<p>將 SonarScanner 目錄所有檔案賦予執行權力。</p>
<p>18 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COPY</span> <span class="bash">./ ./</span></span><br></pre></td></tr></table></figure>
<p>將目前 solution 下所有檔案複製到 container 內，也就是 <code>/app</code> 目錄下。</p>
<p>19 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./scanner.sh"</span>]</span></span><br></pre></td></tr></table></figure>
<p>最後會執行專案目錄下的 <code>./scanner.sh</code>，負責執行 SonarScanner 檢查。</p>
<h2 id="Docker-compose-yml">Docker-compose.yml</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  net-core:&#10;    build: .&#10;    container_name: MyCore&#10;    volumes:&#10;      - &#34;$&#123;HOST_DIR&#125;:/code/&#34;&#10;    networks:&#10;      - netcore&#10;    depends_on:&#10;      - sonarqube&#10;&#10;  sonarqube:&#10;    image: sonarqube:latest&#10;    container_name: MySonarQube&#10;    ports:&#10;      - 9000:9000&#10;      - 9002:9002&#10;    networks:&#10;      netcore:&#10;        ipv4_address: 172.16.238.10&#10;     &#10;networks:&#10;  netcore:&#10;    ipam: &#10;      driver: default&#10;      config:&#10;        - subnet: 172.16.238.0/24</span><br></pre></td></tr></table></figure>
<p>設定 .NET Core 與 SonarQube 兩個 container 同時啟動。</p>
<p>第 4 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net-core:&#10;    build: .</span><br></pre></td></tr></table></figure>
<p>使用 <code>build</code> 將同目錄下的 <code>Dockerfile</code> build 成 image，也就是剛才的 <code>Dockerfile</code>。</p>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyCore</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 .NET Core 的 container 名稱。</p>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - &#34;$&#123;HOST_DIR&#125;:/code/&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumes</code> 設定 host 與 container 的共用目錄，<code>:</code> 左方為 host 目錄，右方為 container 目錄。</p>
<p>目的是能在 .NET Core container 內抓到 host 的 project。</p>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  - netcore</span><br></pre></td></tr></table></figure>
<p>使用 <code>networks</code> 設定 .NET Core 與 SonarQube 共用 <code>netcore</code> 內部網路。</p>
<p>11 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">depends_on:&#10;  - sonarqube</span><br></pre></td></tr></table></figure>
<p>.NET Core container 相依於 SonarQube container。</p>
<p>14 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonarqube:&#10;  image: sonarqube:latest</span><br></pre></td></tr></table></figure>
<p>使用 <code>image</code> 設定 container 所使用的 image。</p>
<p>16 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MySonarQube</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 SonarQube 的 container 名稱。</p>
<p>17 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:&#10;  - 9000:9000&#10;  - 9002:9002</span><br></pre></td></tr></table></figure>
<p>使用 <code>ports</code> 設定 host 與 container 所 mapping 的 port，<code>:</code> 左側為 host port，右側為 container port。</p>
<p>為了能在 host 以瀏覽器連上 SonarQube，要將 host 的 9000 與 9002 兩個 port 給 host。</p>
<p>20 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  netcore:&#10;    ipv4_address: 172.16.238.10</span><br></pre></td></tr></table></figure>
<p>使用 <code>network</code> 設定使用 <code>netcore</code> 網路，並設定其 IP 為 <code>172.16.238.10</code>。</p>
<blockquote>
<p>一般來說，我們不必為 container 設定固定 IP，只要使用 container 名稱就可彼此溝通，但稍後 SonarScanner 必須使用固定 IP 才能連上 SonarQube，所以在此特別要設定固定 IP</p>
</blockquote>
<p>24 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  netcore:&#10;    ipam: &#10;      driver: default&#10;      config:&#10;        - subnet: 172.16.238.0/24</span><br></pre></td></tr></table></figure>
<p>設定 <code>netcore</code> 網路。</p>
<h2 id="-env">.env</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST_DIR=~/Code/CSharp</span><br></pre></td></tr></table></figure>
<p>將 <code>HOST_DIR</code> 以環境變數設定，為 host 與 .NET Core container 所共享的目錄。</p>
<h2 id="scanner-sh">scanner.sh</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#! /bin/bash</span></span><br><span class="line">sleep <span class="number">35</span></span><br><span class="line"><span class="built_in">cd</span> ./ClassLib.Test</span><br><span class="line">dotnet <span class="built_in">test</span> /p:CollectCoverage=<span class="literal">true</span> /p:CoverletOutputFormat=opencover </span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll begin /k:core2 /n:Core2 /v:<span class="number">1.0</span> /d:sonar.login=admin /d:sonar.password=admin /d:sonar.host.url=http://<span class="number">172.16</span>.<span class="number">238.10</span>:<span class="number">9000</span> /d:sonar.cs.opencover.reportsPaths=/app/ClassLib.Test/coverage.opencover.xml /d:sonar.coverage.exclusions=**/Program.cs</span><br><span class="line">dotnet build</span><br><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll end /d:sonar.login=admin /d:sonar.password=admin</span><br></pre></td></tr></table></figure>
<p>使用 SonarScanner 檢查 .NET Core 專案，<code>scanner.sh</code> 會放在專案根目錄。</p>
<p>第 2 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep <span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>主要是要等 SonarQube 啟動完成，比較好的方式是使用 Health Check 明確得知 SonarQube 已經啟動完成。</p>
<p>這裡暫時先 sleep 30 秒，等 SonarQube 先啟動，.NET Core 才開始執行 SonarScanner。</p>
<p>這裡還有改善的空間，也可以自行調整 sleep 時間。</p>
<p>第 4 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet <span class="built_in">test</span> /p:CollectCoverage=<span class="literal">true</span> /p:CoverletOutputFormat=opencover</span><br></pre></td></tr></table></figure>
<p>執行 NUnit 單元測試。</p>
<ul>
<li><strong>/p:CollectCoverage=true</strong> : 命令 Coverlet 計算 Code Coverage</li>
<li><strong>/p:CoverletOutputFormat=opencover</strong> : 命令 Coverlet 以 OpenCover 格式產出</li>
</ul>
<p>第 6 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll begin /k:core2 /n:Core2 /v:<span class="number">1.0</span> /d:sonar.login=admin /d:sonar.password=admin /d:sonar.host.url=http://<span class="number">172.16</span>.<span class="number">238.10</span>:<span class="number">9000</span> /d:sonar.cs.opencover.reportsPaths=/app/ClassLib.Test/coverage.opencover.xml /d:sonar.coverage.exclusions=**/Program.cs</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 <code>SonarScanner.MSBuild.dll</code>，一開始以 <code>begin</code> 開頭：</p>
<ul>
<li><strong>/k</strong> : SonarQube 對專案的 key，內部將以此 key 作為辨別，必須唯一</li>
<li><strong>/n</strong> : 在 SonarQube 網頁上顯示的專案名稱</li>
<li><strong>/v</strong> : 在 SonarQube 網頁上顯示的版本編號</li>
<li><strong>/d:sonar.login</strong> : 指定 SonarQube 帳號</li>
<li><strong>/d:sonar.password</strong> : 指定 SonarQube 密碼</li>
<li><strong>/d:sonar.host.url</strong> : 指定 SonarQube server IP 與 port</li>
<li><strong>/d:sonar.cs.opencover.reportsPaths</strong> : 設定 OpenCover 格式的 XML 檔案位置</li>
<li><strong>/d:sonar.coverage.exclusions</strong> : 設定 SonarQube 排除 Code Coverage 計算的檔案</li>
</ul>
<blockquote>
<p>目前 SonarQube 設定 exclusions 的 regex 有些 bug，可能無法如文件那般設定 regex，假如遇到這個 bug，就先用最原始的方式指定 exclusions</p>
</blockquote>
<p>第 7 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<blockquote>
<p>Script 語言不用編譯，可以直接使用 SonarQube Scanner 就可以檢查，但 C# 需要編譯，因此必須 dotnet build</p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll end /d:sonar.login=admin /d:sonar.password=admin</span><br></pre></td></tr></table></figure>
<p>最後需加上 <code>end</code>，scanner 正式將 <code>dotnet build</code> 檢查出的結果寫入 SonarQube project</p>
<ul>
<li>仍必須指定 SonarQube 的帳號密碼</li>
</ul>
<h2 id="執行_SonarScanner">執行 SonarScanner</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SonarScanner $ docker-compose up --build</span><br></pre></td></tr></table></figure>
<p>啟動 .NET Core 與 SonarQube container，並且自動執行 SonarScanner。</p>
<ul>
<li><strong>–build</strong> : 重新建立 .NET Core 自訂 image，若有任何修改，將重新包進 image，確保 <code>docker-compose</code> 是最新的 image</li>
</ul>
<p><img src="/images/sonarqube/code-coverage/coverage001.png" alt="core000"></p>
<p><img src="/images/sonarqube/code-coverage/coverage002.png" alt="coverage002"></p>
<ol>
<li>Coverlet 計算出 Code Coverage，並且產生 <code>coverage.opencover.xml</code></li>
</ol>
<p><img src="/images/sonarqube/code-coverage/coverage003.png" alt="coverage003"></p>
<ol>
<li>在 host 以 <code>http://localhost:9000</code> ，將可看到 SonarQube 的檢查結果，並且正確顯示 Code Coverage</li>
</ol>
<h2 id="結束_Container">結束 Container</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br></pre></td></tr></table></figure>
<p><img src="/images/sonarqube/code-coverage/coverage004.png" alt="core003"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 SonarScanner 已經被包在 Dockerfile 內，host 就不用再安裝 SonarScanner</li>
<li>沒有將 .NET Core 安裝在 SonarQube container 內，而是分別使用 .NET Core container 與 SonarQube container，符合 Microservice 精神</li>
<li>Coverlet 為目前唯一的 .NET Core 跨平台 Code Coverage 解決方案，並且可以產出 OpenCover 格式 XML</li>
<li>只要執行 <code>docker-compose up --build</code>，就會執行 NUnit 單元測試與 Coverlet 計算 Code Coverage，且 SonarScanner 也會自動進行檢查</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/sonarscanner" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/tonerdo" target="_blank" rel="external">Tonerdo</a>, <a href="https://github.com/tonerdo/coverlet" target="_blank" rel="external">Coverlet</a><br><a href="https://tattoocoder.com" target="_blank" rel="external">Shryne Boyer</a>, <a href="https://tattoocoder.com/cross-platform-code-coverage-arrives-for-net-core/" target="_blank" rel="external">Cross platform code coverage arrives for .NET Core</a><br><a href="https://docs.sonarqube.org" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/pages/viewpage.action?pageId=6389770" target="_blank" rel="external">Code Coverage Result Import (C#, VB.NET)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[SonarQube 也能顯示 Code Coverage]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="Coverlet" scheme="https://oomusou.io/tags/Coverlet/"/>
    
      <category term="NUnit" scheme="https://oomusou.io/tags/NUnit/"/>
    
      <category term="SonarQube" scheme="https://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何讀取 JSON 格式設定檔 ?]]></title>
    <link href="https://oomusou.io/netcore/json-config/"/>
    <id>https://oomusou.io/netcore/json-config/</id>
    <published>2018-07-31T13:23:43.000Z</published>
    <updated>2018-07-31T15:36:03.000Z</updated>
    <content type="html"><![CDATA[<p>在實務上不少資訊我們不想寫死在 code 中，會以 config 形式由 client 設定，目前最主流的 config 就屬 JSON 格式，.NET 也提供了 <code>ConfigurationBuilder</code> ，讓我們輕易的讀取 JSON 格式的 config 檔。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.3</p>
<h2 id="安裝_Package">安裝 Package</h2><hr>
<p><img src="/images/netcore/json-config/config000.png" alt="config000"></p>
<p>要另外安裝 3 個 package :</p>
<ul>
<li><code>Microsoft.Extensions.Configuration</code></li>
<li><code>Microsoft.Extensions.Configuration.FileExtensions</code></li>
<li><code>Microsoft.Extensions.Configuration.Json</code> </li>
</ul>
<h2 id="ConfigurationBuilder">ConfigurationBuilder</h2><hr>
<p><strong>Config.json</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"Name"</span>: <span class="string">"Sam"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假設 <code>config.json</code> 放在 project 的根目錄下，想要讀取 key 為 <code>Name</code> 的 value。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> currentDirectory = Directory.GetCurrentDirectory();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> config =</span><br><span class="line">                <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                    .SetBasePath(currentDirectory)</span><br><span class="line">                    .AddJsonFile(<span class="string">"config.json"</span>)</span><br><span class="line">                    .Build();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(config[<span class="string">"Name"</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentDirectory = Directory.GetCurrentDirectory();</span><br></pre></td></tr></table></figure>
<p>使用 <code>Directory.GetCurrentDirectory()</code> 讀取目前 project 的根目錄。</p>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">    .SetBasePath(currentDirectory)</span><br></pre></td></tr></table></figure>
<p>建立 <code>ConfigurationBuilder</code>，並由 <code>SetBasePath()</code> 設定其 working directory。</p>
<p>16 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.AddJsonFile(<span class="string">"config.json"</span>)</span><br></pre></td></tr></table></figure>
<p>由 <code>AddJsonFile()</code> 設定 config 檔案。</p>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.Build();</span><br></pre></td></tr></table></figure>
<p>最後由 <code>Build()</code> 建立 <code>config</code> 物件。</p>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(config[<span class="string">"Name"</span>]);</span><br></pre></td></tr></table></figure>
<p>由於 <code>IConfiguration</code> 有定義  indexer，因此我們可以 <code>Name</code> 當 key 直接存取。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用 <code>ConfigurationBuilder</code> 讓我們可以很簡單地讀取 JSON 格式的 config 檔</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/AppSettingsJson" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[使用 Configuration Package]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 檢查 .NET Core 專案 ? (Docker)]]></title>
    <link href="https://oomusou.io/sonarqube/netcore-docker/"/>
    <id>https://oomusou.io/sonarqube/netcore-docker/</id>
    <published>2018-07-31T12:23:43.000Z</published>
    <updated>2018-08-02T02:48:16.000Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 C# 的 bugs、 vulenrability、code smell 與 duplication。</p>
<p>本文使用 Docker Compose，並同時啟動 .NET Core 與 SonarQube 兩個 container，自動對 .NET 專案進行檢查。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.06.0-ce-mac70 (26399)<br>.NET Core 2.1<br>SonarQube 7.1<br>SonarScanner 4.3.1.1372<br>Rider 2018.1.3</p>
<h2 id="Dockerfile">Dockerfile</h2><hr>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet</span><br><span class="line"></span><br><span class="line"><span class="built_in">ENV</span> SCANNER_VERSION=<span class="number">4.3</span>.<span class="number">1.1372</span></span><br><span class="line"><span class="built_in">ENV</span> SCANNER_HOME=/opt/scanner</span><br><span class="line"></span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update </span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y unzip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y openjdk-<span class="number">8</span>-jre</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/<span class="variable">$SCANNER_VERSION</span>/sonar-scanner-msbuild-<span class="variable">$SCANNER_VERSION</span>-netcoreapp2.<span class="number">0</span>.zip -O /opt/sonar-scanner-msbuild.zip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mkdir -p <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">unzip /opt/sonar-scanner-msbuild.zip <span class="operator">-d</span> <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">rm /opt/sonar-scanner-msbuild.zip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chmod <span class="number">775</span> <span class="variable">$SCANNER_HOME</span>/ -R</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">./ ./</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./scanner.sh"</span>]</span></span><br></pre></td></tr></table></figure>
<p>因為要在 .NET Core container 安裝 SonarScanner，所以要對 .NET Core 客製化 image。</p>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>使用 <code>FROM</code> 設定所使用的基底 image。</p>
<p>使用 Microsoft 官方的 <code>microsoft/dotnet</code> image。</p>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENV</span> SCANNER_VERSION=<span class="number">4.3</span>.<span class="number">1.1372</span></span><br><span class="line"><span class="built_in">ENV</span> SCANNER_HOME=/opt/scanner</span><br></pre></td></tr></table></figure>
<p>使用 <code>ENV</code> 設定 Dockerfile 的環境變數。</p>
<p><code>SCANNER_VERSION</code> : 因為 SonarScanner 的下載路徑，會與版本有關，所以特別設定成變數。</p>
<p><code>SCANNER_HOME</code> : 設定 SonarScanner 所安裝的目錄。</p>
<p>第 6 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span></span><br></pre></td></tr></table></figure>
<p>設定 container 的工作目錄，也就是預設目錄都會在 <code>/app</code> 下。</p>
<p>第 8 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update </span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y unzip</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y openjdk-<span class="number">8</span>-jre</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>RUN</code> 執行 CLI 指令。</p>
<ul>
<li>使用 <code>wget</code> 下載 SonarScanner</li>
<li>使用 <code>unzip</code> 對 zip 解壓縮</li>
<li><code>SonarScanner</code> 會使用 Java 執行，需要安裝 Java Runtime</li>
</ul>
<p>12 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -q https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/<span class="variable">$SCANNER_VERSION</span>/sonar-scanner-msbuild-<span class="variable">$SCANNER_VERSION</span>-netcoreapp2.<span class="number">0</span>.zip -O /opt/sonar-scanner-msbuild.zip</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>wget</code> 下載 SonarScanner 壓縮檔，並下載到 <code>/opt</code> 目錄下。</p>
<p>13 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">mkdir -p <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">unzip /opt/sonar-scanner-msbuild.zip <span class="operator">-d</span> <span class="variable">$SCANNER_HOME</span></span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">rm /opt/sonar-scanner-msbuild.zip</span></span><br></pre></td></tr></table></figure>
<p>建立 <code>/opt/scanner</code> 目錄，將 SonarScanner 壓縮檔解壓縮放到 <code>/opt/scanner</code> 目錄下，解壓縮完刪除 SonarScanner 壓縮檔。</p>
<p>16 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RUN</span> <span class="bash">chmod <span class="number">775</span> <span class="variable">$SCANNER_HOME</span>/ -R</span></span><br></pre></td></tr></table></figure>
<p>將 SonarScanner 目錄所有檔案賦予執行權力。</p>
<p>18 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COPY</span> <span class="bash">./ ./</span></span><br></pre></td></tr></table></figure>
<p>將目前 solution 下所有檔案複製到 container 內，也就是 <code>/app</code> 目錄下。</p>
<p>19 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./scanner.sh"</span>]</span></span><br></pre></td></tr></table></figure>
<p>最後會執行專案目錄下的 <code>./scanner.sh</code>，負責執行 SonarScanner 檢查。</p>
<h2 id="Docker-compose-yml">Docker-compose.yml</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  net-core:&#10;    build: .&#10;    container_name: MyCore&#10;    volumes:&#10;      - &#34;$&#123;HOST_DIR&#125;:/code/&#34;&#10;    networks:&#10;      - netcore&#10;    depends_on:&#10;      - sonarqube&#10;&#10;  sonarqube:&#10;    image: sonarqube:latest&#10;    container_name: MySonarQube&#10;    ports:&#10;      - 9000:9000&#10;      - 9002:9002&#10;    networks:&#10;      netcore:&#10;        ipv4_address: 172.16.238.10&#10;     &#10;networks:&#10;  netcore:&#10;    ipam: &#10;      driver: default&#10;      config:&#10;        - subnet: 172.16.238.0/24</span><br></pre></td></tr></table></figure>
<p>設定 .NET Core 與 SonarQube 兩個 container 同時啟動。</p>
<p>第 4 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net-core:&#10;    build: .</span><br></pre></td></tr></table></figure>
<p>使用 <code>build</code> 將同目錄下的 <code>Dockerfile</code> build 成 image，也就是剛才的 <code>Dockerfile</code>。</p>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyCore</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 .NET Core 的 container 名稱。</p>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - &#34;$&#123;HOST_DIR&#125;:/code/&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumes</code> 設定 host 與 container 的共用目錄，<code>:</code> 左方為 host 目錄，右方為 container 目錄。</p>
<p>目的是能在 .NET Core container 內抓到 host 的 project。</p>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  - netcore</span><br></pre></td></tr></table></figure>
<p>使用 <code>networks</code> 設定 .NET Core 與 SonarQube 共用 <code>netcore</code> 內部網路。</p>
<p>11 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">depends_on:&#10;  - sonarqube</span><br></pre></td></tr></table></figure>
<p>.NET Core container 相依於 SonarQube container。</p>
<p>14 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonarqube:&#10;  image: sonarqube:latest</span><br></pre></td></tr></table></figure>
<p>使用 <code>image</code> 設定 container 所使用的 image。</p>
<p>16 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MySonarQube</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 SonarQube 的 container 名稱。</p>
<p>17 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:&#10;  - 9000:9000&#10;  - 9002:9002</span><br></pre></td></tr></table></figure>
<p>使用 <code>ports</code> 設定 host 與 container 所 mapping 的 port，<code>:</code> 左側為 host port，右側為 container port。</p>
<p>為了能在 host 以瀏覽器連上 SonarQube，要將 host 的 9000 與 9002 兩個 port 給 host。</p>
<p>20 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  netcore:&#10;    ipv4_address: 172.16.238.10</span><br></pre></td></tr></table></figure>
<p>使用 <code>network</code> 設定使用 <code>netcore</code> 網路，並設定其 IP 為 <code>172.16.238.10</code>。</p>
<blockquote>
<p>一般來說，我們不必為 container 設定固定 IP，只要使用 container 名稱就可彼此溝通，但稍後 SonarScanner 必須使用固定 IP 才能連上 SonarQube，所以在此特別要設定固定 IP</p>
</blockquote>
<p>24 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  netcore:&#10;    ipam: &#10;      driver: default&#10;      config:&#10;        - subnet: 172.16.238.0/24</span><br></pre></td></tr></table></figure>
<p>設定 <code>netcore</code> 網路。</p>
<h2 id="-env">.env</h2><hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST_DIR=~/Code/CSharp</span><br></pre></td></tr></table></figure>
<p>將 <code>HOST_DIR</code> 以環境變數設定，為 host 與 .NET Core container 所共享的目錄。</p>
<h2 id="scanner-sh">scanner.sh</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#! /bin/bash</span></span><br><span class="line">sleep <span class="number">30</span></span><br><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll begin /k:core2 /n:Core2 /v:<span class="number">1.0</span> /d:sonar.login=admin /d:sonar.password=admin /d:sonar.host.url=http://<span class="number">172.16</span>.<span class="number">238.10</span>:<span class="number">9000</span></span><br><span class="line">dotnet build</span><br><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll end /d:sonar.login=admin /d:sonar.password=admin</span><br></pre></td></tr></table></figure>
<p>使用 SonarScanner 檢查 .NET Core 專案，<code>scanner.sh</code> 會放在專案根目錄。</p>
<p>第 2 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep <span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>主要是要等 SonarQube 啟動完成，比較好的方式是使用 Health Check 明確得知 SonarQube 已經啟動完成。</p>
<p>這裡暫時先 sleep 30 秒，等 SonarQube 先啟動，.NET Core 才開始執行 SonarScanner。</p>
<p>這裡還有改善的空間，也可以自行調整 sleep 時間。</p>
<p>第 3 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll begin /k:core2 /n:Core2 /v:<span class="number">1.0</span> /d:sonar.login=admin /d:sonar.password=admin /d:sonar.host.url=http://<span class="number">172.16</span>.<span class="number">238.10</span>:<span class="number">9000</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet</code> 執行 <code>SonarScanner.MSBuild.dll</code>，一開始以 <code>begin</code> 開頭：</p>
<ul>
<li><strong>/k</strong> : SonarQube 對專案的 key，內部將以此 key 作為辨別，必須唯一</li>
<li><strong>/n</strong> : 在 SonarQube 網頁上顯示的專案名稱</li>
<li><strong>/v</strong> : 在 SonarQube 網頁上顯示的版本編號</li>
<li><strong>/d:sonar.login</strong> : 指定 SonarQube 帳號</li>
<li><strong>/d:sonar.password</strong> : 指定 SonarQube 密碼</li>
<li><strong>/d:sonar.host.url</strong> : 指定 SonarQube server IP 與 port</li>
</ul>
<p>第 4 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<blockquote>
<p>Script 語言不用編譯，可以直接使用 SonarQube Scanner 就可以檢查，但 C# 需要編譯，因此必須 dotnet build</p>
</blockquote>
<p>第 5 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet /opt/scanner/SonarScanner.MSBuild.dll end /d:sonar.login=admin /d:sonar.password=admin</span><br></pre></td></tr></table></figure>
<p>最後需加上 <code>end</code>，scanner 正式將 <code>dotnet build</code> 檢查出的結果寫入 SonarQube project</p>
<ul>
<li>仍必須指定 SonarQube 的帳號密碼</li>
</ul>
<h2 id="執行_SonarScanner">執行 SonarScanner</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SonarScanner $ docker-compose up --build</span><br></pre></td></tr></table></figure>
<p>啟動 .NET Core 與 SonarQube container，並且自動執行 SonarScanner。</p>
<ul>
<li><strong>–build</strong> : 重新建立 .NET Core 自訂 image，若有任何修改，將重新包進 image，確保 <code>docker-compose</code> 是最新的 image</li>
</ul>
<p><img src="/images/sonarqube/netcore-docker/core000.png" alt="core000"></p>
<p><img src="/images/sonarqube/netcore-docker/core002.png" alt="core002"></p>
<ol>
<li>在 host 以 <code>http://localhost:9000</code> ，將可看到 SonarQube 的檢查結果</li>
</ol>
<h2 id="結束_Container">結束 Container</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down</span><br></pre></td></tr></table></figure>
<p><img src="/images/sonarqube/netcore-docker/core003.png" alt="core003"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 SonarScanner 已經被包在 Dockerfile 內，host 就不用再安裝 SonarScanner</li>
<li>沒有將 .NET Core 安裝在 SonarQube container 內，而是分別使用 .NET Core container 與 SonarQube container，符合 Microservice 精神</li>
<li>只要執行 <code>docker-compose up --build</code>，SonarScanner 就會自動啟動進行檢查</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/sonarscanner" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[完全使用 Docker 版本 SonarQube]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
      <category term="SonarQube" scheme="https://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Parallel Desktop 使用 Docker for Mac ?]]></title>
    <link href="https://oomusou.io/Docker/parallel-docker/"/>
    <id>https://oomusou.io/Docker/parallel-docker/</id>
    <published>2018-07-29T12:23:43.000Z</published>
    <updated>2018-07-29T08:00:56.000Z</updated>
    <content type="html"><![CDATA[<p>雖然平時以 macOS 作為開發主力，偶爾還是會需要在 Parallel Desktop 使用 Windows，此時若要使用 Docker，雖然也能在 Parallel Destop 內跑 Docker for Windows，不過由於是 VM 中的 VM，Docker 並不穩定，比較建議的方式是 Windows 搭配 Docker for Mac 使用。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.06.0-ce-mac70 (26399)<br>PostgreSQL 10.4<br>Parallel Desktop 13 Pro 13.3.2 (43368)<br>Windows 10 Pro 1803 17134.191<br>Rider 2018.1.3 </p>
<h2 id="Docker_for_Mac">Docker for Mac</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>在 macOS 以 <code>docker-compose</code> 啟動 PostgreSQL container，且 port 為 <code>1234</code>。</p>
<p><img src="/images/docker/parallel-docker/parallel000.png" alt="parallel000"></p>
<p>由於將來 Parallel Desktop 內的 Windows 將連到 macOS 的 PostgreSQL container，目前已知其 port 為 <code>1234</code> ，但 IP 是多少呢 ?</p>
<h2 id="Parallel_Desktop_Network">Parallel Desktop Network</h2><hr>
<p><img src="/images/docker/parallel-docker/parallel001.png" alt="parallel001"></p>
<p>Parallel Desktop 預設的 network 是以 <code>Shared Network</code> 方式。</p>
<p><img src="/images/docker/parallel-docker/parallel002.png" alt="parallel002"></p>
<p>什麼是 <code>Shared Network</code> 呢 ?</p>
<p>上圖中的 Mac 有 <code>192.168.0.20</code> 與  <code>10.211.55.10</code> 兩個 <code>IP</code> 。</p>
<p>而 Windows 的 IP 則為 <code>10.211.55.20</code>。</p>
<p>簡單的說相當於 Mac 有兩張網卡，一張網卡為 <code>192.168.0.20</code>，而另一張網卡為 <code>10.211.55.10</code>，而 Windows 的 <code>10.211.55.20</code> 與  Mac 的 <code>10.211.55.10</code> 為同一個網段，可彼此互通，然後再透過 <code>192.168.0.20</code> 這張網卡連上 internet。</p>
<p><img src="/images/docker/parallel-docker/parallel003.png" alt="parallel003"></p>
<p>我們可發現 Parallel Desktop 自帶 DHCP，且 IP 從 <code>10.211.55.1</code> 開始到 <code>10.211.55.254</code>。</p>
<p><img src="/images/docker/parallel-docker/parallel004.png" alt="parallel004"></p>
<p>當 Parallel Desktop 啟動後，實際在 macOS 下 <code>ifconfig</code> 觀察，會發現多了 <code>vinc0</code> 這張網卡，其 IP 為 <code>10.211.55.2</code>。</p>
<p>也就是說若要從 Parallel Desktop 的 Windows 連到 PostgreSQL container，IP 就是 <code>10.211.55.2</code>，port 為 <code>1234</code>。</p>
<h2 id="Windows">Windows</h2><hr>
<p><img src="/images/docker/parallel-docker/parallel005.png" alt="parallel005"></p>
<ol>
<li>在 Windows 內的 Rider 能夠以 <code>10.211.55.2 : 1234</code> 連到 Docker for Mac 的 PostgreSQL container</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><ul>
<li>Parallel Desktop 都會穩定以 <code>10.211.55.2</code> 當成 macOS 的 IP，所以任何 Docker container 都可以跑在 macOS，然後 Windows 再以 <code>10.211.55.2</code> 連上即可，這樣就不需要執行 Docker for Windows 了</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.parallels.com" target="_blank" rel="external">Parallels</a>, <a href="https://kb.parallels.com/en/4948" target="_blank" rel="external">Which networking mode (Bridged, Shared or Host-Only) should I use for the virtual machine?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[不必再與 Docker for Windows 搏鬥]]>
    
    </summary>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
      <category term="Parallel Desktop" scheme="https://oomusou.io/tags/Parallel-Desktop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 GitHub Blog 升級成 https ?]]></title>
    <link href="https://oomusou.io/hexo/https/"/>
    <id>https://oomusou.io/hexo/https/</id>
    <published>2018-07-28T12:23:43.000Z</published>
    <updated>2018-07-28T08:14:52.000Z</updated>
    <content type="html"><![CDATA[<p>當 Chrome 在 68 版後會將沒有 https 網站標上 <code>不安全</code> 字樣，讓 blog 升級成 https 已經不能避免的課題，若你是使用 Hexo 且放在 GitHub，則可參考本文的方式。</p>
<a id="more"></a>
<h2 id="GoDaddy">GoDaddy</h2><hr>
<p><img src="/images/hexo/https/https000.png" alt="https000"></p>
<ol>
<li>到 GoDaddy 去設定自己的 domain，按 <code>DNS</code></li>
</ol>
<p><img src="/images/hexo/https/https001.png" alt="https001"></p>
<ol>
<li>原本 GitHub pages domain 是兩組 <code>192</code> 開頭的 ip，改成這 4 組 ip。</li>
</ol>
<blockquote>
<p>不會馬上生效，要等 1 小時以上</p>
</blockquote>
<h2 id="Hexo">Hexo</h2><hr>
<p><strong>_config.yml</strong></p>
<p><img src="/images/hexo/https/https002.png" alt="https002"></p>
<p>在 Hexo 根目錄的 <code>_config.yml</code> 下，將 <code>url</code> 改成 <code>https</code>。</p>
<p>重新 <code>hexo clean</code>、<code>hero generate</code> 與 <code>hexo deploy</code>。</p>
<h2 id="GitHub">GitHub</h2><hr>
<p><img src="/images/hexo/https/https003.png" alt="https003"></p>
<ol>
<li>進入 repository 的 <code>Settings</code></li>
</ol>
<p><img src="/images/hexo/https/https004.png" alt="https004"></p>
<ol>
<li>將 <code>Enforce HTTPS</code> 打勾</li>
</ol>
<blockquote>
<p>若不能打勾，有可能 GoDaddy 的設定還沒生效，或者 Hexo 還沒上傳重新編譯過的 <code>https</code> 版本</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 GitHub 的支援，要讓 blog 支援 https 已經非常簡單了</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[GitHub 現在已經內建支援 https]]>
    
    </summary>
    
      <category term="GitHub" scheme="https://oomusou.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://oomusou.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 PostgreSQL ?]]></title>
    <link href="https://oomusou.io/Docker/postgres/"/>
    <id>https://oomusou.io/Docker/postgres/</id>
    <published>2018-07-24T22:23:43.000Z</published>
    <updated>2018-07-31T01:50:15.000Z</updated>
    <content type="html"><![CDATA[<p>若要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker 。本文分別使用 <code>docker run</code> 與 <code>docker-compose</code> 兩種方式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.03.1-ce-mac65 (24312)<br>PostgreSQL 10.3</p>
<h2 id="使用_docker_run">使用 docker run</h2><hr>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --name MyPostgres -<span class="keyword">d</span> -p 5432:5432 -v ~/Postgres:/<span class="keyword">var</span>/lib/postgresql/data -<span class="keyword">e</span> POSTGRES_DB=eflab -<span class="keyword">e</span> POSTGRES_USER=admin -<span class="keyword">e</span> POSTGRES_PASSWORD='12345' postgres:latest</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<p><code>—name</code>：替 container 取一個人能夠識別的名字 <code>MyPostgres</code> (若省略，Docker 會自動以亂數建立 )<br><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</p>
<p><code>-v</code> : <code>v</code>olume，PostgresSQL 新增的資料會寫在 container 內的 <code>/var/lib/postgresql/data</code> 目錄，會改 mapping 到 host 的 <code>~/Postgres</code>，如此 container 刪除後，資料仍然會留在 host </p>
<p><code>-p</code> : <code>p</code>ort mapping，host 與 container post 的對應，格式為 host port : container port<br><code>-e</code> : <code>e</code>nvironment，設定 PostgreSQL 所需要的環境變數</p>
<ul>
<li><code>POSTGRES_DB</code> : database 名稱</li>
<li><code>POSTGRES_USER</code> : 帳號</li>
<li><code>POSTGRES_PASSWORD</code> : 密碼</li>
</ul>
<p><code>postgress:latest</code> : image 名稱，其中 <code>latest</code> 為最新版的 image</p>
<p><img src="/images/docker/postgres/post000.png" alt="post000"></p>
<h2 id="使用_Docker-Compose">使用 Docker-Compose</h2><hr>
<p><code>docker run</code> 方式雖然直接，但需要搭配一堆參數才能執行，若能將這些參數先寫在文字檔內，只要下 <code>docker-compose up -d</code> 就可執行 container。</p>
<p><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</p>
<h3 id="Docker-compose-yml">Docker-compose.yml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:latest&#10;    container_name: MyPostgres&#10;    volumes:&#10;      - $&#123;HOST_DIR&#125;:/var/lib/postgresql/data&#10;    expose:&#10;      - 5432&#10;    ports:&#10;      - $&#123;POSTGRES_PORT&#125;:5432&#10;    environment:&#10;      - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;      - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;      - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>version</code> 設定 <code>docker-compose.yml</code> 格式的版本。</p>
<p>因為 <code>docker-compose.yml</code> 的格式版本與 Docker 版本息息相關，若你要使用新版的 Docker 所提供的功能，在 <code>docker-compose.yml</code> 的版本就必須下的更細，如 <code>3.3</code>，在此只使用了 <code>docker-compose.yml</code> 基本功能而已，使用 <code>3</code> 即可。</p>
<p>第 3 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services:&#10;  postgres:</span><br></pre></td></tr></table></figure>
<p>使用 <code>services</code> 設定有哪些 service 要一起跑。</p>
<p><code>Docker-compose.yml</code> 理論上可以同時描述多個 service，也就是多個 container，如 .NET Core + PostgreSQL + Nginx + Redis 同時啟動，但本文只想使用 PostgreSQL 而已，因此僅建立  <code>postgres</code> service。</p>
<p>第 4 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres:&#10;  image: postgres:latest</span><br></pre></td></tr></table></figure>
<p>設定 <code>postgres</code> service，此名稱可自行建立。</p>
<ul>
<li><strong>image</strong> :  設定使用的 image。</li>
</ul>
<blockquote>
<p><code>latest</code> 表示最新版的 <code>postgres</code></p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyPostgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 container 名稱。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>--name</code></p>
</blockquote>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - $&#123;POSTGRES_HOST_DIR&#125;:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumes</code> 設定 host 與 container 所對應的目錄，將來 PostgreSQL 所寫入資料，將寫入 host 目錄。</p>
<p><code>:</code> 左側為 host 目錄，右側為 container 內目錄。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>-v</code></p>
</blockquote>
<p><code>POSTGRES_HOST_DIR</code> 將在 <code>.env</code> 中設定。</p>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose:&#10;  - 5432</span><br></pre></td></tr></table></figure>
<p>使用 <code>expose</code> 設定 container 的 port。</p>
<p>第 11 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:&#10;  - $&#123;POSTGRES_PORT&#125;:5432</span><br></pre></td></tr></table></figure>
<p>使用 <code>ports</code> 設定 host 與 container 所 mapping 的 port。</p>
<p><code>:</code> 左側為 host 的 port，右側為 container 的 port。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>-p</code></p>
</blockquote>
<p><code>POSTGRES_PORT</code> 將在 <code>.env</code> 中設定。</p>
<p>13 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environment:&#10;    - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;    - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;    - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;</span><br></pre></td></tr></table></figure>
<p>設定 PostgreSQL 的 database、user 與 password，此為 PostgreSQL 所需要的環境變數。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>-e</code></p>
</blockquote>
<p><code>POSTGRES_DB</code>、<code>POSTGRES_USER</code> 與 <code>POSTGRES_PASSWORD</code> 將在 <code>.env</code> 中設定。</p>
<h3 id="-env">.env</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">HOST_DIR=<span class="value">~/Postgres</span></span></span><br><span class="line"><span class="setting">POSTGRES_PORT=<span class="value"><span class="number">1234</span></span></span></span><br><span class="line"><span class="setting">POSTGRES_DB=<span class="value">eflab</span></span></span><br><span class="line"><span class="setting">POSTGRES_USER=<span class="value">admin</span></span></span><br><span class="line"><span class="setting">POSTGRES_PASSWORD=<span class="value"><span class="number">12345</span></span></span></span><br></pre></td></tr></table></figure>
<p>此為 <code>Docker-compose.yml</code> 所設定的環境變數，被獨立在 <code>.env</code> 中，可單獨設定，不用修改 <code>Docker-compose.yml</code>。</p>
<h3 id="Docker-compose_up">Docker-compose up</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker-compose up</code> 啟動 PostgreSQL。</p>
<p><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</p>
<p><img src="/images/docker/postgres/post001.png" alt="post001"></p>
<h3 id="Docker-compose_down">Docker-compose down</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker-compose down</code> 結束 PostgreSQL，並且刪除 container。</p>
<p><img src="/images/docker/postgres/post002.png" alt="post002"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker</li>
<li><code>docker-run</code> 與 <code>Docker-Compose</code> 都可以啟動 PostgreSQL，實務上建議使用 <code>Docker-Compose</code>，將變數寫在 <code>.env</code> 中，這樣可使用 <code>docker-compose up -d</code> 就可啟動 PostgreSQL，<code>docker-compose down</code> 就可結束 PostgreSQL，不用再擔心參數問題</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/PostgresDocker" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[在 Mac 最簡單使用 PostgreSQL 方式就是使用 Docker]]>
    
    </summary>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
      <category term="PostgreSQL" scheme="https://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 C# 之 Extension Method]]></title>
    <link href="https://oomusou.io/csharp/extension-method/"/>
    <id>https://oomusou.io/csharp/extension-method/</id>
    <published>2018-07-22T12:23:43.000Z</published>
    <updated>2018-07-22T10:52:27.000Z</updated>
    <content type="html"><![CDATA[<p>C# 3 的 Extension Method 是很了不起的發明，讓我們在不修改原本 source code 的前提下，就能為 class 增加新 method，實現開放封閉原則，尤其對於 .NET Framework 或 package 的擴展特別有效。</p>
<p>事實上 Extension Method 在 Functional Programming 下另有妙用，讓我們輕易實現 Function Composition。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.3</p>
<h2 id="Extension_Method">Extension Method</h2><hr>
<p>首先來看 Extension Method 最標準的應用。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(x =&gt; x * <span class="number">2</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(x =&gt; Console.WriteLine(x.ToString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先使用 <code>Enumerable.Range()</code> 產生 <code>1, 2, 3</code>，再使用 <code>Select()</code> 變成 <code>2, 4, 6</code>，最後使用 <code>ForEach()</code> 印出來。</p>
<p>但中間出現了一個很詭異的 <code>ToList()</code>。</p>
<p>原因是因為 <code>IEnumerable</code> 沒有 <code>ForEach()</code>，只有 <code>List</code> 才有 <code>ForEach()</code>，因此我們必須先 <code>ToList()</code>。</p>
<p>但就語意來說，這是很怪的，<code>IEnumerable</code> 自帶 <code>Aggregate()</code>，為什麼卻沒有提供更常用的 <code>ForEach()</code> 呢 ?</p>
<p>既然 .NET Framework 沒有，我們就來替 <code>IEnumerable</code> 打造一個 <code>ForEach()</code> 吧。</p>
<p><strong>Extensions.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> ForEach&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; source, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (T element <span class="keyword">in</span> source)</span><br><span class="line">                action(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ForEach()</code> 第一個參數為 <code>this IEnumerable&lt;T&gt;</code>，注意特別加了 <code>this</code>，表示我們要為 <code>IEnumerable</code> 提供 <code>ForEach()</code> Extension Method。</p>
<p>且 Extension Method 必須都為 static method。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(x =&gt; x * <span class="number">2</span>)</span><br><span class="line">                .ForEach(x =&gt; Console.WriteLine(x.ToString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之後我們就能將奇怪的 <code>ToList()</code> 拿掉了，這樣的語意是不是更好呢 ?</p>
<blockquote>
<p>Extension Method 讓我們對 .NET Framework 或 package 加以擴充，用起來好像是內建的method 一樣，只要做兩件事情 :</p>
<ol>
<li>使用 static method</li>
<li>第一個參數為該 class 或 interface 型別，並加上 <code>this</code> 修飾</li>
</ol>
</blockquote>
<h2 id="Function_Composition">Function Composition</h2><hr>
<p>Function Composition 是 FP 的招牌菜，強調藉由眾多的小 functional 組合成大 function，而非傳統 imperative 寫法，總是寫出數百行的 method，且這些 method 幾乎是量身定做，不只重複使用的機會很低，且因為行數過多很難維護，也難以單元測試。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> ConsoleApp.Email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);</span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">EmailFor</span>(<span class="params">Person person</span>) </span>=&gt; AppendDomain(AbbreviateName(person));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> email = EmailFor(john);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(email);</span><br><span class="line">            <span class="comment">// jodo@gmail.com</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EmailFor()</code> 能根據 user 的 <code>姓</code> 與 <code>名</code> 自動產生 email。</p>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">EmailFor</span>(<span class="params">Person person</span>) </span>=&gt; AppendDomain(AbbreviateName(person));</span><br></pre></td></tr></table></figure>
<p><code>EmailFor()</code> 為 C# 7 的 Local Function，藉由 <code>AbbreviateName()</code> 與 <code>AppendDomain()</code> 組合出新的 <code>EmailFor()</code>，這也就是所謂的 Function Composition : <code>h = fog = f(g)</code>，其中 <code>g</code> 就是 <code>AbbreviateName()</code>，而 <code>f</code> 就是 <code>AppendDomain()</code>。</p>
<p>這種數學式的 Function Composition 雖然重複使用性極高，但並不容易閱讀，程式碼必須 <code>由右而左</code>，違反一般人 <code>由左至右</code> 的閱讀習慣，因此想改用 Function Pipeline 方式變成 <code>由左至右</code>。</p>
<p><strong>Email.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Email</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AbbreviateName</span>(<span class="params"><span class="keyword">this</span> Person person</span>)</span><br><span class="line">            </span>=&gt; Abbreviate(person.FirstName) + Abbreviate(person.LastName);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AppendDomain</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> localPart</span>) </span>=&gt; $<span class="string">"&#123;localPart&#125;@gmail.com"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Abbreviate</span>(<span class="params"><span class="keyword">string</span> s</span>) </span>=&gt; s.Substring(<span class="number">0</span>, <span class="number">2</span>).ToLower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>AbbreviateName()</code> 與 <code>AppendDomain()</code> 的第一個參數都改加上 <code>this</code>，搖身一變成為 Extension Method。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> ConsoleApp.Email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> email = </span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>)</span><br><span class="line">                    .AbbreviateName()</span><br><span class="line">                    .AppendDomain();</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(email);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>則原本的 <code>EmailFor()</code> Local Function 就不需要了，只要將 <code>Person</code> new 後，直接如 LINQ 般去 <code>AbbreviateName()</code> 與 <code>AppendDomain()</code>，這種風格維持了 <code>由左至右</code> 的閱讀習慣，非常清楚。</p>
<blockquote>
<p>只要將第一個參數加上 <code>this</code> 修飾成為 Extenstion Method 後，就可由 Function Composition 改成 Function Pipeline 風格</p>
</blockquote>
<h2 id="Refactoring">Refactoring</h2><hr>
<p>若 Legacy code 只用了 Function Composition，可以使用 Rider 幫我們重構成 Function Pipeline。</p>
<p><img src="/images/csharp/extension-method/em000.png" alt="em000"></p>
<p>Legacy code 並沒有使用 Extension Method。</p>
<p><img src="/images/csharp/extension-method/em001.png" alt="em001"></p>
<ol>
<li>將 cursor 放在 method 上</li>
<li>按熱鍵 <code>⌃ + T</code>，選擇 <code>Convert Static Method to Extension</code></li>
</ol>
<p><img src="/images/csharp/extension-method/em002.png" alt="em002"></p>
<ul>
<li>Rider 自動幫我們將第一個參數加上 <code>this</code></li>
</ul>
<p><img src="/images/csharp/extension-method/em003.png" alt="em003"></p>
<ol>
<li>使用端會重構成 Function Pipeline</li>
</ol>
<p><img src="/images/csharp/extension-method/em004.png" alt="em004"></p>
<p><code>EmailFor</code> 與 <code>john</code> 可以進一步 Inline 掉。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Function Composition 與 Function Pipeline 講的是同一件事情，只是 Function Composition 偏數學，採用 <code>由右至左</code>，而 Function Pipeline 偏閱讀習慣，採用 <code>由左至右</code></li>
<li>Funciton Compostion 與 Function Pipeline 是 FP 極關鍵部分，以前總以為 C# 沒有支援，因此無法使用 C# 寫 FP，有了 Extension Method，C# 就能很輕鬆的實踐 FP</li>
<li>Rider 支援 <code>Convert static method to Extension</code>，讓我們快速重構成 Extension Method，再加上 <code>Inline Method</code> 與 <code>Inline Variable</code>，最後就會重構出 Function Pipeline</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/CSharpFunctionComposition" target="_blank" rel="external">GitHub</a> 與 <a href="https://github.com/oomusou/CSharpExtensionMethod" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Extension Method 是 C# 的獨門招式]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="Refactoring" scheme="https://oomusou.io/tags/Refactoring/"/>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
  </entry>
  
</feed>
