<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://oomusou.io/"/>
  <updated>2018-05-10T05:28:40.943Z</updated>
  <id>http://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何將 .NET Core 發佈到 Linux ?]]></title>
    <link href="http://oomusou.io/netcore/linux-deployment/"/>
    <id>http://oomusou.io/netcore/linux-deployment/</id>
    <published>2018-05-07T12:23:43.000Z</published>
    <updated>2018-05-10T05:28:40.943Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 為跨平台解決方案，我們可在 macOS 或 Windows 開發 .NET Core App，最後再發佈到 Linux 主機上。</p>
<p>.NET Core 提供 FDD 與 SCD 兩種發佈方式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.0.7<br>Docker for Mac 18.03.1-ce-mac65 (24312)<br>Ubuntu 16.04 LTS</p>
<h2 id="建立_Ubuntu_Container">建立 Ubuntu Container</h2><hr>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker run --name <span class="constant">MyUbuntu</span> -dt -v /<span class="constant">Users</span>/<span class="constant">Oomusou</span>/<span class="constant">Code</span><span class="symbol">:/var/code</span> <span class="symbol">ubuntu:</span><span class="number">16.04</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<ul>
<li><strong>–name</strong> : 替 container 取一個人能夠識別的名字 <code>MyUbuntu</code> ( 若省略，Docker 將隨機命名 )</li>
<li><strong>-d</strong> : <code>d</code>etach，建立 container 後，就脫離目前 process</li>
<li><strong>-t</strong> : <code>t</code>erminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><strong>-v</strong> : <code>v</code>olumn，定義 container 與 host os 的共用路徑，<code>:</code> 左側的 <code>/Users/Oomusou/Code</code> 為 host os 的路徑； <code>:</code> 右側的 <code>/var/code</code> 為 Ubuntu container 內部的路徑</li>
<li><strong>ubuntu:16.04</strong> : Ubuntu 的官方 image 名稱，特別指定版本 16.04</li>
</ul>
<blockquote>
<p>因為目前 Ubuntu 18.04 LTS 已經發布，但 .NET Core SCD 尚未支援 Ubuntu 18.04，所以先暫時使用 Ubuntu 16.04</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux000.png" alt="linux000"></p>
<ol>
<li>輸入 <code>docker run</code> 下載 Ubuntu 16.04 LTS image 並執行 container</li>
</ol>
<p><strong>進入 Ubuntu</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><strong>-i</strong> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><strong>-t</strong> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><strong>MyUbuntu</strong> : Container 名稱</li>
<li><strong>bash</strong> : 對 container 下的指令</li>
</ul>
<p><img src="/images/netcore/linux-deployment/linux001.png" alt="linux001"></p>
<ol>
<li>輸入 <code>docker exec -it MyUbuntu bash</code> 進入 Ubuntu</li>
<li>顯示 Ubuntu command prompt</li>
</ol>
<p><strong>安裝 Linux Library</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">0677</span>c0f17607 $ apt-get update</span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ apt-get install -y libunwind8 liblttng-ust0 libcurl3 libssl1<span class="number">.0</span><span class="number">.0</span> libuuid1 libkrb5-<span class="number">3</span> zlib1g libicu55 curl</span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>.NET Core 要能執行在 Linux，除了 .NET Core Runtime Library 外，有些 Linux 的 Library 也必須具備。</p>
<p>根據 <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a> 所建議，一個能執行 .NET Core 的 Ubuntu，必須具備以下 library：</p>
<ul>
<li>libunwind8</li>
<li>liblttng-ust0</li>
<li>libcurl3</li>
<li>libssl1.0.0</li>
<li>libuuid1</li>
<li>libkrb5-3</li>
<li>zlib1g</li>
<li>libicu52 (for 14.X)</li>
<li>libicu55 (for 16.X)</li>
<li>libicu57 (for 17.X)</li>
</ul>
<blockquote>
<p>一般 Ubuntu Desktop 或 Ubuntu Server，這些 library 都已經內建，不用另外安裝，但 Ubuntu Docker 則需要另外安裝這些 library</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux002.png" alt="linux002"></p>
<ol>
<li>輸入 <code>apt-get update</code> 更新本機套件清單</li>
<li>輸入 <code>apt-get …</code> 安裝 Linux library</li>
</ol>
<blockquote>
<p>安裝完 Linux library 後，輸入 <code>exit</code> 暫時離開 container 回到 host os</p>
</blockquote>
<h2 id="建立_-NET_Core_App">建立 .NET Core App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>dotnet new</code> 建立專案。</p>
<ul>
<li><strong>console</strong> : 建立 console 類型專案</li>
<li><strong>-o</strong> : <code>o</code> output，建立在 <code>MyConsole</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/linux-deployment/linux003.png" alt="linux003"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 建立 .NET Core App</li>
</ol>
<h2 id="SCD">SCD</h2><hr>
<blockquote>
<p>SCD</p>
<p>Self-Contained Deployment</p>
<p>Linux 不需事先安裝 .NET Core SDK，直接將檔案複製到 Linux 即可執行</p>
</blockquote>
<p><strong>以 SCD 發佈</strong><br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="char">$ </span>cd <span class="class">MyConsole</span></span><br><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>dotnet publish -c <span class="class">Release</span> -r linux-x64</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
<li><strong>-r</strong>：<code>r</code>untime，根據指定參數整理成該平台 SCD 所需要的所有檔案，其中 <code>linux-x64</code> 為 Linux 平台</li>
</ul>
<p><img src="/images/netcore/linux-deployment/linux004.png" alt="linux004"></p>
<ol>
<li>進入專案目錄內</li>
<li>輸入 <code>dotnet publish -c Release -r linux-x64</code> 以 SCD 發佈</li>
<li>發佈到 <code>/bin/Release/netcoreapp2.0/linux-x64/publish</code> 目錄下</li>
</ol>
<p><img src="/images/netcore/linux-deployment/linux013.png" alt="linux013"></p>
<p>由於 SCD 不要求 Linux 預先安裝 .NET Core SDK，因此 <code>publish</code> 目錄下多達 178 個檔案。</p>
<p><strong>再次進入 Ubuntu</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux005.png" alt="linux006"></p>
<ol>
<li>輸入 <code>docker exec -it MyUbuntu bash</code> 再次進入 Ubuntu</li>
<li>顯示 Ubuntu command prompt</li>
</ol>
<p><strong>執行 .NET Core App</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>cd /var/code/<span class="constant">CSharp/MyConsole/</span>bin/<span class="constant">Release/</span>netcoreapp2.<span class="number">0</span>/linux-x64</span><br><span class="line">/publish</span><br><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>./<span class="constant">MyConsole</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於目前 Ubuntu container 與 host os 共用目錄，因此不用特別將檔案複製到 Ubuntu 內，直接將目錄切換到 <code>/var/code/CSharp/MyConsole/bin/Release/netcoreapp2.0/linux-x64 /publish</code> 執行 <code>MyConsole</code>。</p>
<p><img src="/images/netcore/linux-deployment/linux006.png" alt="linux006"></p>
<ol>
<li>將目錄切換到  <code>publish</code> 目錄下</li>
<li>執行 <code>MyConsole</code></li>
<li>成功顯示  <code>Hello World!</code></li>
</ol>
<blockquote>
<p>注意此時 Ubuntu 並未安裝任何 .NET Core Runtime，只安裝了 .NET Core 所要求的 library 而已，一般 Ubuntu Desktop 或 Ubuntu Server 甚至連 library 都不用安裝，可以說真的將 <code>publish</code> 複製到 Ubuntu 即可執行</p>
</blockquote>
<h2 id="FDD">FDD</h2><hr>
<blockquote>
<p>FDD</p>
<p>Framework-Dependent Deployment</p>
<p>須先在該平台安裝 .NET Core SDK，然後將相關 DLL 複製過去即可執行</p>
</blockquote>
<p><strong>安裝 Curl Library</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>apt-get install curl</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於需使用 <code>curl</code> 下載 .NET Core SDK，先安裝 <code>curl</code> library。</p>
<p><img src="/images/netcore/linux-deployment/linux007.png" alt="linux007"></p>
<p><strong>安裝 microsoft.qpg</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">0677</span>c0f17607 $ curl https:<span class="comment">//packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span></span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ mv microsoft<span class="class">.gpg</span> /etc/apt/trusted<span class="class">.gpg</span><span class="class">.d</span>/microsoft<span class="class">.gpg</span></span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<ol>
<li>輸入 <code>curl …</code> 下載 <code>microsoft.qpg</code> 到本機</li>
<li>將 <code>microsoft.qpg</code> 移到適當目錄</li>
<li>加入 Microsoft 套件庫位置</li>
</ol>
<p><strong>安裝 .NET Core SDK</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>安裝 <code>apt-transport-https</code> 套件。</p>
<p><img src="/images/netcore/linux-deployment/linux008.png" alt="linux008"></p>
<ol>
<li>輸入 <code>apt-get install apt-transport-https</code> 安裝 <code>apt-transport-https</code>套件</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>apt-get update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於剛剛新加入了 Microsoft 自己的套件庫，所以需要在執行 <code>apt-get update</code> 更新一次本機套件清單。</p>
<p><img src="/images/netcore/linux-deployment/linux009.png" alt="linux009"></p>
<ol>
<li>輸入 <code>apt-get update</code> 更新本機套件清單</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@<span class="number">0677</span>c0f17607 $ apt-get install -y dotnet-sdk-<span class="number">2.1</span><span class="number">.4</span></span><br><span class="line">root@<span class="number">0677</span>c0f17607 $ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>正式安裝 .NET Core SDK 2.1.4。</p>
<p><img src="/images/netcore/linux-deployment/linux010.png" alt="linux010"></p>
<ol>
<li>輸入 <code>apt-get install -y dotnet-sdk-2.1.4</code> 安裝 .NET Core SDK</li>
</ol>
<blockquote>
<p>安裝完 .NET Core SDK 後，輸入 <code>exit</code> 暫時回到 host os</p>
</blockquote>
<p><strong>以 FDD 發佈</strong></p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="char">$ </span>cd <span class="class">MyConsole</span></span><br><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>dotnet publish -c <span class="class">Release</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p>使用 <code>dotnet publish</code> 將編譯後的 dll 與其 dependency 整理到 <code>publish</code> 目錄，將來只要將此目錄 deploy 到 server 即可。</p>
<ul>
<li><strong>-c</strong> : <code>c</code>onfiguration，預設 <code>dotnet publish</code> 是將 <code>Debug</code> 模式的 dll 整理至 <code>publish</code> 目錄，若要整理 <code>Release</code> 模式的的 dll，需要配合 <code>-c</code> 參數</li>
</ul>
<blockquote>
<p>若不加 <code>-r</code>，預設即為 <code>FDD</code></p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux011.png" alt="linux011"></p>
<ol>
<li>進入專案目錄內</li>
<li>輸入 <code>dotnet publish -c Release</code> 以 FDD 發佈</li>
<li>發佈到 <code>/bin/Release/netcoreapp2.0/publish</code> 目錄下</li>
</ol>
<p><img src="/images/netcore/linux-deployment/linux014.png" alt="linux014"></p>
<p>FDD 只需 4 個檔案而已。</p>
<p><strong>再次進入 Ubuntu</strong></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 host os，不是 container 內</p>
</blockquote>
<p><img src="/images/netcore/linux-deployment/linux005.png" alt="linux006"></p>
<ol>
<li>輸入 <code>docker exec -it MyUbuntu bash</code> 再次進入 Ubuntu</li>
<li>顯示 Ubuntu command prompt</li>
</ol>
<p><strong>執行 .NET Core App</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>cd /var/code/<span class="constant">CSharp/MyConsole/</span>bin/<span class="constant">Release/</span>netcoreapp2.<span class="number">0</span>/publish</span><br><span class="line">root<span class="variable">@0677c0f17607</span> <span class="variable">$ </span>dotnet <span class="constant">MyConsole.</span>dll</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意指令是下在 container 內，不是 host os</p>
</blockquote>
<p>由於目前 Ubuntu container 與 host os 共用目錄，因此不用特別將檔案複製到 Ubuntu 內，直接將目錄切換到 <code>/var/code/CSharp/MyConsole/bin/Release/netcoreapp2.0/publish</code> 執行 <code>MyConsole</code>。</p>
<p><img src="/images/netcore/linux-deployment/linux012.png" alt="linux012"></p>
<ol>
<li>將目錄切換到  <code>publish</code> 目錄下</li>
<li>以 <code>dotnet</code> 執行 <code>MyConsole.dll</code></li>
<li>成功顯示  <code>Hello World!</code></li>
</ol>
<h2 id="Summary">Summary</h2><hr>
<p>我們可發現 SCD 與 FDD 各有優點：</p>
<ol>
<li>SCD 不需 client 事先安裝 .NET Core SDK，但所需檔案數很多</li>
<li>FDD 所需檔案數很少，但 client 必須事先安裝 .NET Core SDK</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>SCD 與 FDD 都能使 .NET Core App 達成跨平台到 Linux 執行</li>
<li>若是開發 Linux Console App，則建議使用 FDD，畢竟 user 不見的有安裝 .NET Core SDK</li>
<li>若是要將 ASP.NET Core 安裝到到 Linux，則使用 SCD 或 FDD 皆可</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/index" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x" target="_blank" rel="external">Prerequisites for .NET Core on Linux</a></p>
]]></content>
    <summary type="html">
    <![CDATA[以 SCD 與 FDD 部署到 Linux]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 JavaScript 之 Mixin]]></title>
    <link href="http://oomusou.io/javascript/mixin/"/>
    <id>http://oomusou.io/javascript/mixin/</id>
    <published>2018-05-06T12:23:43.000Z</published>
    <updated>2018-05-07T03:02:03.054Z</updated>
    <content type="html"><![CDATA[<p>實務上常會發現需要兩個物件的 method，但礙於 JavaScript 只能 <code>單一繼承</code> 於 prototype，我們無法同時繼承兩個物件；但透過 Mixin，我們可實現類似 <code>多重繼承</code> 的功能。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>ECMAScript 2015</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Mixin</p>
<p>將物件中所有 method 複製到其他物件，讓該物件馬上擁有新的 method</p>
</blockquote>
<p>實務上我們可能會想要 code reuse 其他物件的 method，直覺會想到 <code>繼承</code>，但：</p>
<ol>
<li>JavaScript 只能單一繼承於 prototype，若我想要 code reuse 到兩個以上的物件呢？</li>
<li>根據 <code>里氏替換原則</code>：<code>父類別能被子類別取代</code>，也就是我們該以 <code>多型</code> 為前提使用繼承，而不該以 <code>code reuse</code> 使用繼承</li>
</ol>
<p>但實務上的確有 code reuse 的需求，既然不能用 <code>繼承</code>，我們該用什麼呢 ?</p>
<p>答案就是：Mixin</p>
<h2 id="Object_Mixin">Object Mixin</h2><hr>
<p><strong>Mixin1.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = &#123;</span><br><span class="line">    area: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LogMixin = &#123;</span><br><span class="line">    startLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    stopLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Button.prototype, CircleMixin, LogMixin);</span><br><span class="line"><span class="comment">// Button.prototype = &#123;...Button.prototype, ...CircleMixin, ...LogMixin&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start log...</span></span><br><span class="line"><span class="comment">// 78.53981633974483</span></span><br><span class="line"><span class="comment">// End log...</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = &#123;</span><br><span class="line">    area: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>CircleMixin</code>，其本質為 object，擁有 <code>area()</code> method。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = &#123;</span><br><span class="line">    startLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    stopLog: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>LogMixin</code>，其本質亦為 object，擁有 <code>startLog()</code> 與 <code>stopLog()</code> method。</p>
<p>17 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>宣告 <code>Button</code> constructor function，也可使用 ECMAScript 2015 的 <code>class</code> 與 <code>constructor</code>。</p>
<blockquote>
<p>Class 與 construcor function 本質相同，只是 syntax sugar</p>
</blockquote>
<p>27 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(Button.prototype, CircleMixin, LogMixin);</span><br></pre></td></tr></table></figure>
<p>如今我們希望 <code>Button</code> class 同時有 <code>CircleMixin</code> 的 <code>area()</code>，又有 <code>LogMixin</code> 的 <code>startLog()</code> 與 <code>stopLog()</code>。</p>
<p>若使用繼承，JavaScript 無法同時繼承 <code>CircleMixin</code> 與  <code>LogMixin</code>。</p>
<p>且 <code>Button</code> 無論繼承 <code>CircleMixin</code> 與 <code>LogMixin</code> 都違反 <code>里氏替換原則</code>，因為 <code>Button</code> 並非 <code>CircleMixin</code> 或 <code>LogMixin</code> 多型體系下的成員。</p>
<p>但透過 <code>Object.assign()</code>，我們能輕易將 <code>CircleMixin</code> 與 <code>LogMixin</code> 的所有 method 複製到 <code>Button.prototype</code>，讓 <code>Button</code> class 瞬間有了新的 method。</p>
<p>28 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.prototype = &#123;...Button.prototype, ...CircleMixin, ...LogMixin&#125;;</span></span><br></pre></td></tr></table></figure>
<p>亦可使用 ECMAScript 2015 的 <code>…</code> object spread operator，將所有物件 property 展開，重新合併重新的物件給 <code>Button.prototype</code>。</p>
<p>30 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br></pre></td></tr></table></figure>
<p>經過 Mixin 之後，<code>button</code> 物件就有了 <code>startLog()</code>、<code>area()</code> 與 <code>stopLog()</code> 三個 method，重點還是來自於不同的 Mixin 物件。</p>
<blockquote>
<p>我們可發現 Mixin 為 object，以 Object Composition 方式組合出新功能，與 GoF  所謂的 <code>多用組合，少用繼承</code> 想法不謀而合，同時也解決了 <code>單一繼承</code> 與 <code>里氏替換原則</code> 所面臨的挑戰</p>
</blockquote>
<h2 id="Class_Mixin">Class Mixin</h2><hr>
<p><strong>Mixin2.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    area() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LogMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    startLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stopLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">LogMixin</span>(<span class="title">CircleMixin</span>(<span class="title">Base</span>)) </span>&#123;</span><br><span class="line">    constructor(radius) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start log...</span></span><br><span class="line"><span class="comment">// 78.53981633974483</span></span><br><span class="line"><span class="comment">// End log...</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    area() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>CircleMixin</code>，其本質為 function，回傳擁有 <code>area()</code> 的 class。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = base =&gt; <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">base</span> </span>&#123;</span><br><span class="line">    startLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stopLog() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>宣告 <code>LoginMixin</code>，其本質為 function，回傳擁有 <code>startLog()</code> 與  <code>stopLog()</code> 的 class。</p>
<p>17 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">LogMixin</span>(<span class="title">CircleMixin</span>(<span class="title">Base</span>)) </span>&#123;</span><br><span class="line">    constructor(radius) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>extends</code> 透過 <code>CircleMixin()</code> 與 <code>LogMixin()</code>，達成類似 <code>多重繼承</code> 的效果。</p>
<blockquote>
<p>語法上雖然看似 <code>繼承</code>，實則為 Class Composition，與 Object Mixin 差異在於：</p>
<ul>
<li>Object Mixin 是建立 object 後再 <code>組合</code> object</li>
<li>Class Mixin 是先組合 class 再建立 object</li>
</ul>
</blockquote>
<p>26 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br></pre></td></tr></table></figure>
<p>對 client 而言，使用 Object Mixin 與 Class Mixin ，用起來都一樣。</p>
<h2 id="Functional_Mixin">Functional Mixin</h2><hr>
<p><strong>Mixin3.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.area = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LogMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.stopLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">CircleMixin.call(Button.prototype);</span><br><span class="line">LogMixin.call(Button.prototype);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start log...</span></span><br><span class="line"><span class="comment">// 78.53981633974483</span></span><br><span class="line"><span class="comment">// End log...</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CircleMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.area = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 <code>CircleMixin</code> 由 object 改成 function。</p>
<p>使用 <code>this.area</code> 宣告物件的 method。</p>
<p>第 7 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Start log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.stopLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"End log..."</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 <code>LoginMixin</code> 由 object 改成 function。</p>
<p>使用 <code>this.startLog</code> 與 <code>this.stopLog</code> 宣告物件的 method。</p>
<p>17 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.radius = radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Button &#123;</span></span><br><span class="line"><span class="comment">//     constructor(radius) &#123;</span></span><br><span class="line"><span class="comment">//         this.radius = radius;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>宣告 <code>Button</code> constructor function，也可使用 ECMAScript 2015 的 <code>class</code> 與 <code>constructor</code>。</p>
<p>27 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CircleMixin.call(Button.prototype);</span><br><span class="line">LogMixin.call(Button.prototype);</span><br></pre></td></tr></table></figure>
<p>在 <code>CircleMixin()</code> 與 <code>LoginMixin()</code> 中都使用了 <code>this</code>，在 JavaScript 中，最重要的就是 <code>this</code> 到底是誰 ?</p>
<p>我們使用 <code>Function.call()</code> 將 <code>this</code> 指向 <code>Button.prototype</code>，因此 <code>area()</code>、<code>startLog()</code> 與 <code>stopLog()</code> 就自然成為 <code>Button</code> 的 method。</p>
<p>30 行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="keyword">new</span> Button(<span class="number">5</span>);</span><br><span class="line">button.startLog();</span><br><span class="line"><span class="built_in">console</span>.log(button.area());</span><br><span class="line">button.stopLog();</span><br></pre></td></tr></table></figure>
<p>對 client 而言，無論使用 Object Mixin 、Class Mixin 或 Functional Mixin，用起來都一樣。</p>
<blockquote>
<p>Functional Mixin 使用了 <code>this</code>，因此必須搭配 <code>Function.call()</code> 指定 <code>this</code> 為何物件</p>
</blockquote>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Q：Mixin 的價值何在？</p>
</blockquote>
<ol>
<li>解決 <code>單一繼承</code> 所面臨的難題</li>
<li>解決 <code>里氏替換原則</code> 將 <code>繼承</code> 用在 <code>多型</code> 的限制</li>
</ol>
<blockquote>
<p>Q：Mixin 實務上該用在哪裡 ?</p>
</blockquote>
<ol>
<li>單純為了 code reuse，且之間並沒有 <code>多型</code> 的關係，因此不適合使用 <code>繼承</code></li>
<li>需要實現 Composition</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有別於 <code>繼承</code>，Mixin 提供了以 Composition 為基礎的解決方案</li>
<li>Functional Mixin 需要有 <code>this</code> 與 <code>call</code> 觀念，門檻較高</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/JavaScriptMixin" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://twitter.com/angusTweets" target="_blank" rel="external">Angus Croll</a>, <a href="https://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/" target="_blank" rel="external">A fresh look at JavaScript Mixins</a><br><a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">MDN web docs</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">Classes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[動態組合物件取代繼承]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://oomusou.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Higher Order Function 抽出共用 ?]]></title>
    <link href="http://oomusou.io/csharp/higer-order-function/"/>
    <id>http://oomusou.io/csharp/higer-order-function/</id>
    <published>2018-05-04T13:23:43.000Z</published>
    <updated>2018-05-04T15:16:52.215Z</updated>
    <content type="html"><![CDATA[<p>無論使用 TDD 或 Design Pattern，最後一定會經歷 Refactoring 階段，處理程式碼共用部分，避免違反 DRY 原則。</p>
<p>在傳統 OOP，我們會使用 <code>Pull Member Up</code> 將共用 method 抽到 abstract class；但若使用 FP，我們則有新的武器：將共用部分抽成 Higher Order Function，將不共用部分以 Lambda 傳入。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.0.7<br>C# 7.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p><strong>Apple.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Apple;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _discount = <span class="number">0.9</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> PadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _discount * _products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Nintendo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Nintendo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nintendo</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _minus = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Nintendo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Switch(),</span><br><span class="line">                <span class="keyword">new</span> Zelda()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _products.Sum(product =&gt; product.GetPrice()) - _minus;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Apple.cs</code> 與 <code>Nintendo.cs</code> 都實踐相同的 <code>IPrice</code>，且我們已經看到有兩處程式碼非常相近：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br></pre></td></tr></table></figure>
<p>都具有 <code>_products</code> List。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _discount * _products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _products.Sum(product =&gt; product.GetPrice()) - _minus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也非常相近，都共用 <code>Products.Sum(product =&gt; product.GetPrice())</code>。</p>
<h2 id="OOP_Refactoring">OOP Refactoring</h2><hr>
<p><strong>ComboBase.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComboBase</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> List&lt;IPrice&gt; Products;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽出 <code>ComboBase</code> abstract class，將重複部分全放在 parent class。</p>
<p>但無論怎麼抽 class，一樣都實踐 <code>IPrice</code> interface，因此對 client 沒有影響，符合 <code>開放封閉原則</code>。</p>
<p><strong>Apple.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Apple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _discount = <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> PadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _discount * <span class="keyword">base</span>.GetPrice();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 8 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">ComboBase</span></span><br></pre></td></tr></table></figure>
<p>從原本實踐 <code>IPrice</code> interface，改繼承 <code>ComboBase</code>。</p>
<p>由於 <code>ComboBase</code> 也是實踐 <code>IPrice</code>，因此對 client 沒有影響，符合 <code>開放封閉原則</code>。</p>
<p>22 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _discount * <span class="keyword">base</span>.GetPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於 <code>ComboBase.GetPrice()</code> 已經實作 <code>Products.Sum(product =&gt; product.GetPrice())</code>，因此使用 <code>base.GetPrice()</code> 呼叫 parent class 的 <code>GetPrice()</code>。</p>
<p><strong>Nintendo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Nintendo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nintendo</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _minus = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Nintendo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Switch(),</span><br><span class="line">                <span class="keyword">new</span> Zelda()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">base</span>.GetPrice() - _minus;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>21 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">base</span>.GetPrice() - _minus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣使用 <code>base.GetPrice()</code> 呼叫 parent class 的 <code>GetPrice()</code>，只是在此是 <code>- _minus</code> 。</p>
<blockquote>
<p>這就是 OOP 典型的手法，將共用部分 <code>Pull Member Up</code> 到 parent class，並將 method 開成 <code>virtual</code>，再有 child class 去 <code>override</code> method，且使用 <code>base</code> 去呼叫 parent class 的 method</p>
</blockquote>
<h2 id="FP_Refactoring">FP Refactoring</h2><hr>
<p>在 FP 由於有了 Higher Order Function，解決 DRY 有了新的手法：</p>
<blockquote>
<p>將共用部分抽成 Higher Order Function，將不共用部分以 Lambda 傳入</p>
</blockquote>
<p><strong>ComboBase.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComboBase</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> List&lt;IPrice&gt; Products;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">GetSumOfPrice</span>(<span class="params">Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; action</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> action(Products.Sum(product =&gt; product.GetPrice()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">GetSumOfPrice</span>(<span class="params">Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; action</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> action(Products.Sum(product =&gt; product.GetPrice()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將共用部分抽成 <code>GetSumOfPrice()</code>，<code>action</code> 參數部分則傳入不共用部分。</p>
<p>將共用的 <code>Products.Sum(product =&gt; product.GetPrice())</code> 傳入 <code>action()</code> 的參數。</p>
<p>17 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure>
<p>原本 <code>GetPrice()</code> 使用 <code>abstract</code> 即可，由 child class 負責實作。</p>
<p><strong>Apple.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Apple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Apple</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _discount = <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Apple</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> PadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> GetSumOfPrice(sum =&gt; _discount * sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>21 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetSumOfPrice(sum =&gt; _discount * sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>呼叫 parent class 的 <code>GetSumOfPrice()</code> ，回傳即為 lambda 的第一個參數 <code>sum</code> ，既然拿到 <code>sum</code>，我們就能在 <code>=&gt;</code> 之後做任何我們想做的運算。</p>
<p><strong>Nintendo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Interfaces;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary.Single.Nintendo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary.Combo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Nintendo</span> : <span class="title">ComboBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> _minus = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Nintendo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Switch(),</span><br><span class="line">                <span class="keyword">new</span> Zelda()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> GetSumOfPrice(sum =&gt; sum - _minus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣呼叫 parent class 的 <code>GetSumOfPrice()</code> ，回傳即為 lambda 的第一個參數 <code>sum</code> ，既然拿到 <code>sum</code>，我們就能在 <code>=&gt;</code> 之後做任何我們想做的運算。</p>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Q : 兩種抽共用的方式都可行，有什麼差別呢 ?</p>
</blockquote>
<p>若以結果論，的確 OOP 與 FP 方法都可行，但 FP 方式語意較佳。</p>
<h3 id="OOP">OOP</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OOP 為了要使用 <code>virtual</code> 與 <code>override</code> ，使用同一個 method 名稱，硬將 <code>Products.Sum(product =&gt; product.GetPrice())</code> 抽到 parent class 的 <code>GetPrice()</code>。</p>
<p>實務上常會發現，為了抽共用，常將與 method 名稱不符的 code 抽到 parent class。</p>
<p>如 <code>Products.Sum(product =&gt; product.GetPrice())</code> 與 <code>GetPrice()</code> 並不相符，應該要取名 <code>GetSumOfPrice()</code> 較為恰當。</p>
<p>此外，將 <code>Products.Sum(product =&gt; product.GetPrice())</code> 放到 parent class 的 <code>GetPrice()</code>，會使得 code 被綁在 <code>IPrice</code> 繼承體系，這段 code 將來幾乎無法再重構。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _discount * <span class="keyword">base</span>.GetPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Child class 無法藉由 <code>base.GetPrice()</code> 得知語意，一定得 trace 進 parent class 才知道 <code>base.GetPrice()</code> 到底在幹什麼。</p>
<h3 id="FP">FP</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">double</span> <span class="title">GetSumOfPrice</span>(<span class="params">Func&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; action</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> action(Products.Sum(product =&gt; product.GetPrice()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GetSumOfPrice()</code> 與  <code>Products.Sum(product =&gt; product.GetPrice())</code> 名實相符。</p>
<p>且 <code>GetSumOfPrice()</code> 並非 <code>IPrice</code> 繼承體系的一員，將來很容易將 <code>GetSumOfPrice()</code> 重構到其他 class，甚至重構到 static helper class，非常靈活。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetSumOfPrice(sum =&gt; _discount * sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Child class 也非常清楚看到 <code>GetSumOfPrice()</code>，且回傳值就是 <code>sum</code>，語意非常清楚，不必 trace 到 parent class。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Pull Member Up</code> 是典型 OOP 的重構手法，但藉由 FP 的 Higher Order Function，一樣可以實踐 DRY 原則，且更為靈活</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 FP 方式處理共用]]>
    
    </summary>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 iTunes 不要對 iOS Device 備份 ?]]></title>
    <link href="http://oomusou.io/macos/ItunesNotBackup/"/>
    <id>http://oomusou.io/macos/ItunesNotBackup/</id>
    <published>2018-05-04T12:23:43.000Z</published>
    <updated>2018-05-04T09:44:44.093Z</updated>
    <content type="html"><![CDATA[<p>若要對 iOS device 同步 mp3，預設會先對 iOS device 備份，會浪費很多時間，如何讓 iTune 永遠不要備份呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>iTunes 12.7.4.80</p>
<h2 id="Recipe">Recipe</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com<span class="class">.apple</span><span class="class">.iTunes</span> DeviceBackupsDisabled -bool true</span><br></pre></td></tr></table></figure>
<p>在 terminal 貼上以上指令，iTunes 就永遠不再備份了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>不備份 iOS 當然也有風險，不過實務上建議將重要資料直接備份在雲端，如 iCloud 或 Dropbox，而不用整個 iOS device 備份</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[必須在 terminal 下指令]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使 Finder 顯示隱藏檔 ?]]></title>
    <link href="http://oomusou.io/macos/finder-show-hidden-files/"/>
    <id>http://oomusou.io/macos/finder-show-hidden-files/</id>
    <published>2018-05-02T12:23:43.000Z</published>
    <updated>2018-05-02T06:06:25.921Z</updated>
    <content type="html"><![CDATA[<p>Finder 預設不會顯示隱藏檔，也沒有 GUI 可以設定，必須直接在 terminal 下指令。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4</p>
<h2 id="Recipe">Recipe</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults <span class="command">write</span> com.apple.finder AppleShowAllFiles -<span class="type">boolean</span> <span class="constant">true</span> ; killall Finder</span><br></pre></td></tr></table></figure>
<p>在 terminal  貼上以上指令，Finder 就會顯示隱藏檔了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>對初學者不顯示隱藏檔是安全的，但對 power user 卻不方便，透過以上設定，Finder 就可正常顯示隱藏檔了。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[必須在 terminal 下指令]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解決 SonarLint 的 Analyzer Not Loaded 錯誤訊息 ?]]></title>
    <link href="http://oomusou.io/sonarqube/sonarlint-analyzer-not-loaded/"/>
    <id>http://oomusou.io/sonarqube/sonarlint-analyzer-not-loaded/</id>
    <published>2018-04-30T14:23:43.000Z</published>
    <updated>2018-04-30T02:57:49.875Z</updated>
    <content type="html"><![CDATA[<p>當在 IntelliJ 平台使用 SonarLint 時，只要在 <code>SonarLint General Settings</code> 下按 <code>Update Binding</code> 就會出現 <code>Analyzer Not Loaded</code> 的錯誤訊息，這該如何解決呢？</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 6.7.2 LTS<br>SonarTS 1.6<br>PhpStorm 2018.1<br>SonarLint 3.3.0.2482</p>
<h2 id="Sympton">Sympton</h2><hr>
<p><img src="/images/sonarqube/sonarlint-analyzer-not-loaded/sonarts000.png" alt="sonarts000"></p>
<p><strong><em>PhpStorm -&gt; Other Settings -&gt; SonarLint General Settings</em></strong></p>
<ol>
<li>當按下 <code>Update binding</code>，欲將 SonarQube server 上的 project lists、rules、profile 下載到本機</li>
<li>出現 <code>Analyzers Not Loaded</code> 錯誤訊息</li>
</ol>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p>SonarLint 3.3.0.2482 必須搭配使用 SonarTS 1.5 以上，但是 SonarQube 6.7.2 LTS 預設提供為 SonarTS 1.1，因此 SonarLint 無法載入 TypeScript analyzer。</p>
<blockquote>
<p>SonarQube 7.1 預設就提供 SonarTS 1.6，就不會有這個問題</p>
</blockquote>
<h2 id="Recipe">Recipe</h2><p><img src="/images/sonarqube/sonarlint-analyzer-not-loaded/sonarts001.png" alt="sonarts001"></p>
<ol>
<li>到 SonarTS 的 <a href="https://github.com/SonarSource/SonarTS/releases" target="_blank" rel="external">GitHub</a> 下載最新版 SonarTS 1.6</li>
<li>選擇 <code>.jar</code> 格式下載</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-analyzer-not-loaded/sonarts002.png" alt="sonarts002"></p>
<ol>
<li>到 SonarQube 安裝目錄下的 <code>extensions/plugins</code> </li>
<li>將原本的 <code>sonar-typescript-plugin-1.1.0.1079.jar</code> 刪除，以 <code>sonar-typescript-plugin-1.6.0.2388.jar</code> 取代之</li>
<li>重新啟動 SonarQube</li>
</ol>
<p>在 PhpStorm 重新 <code>Update binding</code> 就不會出現錯誤訊息了。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若使用 SonarQube 最新版就不會有這個問題，但若使用 SonarQube LTS，因為 SonarTS 的版本較舊，與 SonarLint 搭配就會有問題</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[SonarTS 版本太舊所導致]]>
    
    </summary>
    
      <category term="SonarLint" scheme="http://oomusou.io/tags/SonarLint/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何重灌 macOS High Sierra ?]]></title>
    <link href="http://oomusou.io/macos/install-clean-high-sierra/"/>
    <id>http://oomusou.io/macos/install-clean-high-sierra/</id>
    <published>2018-04-30T13:23:43.000Z</published>
    <updated>2018-04-30T02:45:59.428Z</updated>
    <content type="html"><![CDATA[<p>High Sierra 引入 APFS 新的磁碟格式後，優點是對 SSD 最佳化，效率很高，缺點是 APFS 使的 Time Machine 之前的備份面臨了極大的挑戰，除了無法整顆硬碟還原外，連要重新安裝 High Sierra 也很不方便。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>MacBook Pro Retina, 15”, Mid 2014<br>macOS 10.13.4</p>
<h2 id="Sympton">Sympton</h2><hr>
<ol>
<li>雖然一直更新到 High Sierra，也都一直有做 Time Machine 備份，但真的要整顆 SSD 還原時卻無法還原，出現 <code>An error occurred while restoring from the backup</code> 錯誤訊息</li>
<li>因為還原之前已經選擇 erase 整顆 SSD，因此只能選擇 reinstall macOS 一途</li>
<li>真的重灌 High Sierra 時，到最後會出現 <code>Could not create preboot volumn for APFS install</code></li>
</ol>
<p>也就是面臨進退兩難，退無法使用 Time Machine 還原，進也無法重灌 High Sierra 的窘境。</p>
<blockquote>
<p>這些問題都是我在 MBPR Mid 2014 所遇到，不確定其他 MBPR 是否也如此</p>
</blockquote>
<h2 id="Root_Cause">Root Cause</h2><hr>
<p>所有的問題都出在 APFS。</p>
<ol>
<li>Time Machine 目前對於 APFS  的支援，之前舊的備份無法整顆 SSD 還原</li>
<li>High Sierra 無法直接安裝在 APFS 格式的 SSD，僅能由 <code>Mac OS Extented (Journaled)</code> 格式的 SSD 安裝，在升級成 APFS 格式</li>
</ol>
<p><code>1</code> 基本上無解，只能將原本 Time Machine 備份砍掉後，然後備份重新開始。</p>
<p><code>2</code> 可自行將 SSD 重新格式化成 <code>Mac OS Extented (Journaled)</code> 格式後即可重灌。</p>
<h2 id="Recipe">Recipe</h2><hr>
<blockquote>
<p>由於無法截圖，只能以文字描述</p>
</blockquote>
<ul>
<li>以 ⌘ + R 開機，在 <code>Disk Utility</code> 將 APFS 格式的 SSD 刪除，使 MBPR 處於沒有 SSD 狀態</li>
</ul>
<blockquote>
<p>SSD 一旦被格式化成 APFS 之後，就無法格式化成其他格式，因此只能將 SSD 刪除</p>
</blockquote>
<ul>
<li>再以 ⌘ + R 重新開機，因為已經沒 SSD 可以開機，BIOS 會自動要求連上網路，下載最小可開機所需要的檔案</li>
<li>進入 <code>Disk Utility</code>，將 SSD 格式化成 <code>Mac OS Extented (Journaled)</code></li>
<li>離開 <code>Disk Utility</code>，進入 <code>Reinstall OS X</code>，會出現 <code>OS X Yosemite</code> 安裝畫面</li>
</ul>
<blockquote>
<p>這裡預估不同 MBPR 的版本會不同，當時 MBPR Mid 2014 所附的版本就是 Yosemite</p>
</blockquote>
<ul>
<li>Yosemite 安裝完成後，再由 App Store 更新成 High Sierra</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>APFS 格式雖然適合 SSD，但對於 Resintall OS X 與 Time Machine 並不友善，尤其舊的備份竟然無法在 APFS 整顆 SSD 還原</li>
<li>High Sierra 無法直接安裝在 APFS，雖然可以手動格式化成 <code>Mac OS Extented (Journaled)</code>，但要先安裝 Yosemite，才能升級為 High Sierra，這也使得 Reinstall OS X 變得非常麻煩</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[因為 APFS 所導致的問題]]>
    
    </summary>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 macOS 安裝 SonarQube ?]]></title>
    <link href="http://oomusou.io/sonarqube/macos/"/>
    <id>http://oomusou.io/sonarqube/macos/</id>
    <published>2018-04-30T12:23:43.000Z</published>
    <updated>2018-04-30T02:02:59.400Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。</p>
<p>透過 Homebrew，我們可以很簡單地安裝 SonarQube。<br><a id="more"></a></p>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Java 10.0.1 2018-04-17<br>SonarQube 7.1</p>
<h2 id="安裝_SonarQube">安裝 SonarQube</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 Home-brew 安裝 SonarQube。</p>
<p><img src="/images/sonarqube/macos/mac000.png" alt="ac00"></p>
<ol>
<li>輸入 <code>brew install sonarqube</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 SonarQube，輸入 <code>brew services start sonarqube</code></li>
<li>若想自行啟動 SonarQube，輸入 <code>sonar console</code></li>
</ol>
<h2 id="啟動_SonarQube">啟動 SonarQube</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sonar <span class="built_in">console</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar console</code> 自行啟動 SonarQube。</p>
<p><img src="/images/sonarqube/macos/mac001.png" alt="ac00"></p>
<ol>
<li>輸入 <code>sonar console</code> 自行啟動 SonarQube</li>
</ol>
<h2 id="安裝_SonarQube-1">安裝 SonarQube</h2><hr>
<p><img src="/images/sonarqube/macos/mac002.png" alt="ac00"></p>
<ol>
<li>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功</li>
<li>右上角 <code>Log in</code> 可登入管理設定 SonarQube，預設為 <code>admin/admin</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>雖然 SonarQube 主要是安裝在 Linux server 上，但透過安裝在 macOS，我們也可以在本機測試 SonarQube</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[直接在 macOS 執行 SonarQube]]>
    
    </summary>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
      <category term="macOS" scheme="http://oomusou.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Visual Studio 使用 SonarLint ?]]></title>
    <link href="http://oomusou.io/sonarqube/sonarlint-vs/"/>
    <id>http://oomusou.io/sonarqube/sonarlint-vs/</id>
    <published>2018-04-29T13:23:43.000Z</published>
    <updated>2018-04-29T14:24:35.311Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 除了搭配 Jenkins 檢查程式碼品質外，還可以在 IDE 中使用 SonarLint，讓 developer 在程式開發階段就及早發現可能的 bugs、vulenrability、code smell 與 duplication，本文將介紹 SonarLint + Visual Studio。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>Windows 10 Pro 1709 16299.371<br>SonarQube 6.7.2 LTS<br>Visual Studio Enterprise 2017 15.6.6<br>SonarLint 3.10.0.3095<br>C# 7.2<br>.NET Framework 4.6.1</p>
<h2 id="安裝_SonarLint">安裝 SonarLint</h2><hr>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint000.png" alt="sonarlint000"></p>
<p><strong><em>Tools -&gt; Extensions and Update…</em></strong></p>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint001.png" alt="sonarlint001"></p>
<ol>
<li><p>選擇 <code>Online</code></p>
</li>
<li><p>輸入 <code>SonarLint</code></p>
</li>
<li><p>選擇 <code>SonarLint for Visual Studio</code> 下載</p>
</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint002.png" alt="sonarlint002"></p>
<ol>
<li>關閉 Visual Studio 後，按 <code>Modify</code> 安裝 SonarLint for Visual Studio</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint003.png" alt="sonarlint003"></p>
<p>安裝完第一次進入 Visual Studio 後</p>
<ol>
<li>SonarLint 即將下載其他語言的 scanner，如 JavaScript，將 <code>Don&#39;t show this message again</code> 打勾</li>
<li>按 <code>Yes</code> 繼續</li>
</ol>
<h2 id="連接_SonarQube_Server">連接 SonarQube Server</h2><hr>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint004.png" alt="sonarlint004"></p>
<p>先開啟 solution。</p>
<p><strong><em>Analyze -&gt; Manage SonarQube Connections…</em></strong></p>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint005.png" alt="sonarlint005"></p>
<ol>
<li>按 <code>Connect...</code> 連接 SonarQube server</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint006.png" alt="sonarlint006"></p>
<ol>
<li>輸入 SonarQube server 網址</li>
<li>Login / Password 填預設的 <code>admin/admin</code></li>
</ol>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint007.png" alt="sonarlint007"></p>
<p>連上 SonarQube server 後，會出現目前 server 上所有的 project，選擇你要綁定的專案。</p>
<blockquote>
<p>綁定後會從 server 下載 profile 與 rule 到本機</p>
</blockquote>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint008.png" alt="sonarlint008"></p>
<p>與 SonarQube 綁定後，在 solution 下會出現 <code>SonarQube</code>。</p>
<h2 id="Automatic_Analysis">Automatic Analysis</h2><hr>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint009.png" alt="sonarlint009"></p>
<p>SonarQube 檢查出 <code>IPadAir.cs</code> 有 code smell，class 不該使用 <code>I</code> 開頭。</p>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint010.png" alt="sonarlint010"></p>
<p>SonarLint 能在 Visual Studio 內即時的檢查出目前檔案的 issue。</p>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint011.png" alt="sonarlint011"></p>
<p>點擊左側的小燈泡，SonarLint 會解釋該 rule 檢查的理由。</p>
<h2 id="Manual_Analysis">Manual Analysis</h2><hr>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint012.png" alt="sonarlint012"></p>
<p>SonarLint 亦可手動檢查整個 solution。</p>
<ol>
<li>點擊 solution 右鍵，選 <code>Analyze -&gt; Run Code Analysis on Solution</code></li>
</ol>
<p><img src="/images/sonarqube/sonarlint-vs/sonarlint013.png" alt="sonarlint013"></p>
<p>SonarLint 會將所有檢查到的 issue 顯示在下方。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有了 SonarLint，developer 就能更即時的獲得 SonarQube 的建議，養成寫出 clean code 的好習慣</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 SonarQube 即時在 Visual Studio 內檢查]]>
    
    </summary>
    
      <category term="SonarLint" scheme="http://oomusou.io/tags/SonarLint/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
      <category term="Visual Studio" scheme="http://oomusou.io/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 SonarQube 檢查 .NET Core 專案？]]></title>
    <link href="http://oomusou.io/sonarqube/netcore/"/>
    <id>http://oomusou.io/sonarqube/netcore/</id>
    <published>2018-04-29T12:23:43.000Z</published>
    <updated>2018-04-29T23:02:35.443Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 是一套 <code>程式碼品質檢查工具</code>，可以幫我們檢查 code 的 bugs、 vulenrability、code smell 與 duplication，也屬於 <code>持續整合</code> 重要的一環。</p>
<p>SonarQube 已經內建 SonarC#，可以直接對 C# 進行檢查，本文將以 .NET Core 為例，並搭配 Jenkins 自動執行 SonarQube。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 7.1<br>Jenkins 2.107.1<br>.NET Core 2.0.7</p>
<h2 id="GitHub">GitHub</h2><hr>
<p>將 .NET Core 專案放到 GitHub。</p>
<p><img src="/images/sonarqube/netcore/core000.png" alt="core000"></p>
<ol>
<li>本文將 .NET Core 專案放在 <code>https://github.com/oomusou/Core2SonarQubeJenkins</code></li>
</ol>
<blockquote>
<p>當然也可以將 git repository 放在不同的 git server，如 Bitbucket</p>
</blockquote>
<h2 id="SonarQube">SonarQube</h2><hr>
<p><strong>安裝 SonarQube</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install sonarqube</span><br></pre></td></tr></table></figure>
<p>使用 Home-brew 安裝 SonarQube。</p>
<p><img src="/images/sonarqube/netcore/core001.png" alt="core001"></p>
<ol>
<li>輸入 <code>brew install sonarqube</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 SonarQube，輸入 <code>brew services start sonarqube</code></li>
<li>若想自行啟動 SonarQube，輸入 <code>sonar console</code></li>
</ol>
<p><strong>啟動 SonarQube</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sonar <span class="built_in">console</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>sonar console</code> 自行啟動 SonarQube。</p>
<p><img src="/images/sonarqube/netcore/core002.png" alt="core002"></p>
<ol>
<li>輸入 <code>sonar console</code> 自行啟動 SonarQube</li>
</ol>
<p><strong>測試 SonarQube</strong></p>
<p><img src="/images/sonarqube/netcore/core007.png" alt="core007"></p>
<ol>
<li>輸入 <code>localhost:9000</code>，若看到 SonarQube 首頁，則表示安裝成功</li>
<li>右上角 <code>Log in</code> 可登入管理設定 SonarQube，預設為 <code>admin/admin</code></li>
</ol>
<h2 id="SonarQube_Scanner_for_MSBuild">SonarQube Scanner for MSBuild</h2><hr>
<p>SonarQube 雖然已經包含 SonarC#，但必須靠 SonarQube Scanner for MSBuild 才能執行，預設 SonarQube 並沒有包含 Scanner，必須自行安裝。</p>
<blockquote>
<p>其實 SonarQube Scanner for MSBuild 包含 SonarQube Scanner，只是為了 C# 要編譯的特性再包了一層</p>
</blockquote>
<p><strong>下載 Scanner</strong></p>
<p><img src="/images/sonarqube/netcore/core004.png" alt="hp00"></p>
<ol>
<li>到 <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild" target="_blank" rel="external">Analyzing with SonarQube Scanner for MSBuild</a> 下載 Scanner，選擇 <code>Download for .NET core 2.0</code> 下載。</li>
</ol>
<p><img src="/images/sonarqube/netcore/core005.png" alt="lack00"></p>
<p>下載後為一 <code>zip</code> 壓縮檔，解壓縮後可安裝在任何目錄。</p>
<p><img src="/images/sonarqube/netcore/core006.png" alt="lack00"></p>
<p>將 <code>zip</code> 解開後，放到 home directory 下，並重新命名為 <code>SonarScannerMsbuild</code> 。</p>
<blockquote>
<p>重新命名只為了縮短目錄名稱而已</p>
</blockquote>
<p><strong>設定 Server</strong></p>
<p><strong>SonarQube.Analysis.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Property</span> <span class="attribute">Name</span>=<span class="value">"sonar.host.url"</span>&gt;</span>http://localhost:9000<span class="tag">&lt;/<span class="title">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Property</span> <span class="attribute">Name</span>=<span class="value">"sonar.login"</span>&gt;</span>admin<span class="tag">&lt;/<span class="title">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Property</span> <span class="attribute">Name</span>=<span class="value">"sonar.password"</span>&gt;</span>admin<span class="tag">&lt;/<span class="title">Property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>編輯 <code>～/SonarScannerMsbuild/SonarQube.Analysis.xml</code> ，修改 <code>sonar.host.url</code>、<code>sonar.login</code> 與 <code>sonar.password</code> 三個 property。</p>
<p><img src="/images/sonarqube/netcore/core008.png" alt="core008"></p>
<ol>
<li>編輯 <code>SonarQube.Analysis.xml</code></li>
<li>預設是註解，將註解拿掉設定 server 與 login</li>
</ol>
<p><strong>測試 Scanner</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">~/MyProject $ dotnet ~/</span>SonarScannerMsbuild<span class="regexp">/SonarScanner.MSBuild.dll begin /</span><span class="string">k:</span>core2 <span class="regexp">/n:Core2 /</span><span class="string">v:</span><span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>使用 SonarQube Scanner for MSBuild 對 .NET Core 專案進行檢查。</p>
<p>由於 .NET Core 是跨平台，<code>SonarScanner.MSBuild.dll</code> 必須由 <code>dotnet</code> 執行。</p>
<ul>
<li><code>SonarScanner.MSBuild.dll</code> 需指定完整路徑，無法透過 <code>$PATH</code> 設定</li>
<li>需加上 <code>begin</code>，<code>dotnet build</code> 必須包在 scanner 內</li>
<li><strong>/k</strong>：SonarQube 對專案的 key，內部將以此 key 作為辨別，必須唯一</li>
<li><strong>/n</strong>：在 SonarQube 網頁上顯示的專案名稱</li>
<li><strong>/v</strong>：在 SonarQube 網頁上顯示的版本編號</li>
</ul>
<p><img src="/images/sonarqube/netcore/core009.png" alt="lack00"></p>
<ol>
<li>在專案目錄下使用 <code>SonarScanner.MSBuild.dll</code> 檢查 C#</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">MyProject</span> $ <span class="keyword">dotnet</span> build</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<blockquote>
<p>Script 類不用編譯，可以直接使用 SonarQube Scanner 就可以檢查，但 C# 需要編譯，因此必須 dotnet build</p>
</blockquote>
<p><img src="/images/sonarqube/netcore/core010.png" alt="lack01"></p>
<ol>
<li>輸入 <code>dotnet build</code> 編譯專案</li>
<li>Scanner 檢查出警告</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyProject $ dotnet ~/</span><span class="constant">SonarScannerMsbuild/SonarScanner.MSBuild.</span>dll <span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>需加上 <code>end</code>，scanner 正式將 <code>dotnet build</code> 檢查出的結果寫入 SonarQube project</li>
</ul>
<p><img src="/images/sonarqube/netcore/core012.png" alt="core054"></p>
<ol>
<li>在專案目錄下使用 <code>SonarScanner.MSBuild.dll</code> 結束檢查</li>
</ol>
<p><img src="/images/sonarqube/netcore/core011.png" alt="lack01"></p>
<p>進入 SonarQube 網頁，就可看到 <code>Core2</code> 專案已經出現 SonarQube，也顯示剛剛 <code>dotnet build</code> 檢查出的 <code>1</code> 個 code smell 警告。</p>
<p>到目前為止，SonarQube 對 C# 的檢查已經完成，就算只將 SonarQube 裝在本機，也對 C# 程式碼品質的檢查有很大的幫助。</p>
<p>若能搭配 Jenkins 自動執行 SonarQube，那就更好了。</p>
<h2 id="Jenkins">Jenkins</h2><hr>
<p><strong>安裝 Jenkins</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install jenkins</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 Jenkins。</p>
<p><img src="/images/sonarqube/netcore/core013.png" alt="lack02"></p>
<ol>
<li>輸入 <code>brew install jenkins</code> 安裝</li>
<li>若想在每次 Mac 重開機就自動執行 Jenkins，輸入 <code>brew services start jenkins</code></li>
<li>若想自行啟動 Jenkins，輸入 <code>jenkins</code></li>
</ol>
<p><strong>啟動 Jenkins</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>jenkins</span><br></pre></td></tr></table></figure>
<p>使用 <code>jenkins</code> 自行啟動 Jenkins。</p>
<p><img src="/images/sonarqube/netcore/core014.png" alt="lack02"></p>
<p><strong>Unlock Jenkins</strong></p>
<p><img src="/images/sonarqube/netcore/core015.png" alt="lack03"></p>
<ol>
<li>輸入 <code>localhost:8080</code>，看到 Unlock Jenkins，開始設定 Jenkins</li>
<li>預設密碼放在 <code>~/jenkins/secrets/initialAdminPassword</code></li>
<li>將預設密碼貼上</li>
<li>按 <code>Continue</code> 繼續</li>
</ol>
<p><strong>Customize Jenkins</strong></p>
<p><img src="/images/sonarqube/netcore/core016.png" alt="lack03"></p>
<ol>
<li>選擇 <code>Install suggested plugins</code> 即可</li>
</ol>
<p><strong>Getting Started</strong></p>
<p><img src="/images/sonarqube/netcore/core017.png" alt="lack03"></p>
<p>安裝 suggested plugin 中。</p>
<p><strong>Create Admin User</strong></p>
<p><img src="/images/sonarqube/netcore/core018.png" alt="lack03"></p>
<ol>
<li>建立管理者帳號</li>
<li>按 <code>Save and Finish</code> 繼續</li>
</ol>
<p><strong>Jenkins is Ready</strong></p>
<p><img src="/images/sonarqube/netcore/core019.png" alt="lack03"></p>
<ol>
<li>Jenkins 安裝完成，按 <code>Start using jenkins</code> 開始使用 Jenkins</li>
</ol>
<p><strong>Welcome to Jenkins</strong></p>
<p><img src="/images/sonarqube/netcore/core020.png" alt="lack03"></p>
<ol>
<li>進入 Jenkins 管理介面，如此 Jenkins 已經設定成功</li>
</ol>
<h2 id="Jenkins_Job">Jenkins Job</h2><hr>
<p><strong>建立 Job</strong></p>
<p><img src="/images/sonarqube/netcore/core028.png" alt="core028"></p>
<ol>
<li>按左側 <code>New Item</code> 建立新 job</li>
</ol>
<p><img src="/images/sonarqube/netcore/core029.png" alt="core028"></p>
<ol>
<li>輸入 Job 名稱</li>
<li>選擇 <code>Freestyle project</code></li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><strong>Source Code Management</strong></p>
<p><img src="/images/sonarqube/netcore/core030.png" alt="lack04"></p>
<ol>
<li>找到 <code>Source Code Management</code> 區段</li>
<li>將 Git 的 <code>Repository URL</code> 設定到 <code>https://github.com/oomusou/Core2SonarQubeJenkins</code></li>
</ol>
<p><strong>Build Environment</strong></p>
<p><img src="/images/sonarqube/netcore/core031.png" alt="lack04"></p>
<ol>
<li>找到 <code>Build Environment</code> 區段</li>
<li>勾選 <code>Delete workspace before build starts</code></li>
</ol>
<p><strong>Build</strong></p>
<p><img src="/images/sonarqube/netcore/core032.png" alt="lack04"></p>
<ol>
<li>找到 <code>Build</code> 區段</li>
<li>選擇 <code>Add build step</code></li>
<li>新增 <code>Execute shell</code></li>
</ol>
<p><img src="/images/sonarqube/netcore/core033.png" alt="lack04"> </p>
<ol>
<li>講以下 command 貼上</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet /Users/oomusou/SonarScannerMsbuild/SonarScanner.MSBuild.dll <span class="operator"><span class="keyword">begin</span> /<span class="keyword">k</span>:core2 /<span class="keyword">n</span>:Core2 /v:<span class="number">1.0</span></span><br><span class="line"><span class="keyword">dotnet</span> <span class="keyword">build</span></span><br><span class="line"><span class="keyword">dotnet</span> /<span class="keyword">Users</span>/oomusou/SonarScannerMsbuild/SonarScanner.MSBuild.dll <span class="keyword">end</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>按 <code>Save</code> 儲存設定</li>
</ol>
<p><img src="/images/sonarqube/netcore/core021.png" alt="lack04"></p>
<ol>
<li>按左側 <code>Build Now</code> 執行 Job</li>
</ol>
<p><img src="/images/sonarqube/netcore/core022.png" alt="lack04"></p>
<ol>
<li>Job 執行成功會出現 <code>藍燈</code></li>
</ol>
<p><img src="/images/sonarqube/netcore/core023.png" alt="lack04"></p>
<p>剛剛 Jenkins 執行的 Project 出現在 SonarQube 上。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>SonarQube 已經內建 SonarC#，也可以用來檢查 C# 與 .NET Core</li>
<li>就算不將 SonarQube 安裝在 server，安裝在本機也能有效的檢查 C# 程式碼品質</li>
<li>藉由 Jenkins 幫忙，我們就可以自動化執行 SonarQube</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Core2SonarQubeJenkins" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild" target="_blank" rel="external">Analyzing with SonarQube Scanner for MSBuild</a><br><a href="https://docs.sonarqube.org/" target="_blank" rel="external">SonarQube</a>, <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="external">Analying with SonarQube Scanner for Jenkins</a></p>
]]></content>
    <summary type="html">
    <![CDATA[持續檢查 C# 程式碼品質]]>
    
    </summary>
    
      <category term=".NET Core" scheme="http://oomusou.io/tags/NET-Core/"/>
    
      <category term="Jenkins" scheme="http://oomusou.io/tags/Jenkins/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 PhpStorm 使用 SonarLint ?]]></title>
    <link href="http://oomusou.io/sonarqube/sonarlint-phpstorm/"/>
    <id>http://oomusou.io/sonarqube/sonarlint-phpstorm/</id>
    <published>2018-04-24T12:23:43.000Z</published>
    <updated>2018-04-24T06:53:10.000Z</updated>
    <content type="html"><![CDATA[<p>SonarQube 除了搭配 Jenkins 檢查程式碼品質外，還可以在 IDE 中使用 SonarLint，讓 developer 在程式開發階段就及早發現可能的 bugs、vulenrability、code smell 與 duplication，本文將介紹 SonarLint + PhpStorm。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>SonarQube 6.7.2 LTS<br>PhpStorm 2018.1<br>SonarLint 3.3.0.2482<br>PHP 7.1.14<br>Laravel 5.6.17</p>
<h2 id="安裝_SonarLint">安裝 SonarLint</h2><hr>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint000.png" alt="sonarlint000"></p>
<ol>
<li><strong><em>PhpStorm -&gt; Preferences … -&gt; Plugins</em></strong></li>
<li>按 <code>Browse repositories…</code></li>
</ol>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint001.png" alt="sonarlint001"></p>
<ol>
<li>輸入 <code>SonarLint</code></li>
<li>按 <code>Install</code> 安裝</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint002.png" alt="sonarlint002"></p>
<ol>
<li>下載完 SonarLint 後，按 <code>Restart PhpStorm</code></li>
</ol>
<h2 id="General_Setting">General Setting</h2><hr>
<h3 id="Settings">Settings</h3><p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint003.png" alt="sonarlint003"></p>
<ol>
<li><strong><em>PhpStorm -&gt; Preferences -&gt; Other Settings -&gt; SonarLint General Settings</em></strong></li>
<li>選擇 <code>Settings</code> tab</li>
<li>勾選 <code>Automatically trigger analysis</code>，SonarLint 將會自動檢查目前的檔案</li>
<li>在 <code>SonarQube servers</code> 按 <code>+</code> 新增 server</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint004.png" alt="sonarlint004"></p>
<ol>
<li>為設定取一個名字</li>
<li>輸入 SonarQube 的網址</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint005.png" alt="sonarlint005"></p>
<ol>
<li><code>Authentication type</code> 選擇 <code>Login / Password</code></li>
<li>Login / Password 填預設的  <code>admin/admin</code></li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint006.png" alt="sonarlint006"></p>
<ol>
<li>按 <code>Finish</code> 完成設定</li>
</ol>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint007.png" alt="sonarlint007"></p>
<ol>
<li>按 <code>Update binding</code> 從 SonarQube server 更新 project list、profile、rule 到本機</li>
</ol>
<h3 id="File_Exclusions">File Exclusions</h3><p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint008.png" alt="sonarlint008"></p>
<ol>
<li>選擇 <code>File Exclusions</code> tab，若每個專案都有特定的目錄不想被 SonarLint 檢查，可統一設定在此</li>
</ol>
<h2 id="Project_Setting">Project Setting</h2><hr>
<h3 id="Bind_to_SonarQube_project">Bind to SonarQube project</h3><p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint009.png" alt="sonarlint009"></p>
<ol>
<li><strong><em>PhpStorm -&gt; Preferences -&gt; Other Settings -&gt; SonarLint Project Settings</em></strong></li>
<li>選擇 <code>Bind to SonarQube project</code> tab</li>
<li>將 <code>Enable binding to remote SonarQube server</code> 打勾，如此本地專案將與 SonarQube server 端綁定</li>
<li><code>Bind to server</code> 選擇剛剛建立的 <code>MySonarQube</code></li>
<li><code>SonarQube project</code> 選擇欲綁定的 <code>SonarQube</code> 專案</li>
</ol>
<h3 id="File_Exclusion">File Exclusion</h3><p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint010.png" alt="sonarlint010"></p>
<ol>
<li>選擇 <code>File Exclusions</code> tab，若專案中有特定的目錄不想被 SonarLint 檢查，可設定在此</li>
<li>按 <code>OK</code> 儲存設定</li>
</ol>
<h2 id="Automatic_Analysis">Automatic Analysis</h2><hr>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint011.png" alt="sonarlint011"></p>
<p>SonarQube 檢查出在 <code>app/Console/Kernel.php</code> 有 code smell，不該在程式碼有註解掉的 code，而應該直接刪除，由 Git 作版控。</p>
<p><img src="/images/sonarqube/sonarlint-phpstorm/sonarlint012.png" alt="sonarlint012"></p>
<p>SonarLint 能在 PhpStorm 內即時的檢查出目前檔案的 issue。</p>
<ol>
<li>下方選擇 <code>SonarLint</code> tab</li>
<li>有問題的 code</li>
<li>SonarLint 的錯誤訊息，與 SonarQube server 完全一樣，</li>
<li>解釋該 rule 檢查理由</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>有了 SonarLint，developer 就能更即時的獲得 SonarQube 的建議，養成寫出 clean code 的好習慣</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[讓 SonarQube 即時在 PhpStorm 內檢查]]>
    
    </summary>
    
      <category term="PhpStorm" scheme="http://oomusou.io/tags/PhpStorm/"/>
    
      <category term="SonarLint" scheme="http://oomusou.io/tags/SonarLint/"/>
    
      <category term="SonarQube" scheme="http://oomusou.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 PostgreSQL ?]]></title>
    <link href="http://oomusou.io/docker/postgres/"/>
    <id>http://oomusou.io/docker/postgres/</id>
    <published>2018-04-22T13:23:43.000Z</published>
    <updated>2018-04-22T15:33:04.000Z</updated>
    <content type="html"><![CDATA[<p>若要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker 安裝。本文除了安裝 PostgreSQL 外，還分別使用 DataGrip 與 Rider 連接 PostgreSQL。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 18.03.0-ce-mac60 (23751)<br>PostgreSQL 10.3<br>DataGrip 2018.1<br>Rider 2018.1</p>
<h2 id="建立_Container">建立 Container</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name MyPostgres <span class="operator">-d</span> -p <span class="number">5432</span>:<span class="number">5432</span> <span class="operator">-e</span> POSTGRES_USER=admin <span class="operator">-e</span> POSTGRES_PASSWORD=<span class="string">'12345'</span> postgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<blockquote>
<p><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process<br><code>—name</code>：替 container 取一個人能夠識別的名字 <code>MyPostgres</code> (若省略，Docker ) </p>
<p><code>-p</code> : <code>p</code>ort mapping，host port : container port</p>
<p><code>-e</code> : 設定環境變數 (<code>e</code>nvironment)，使用 <code>POSTGRES_USER</code> 與 <code>POSTGRES_PASSWORD</code> 設定 PostgreSQL 帳號與密碼</p>
<p><code>postgress</code> : image 名稱</p>
</blockquote>
<p><img src="/images/docker/postgres/post000.png" alt="post000"></p>
<h2 id="DataGrip_連接_PostgreSQL">DataGrip 連接 PostgreSQL</h2><hr>
<p><img src="/images/docker/postgres/post009.png" alt="post009"></p>
<p><strong><em>View -&gt; Tool Windows -&gt; Database</em></strong></p>
<p>或熱鍵：<code>⌘ + 1</code></p>
<p><img src="/images/docker/postgres/post001.png" alt="post001"></p>
<p>左側顯示 Database View。</p>
<p><img src="/images/docker/postgres/post002.png" alt="post002"></p>
<p>DataGrip 連進 PostgreSQL。</p>
<ol>
<li>按 <code>+</code>，選擇 <code>Data Source</code></li>
<li>選擇 <code>PostgreSQL</code></li>
</ol>
<p><img src="/images/docker/postgres/post003.png" alt="post003"></p>
<p>DataGrip 支援 PostgreSQL，不過預設並沒有安裝 PostgreSQL 驅動程式。</p>
<ol>
<li>按 <code>Download</code> 下載 <code>PostgreSQL</code> 驅動程式。</li>
</ol>
<p><img src="/images/docker/postgres/post004.png" alt="post004"></p>
<ol>
<li><code>User</code> : <code>admin</code></li>
<li><code>Password</code> : <code>12345</code></li>
<li>按 <code>Test Connection</code> 測試連接，顯示 Successful</li>
</ol>
<p><img src="/images/docker/postgres/post005.png" alt="post005"></p>
<p>DataGrip 預設不會顯示所有 table。</p>
<ol>
<li>選 <code>Shemas...</code></li>
<li>勾選 <code>All schemas</code></li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/docker/postgres/post006.png" alt="post006"></p>
<ol>
<li>展開 <code>tables</code>，選擇 <code>sql_features</code> table</li>
<li>按 <code>Data Editor</code> 顯示資料</li>
</ol>
<p>如此 DataGrip 已經正確連上 PostgreSQL。</p>
<h2 id="Rider_連接_PostgreSQL">Rider 連接 PostgreSQL</h2><hr>
<p><img src="/images/docker/postgres/post010.png" alt="post010"></p>
<p><strong><em>View -&gt; Tool Windows -&gt; Database</em></strong></p>
<p><img src="/images/docker/postgres/post011.png" alt="post011"></p>
<p>右側顯示 Database View。</p>
<p><img src="/images/docker/postgres/post012.png" alt="post012"></p>
<p>Rider 連進 PostgreSQL。</p>
<ol>
<li>按 <code>+</code>，選擇 <code>Data Source</code></li>
<li>選擇 <code>PostgreSQL</code></li>
</ol>
<p><img src="/images/docker/postgres/post013.png" alt="post013"></p>
<p>Rider 支援 PostgreSQL，不過預設並沒有安裝 PostgreSQL 驅動程式。</p>
<ol>
<li>按 <code>Download</code> 下載 <code>PostgreSQL</code> 驅動程式。</li>
</ol>
<p><img src="/images/docker/postgres/post014.png" alt="post014"></p>
<ol>
<li><code>User</code> : <code>admin</code></li>
<li><code>Password</code> : <code>12345</code></li>
<li>按 <code>Test Connection</code> 測試連接，顯示 Successful</li>
</ol>
<p><img src="/images/docker/postgres/post015.png" alt="post015"></p>
<p>Rider 預設不會顯示所有 table。</p>
<ol>
<li>選 <code>Shemas...</code></li>
<li>勾選 <code>All schemas</code></li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/docker/postgres/post016.png" alt="post016"></p>
<ol>
<li>展開 <code>tables</code>，選擇 <code>sql_features</code> table</li>
<li>按 <code>Data Editor</code> 顯示資料</li>
</ol>
<p>如此 Rider 已經正確連上 PostgreSQL。</p>
<h2 id="使用_Terminal_連進_PostgreSQL">使用 Terminal 連進 PostgreSQL</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyPostgres bash</span><br></pre></td></tr></table></figure>
<ol>
<li><code>exec</code> : 執行 container 的 command</li>
<li><code>-it</code> : <code>i</code> : interactive，<code>t</code> : terminal</li>
<li><code>bash</code> : <code>exec</code> 執行 bash</li>
</ol>
<p><img src="/images/docker/postgres/post008.png" alt="post012"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker</li>
<li>DataGrip 與 Rider 的設定方式類似，畢竟都是 JetBrains 的產品</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在 Mac 最簡單使用 PostgreSQL 方式]]>
    
    </summary>
    
      <category term="DataGrip" scheme="http://oomusou.io/tags/DataGrip/"/>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="PostgreSQL" scheme="http://oomusou.io/tags/PostgreSQL/"/>
    
      <category term="Rider" scheme="http://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 Rider 的 Refactoring：Change Signature]]></title>
    <link href="http://oomusou.io/rider/change-signature/"/>
    <id>http://oomusou.io/rider/change-signature/</id>
    <published>2018-04-22T12:23:43.000Z</published>
    <updated>2018-04-22T15:24:13.000Z</updated>
    <content type="html"><![CDATA[<p>Rider 相當於 IntelliJ + Resharper，除了保有 IntelliJ 平台的特色外，還包含 Resharper 強悍的功能，本文將討論其 Refactoring 中的 Change Signature。 </p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Rider 2018.1</p>
<h2 id="Change_Signature">Change Signature</h2><hr>
<p>實務上常在通過單元測試後，在重構階段才發現 method 的 parameter 需要重構，此時就該使用 Change Signature。</p>
<ul>
<li><strong>重構 method 名稱</strong>：Method、Property、Indexer</li>
<li><strong>重構 method 回傳型別</strong>：Method、Property</li>
<li><strong>重構 parameter 名稱與型別</strong>：Method、Constructor、Indexer</li>
<li><strong>新增或刪除 parameter</strong>：Method、Constructor、Indexer</li>
<li><strong>重構 parameter 順序</strong>：Method、Constructor、Indexer</li>
</ul>
<h2 id="重構_Signature_並修改_Client">重構 Signature 並修改 Client</h2><hr>
<p><strong>Calculator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">            <span class="keyword">var</span> result = calculator.Add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>欲將 <code>Calculator.Add()</code> 加以 Change Signature。</p>
<p><img src="/images/rider/change-signature/sig000.png" alt="sig000"></p>
<ol>
<li>將游標放到 <code>Add()</code></li>
<li>按熱鍵：<code>⌃ + T</code>，選擇 Change Signature</li>
</ol>
<p><img src="/images/rider/change-signature/sig001.png" alt="sig001"></p>
<ol>
<li>將 method 名稱重構成 <code>Add3</code></li>
<li>增加 parameter <code>int x</code></li>
<li>對原本呼叫的 function 選擇直接 <code>Modify</code> (稍後會介紹 <code>Delegate via overloading method</code>)</li>
<li>按 <code>Next</code> 下一步</li>
</ol>
<p><img src="/images/rider/change-signature/sig002.png" alt="sig002"></p>
<p>對於新增的 parameter，Rider 提供 4 種重構方式</p>
<ol>
<li><code>Leave code non-compatible, I&#39;ll correct calls my selft</code>：也就是 Rider 不做任何修改</li>
<li><code>Use 0</code>：Rider 會對新的參數傳入 <code>0</code></li>
<li><code>Resolve with call tree</code>：Rider 會對每個呼叫的 method 停下來，讓我們決定該如何修改 (稍後會介紹)</li>
<li><code>Use the following value</code>：統一給定指定值傳入</li>
</ol>
<p>在此選擇 <code>Use 0</code> 。</p>
<p><img src="/images/rider/change-signature/sig003.png" alt="sig003"></p>
<ol>
<li>Rider 替我們將 method 名稱改成 <code>Add3()</code></li>
<li>Rider 替我們增加了 parameter <code>int z</code></li>
</ol>
<p><img src="/images/rider/change-signature/sig004.png" alt="sig004"></p>
<ol>
<li>Client 也改成 <code>Add3</code></li>
<li>Argument 多傳了 <code>0</code> </li>
</ol>
<h2 id="重構_Signature_但不修改_Client">重構 Signature 但不修改 Client</h2><hr>
<p><img src="/images/rider/change-signature/sig005.png" alt="sig005"></p>
<ol>
<li>選擇 <code>Delegate via overloading method</code>，將以 Overloading 方式重構</li>
</ol>
<p><img src="/images/rider/change-signature/sig002.png" alt="sig002"></p>
<p>對於 client，一樣有 4 種重構方式。</p>
<p><img src="/images/rider/change-signature/sig006.png" alt="sig006"></p>
<ol>
<li>原本的 <code>Add()</code> 重構成 <code>Add3()</code>，也增加了 parameter <code>int z</code></li>
<li>另外新增一個 <code>Add()</code> 呼叫 <code>Add3()</code>，如此可在不修改 Client 的情況下，改變 signature</li>
</ol>
<blockquote>
<p>如 class library 已經正式發佈，有其他的 client 使用中，這種重構方式可使的 client 不用修改程式碼，也能達到 Change Signature 的目的</p>
</blockquote>
<h2 id="直接修改_Client_的_Argument">直接修改 Client 的 Argument</h2><hr>
<p><img src="/images/rider/change-signature/sig007.png" alt="sig007"></p>
<ol>
<li>直接在 client 新增 argument <code>2</code></li>
<li>按熱鍵 <code>⌥ + ↩</code>，顯示了多種重構方式，甚至可以新增 Overloading Method</li>
</ol>
<p><img src="/images/rider/change-signature/sig008.png" alt="sig008"></p>
<ol>
<li>Rider 幫我們增加了新 parameter <code>int i</code></li>
</ol>
<h2 id="根據_Call_Tree_逐步修改_Client">根據 Call Tree 逐步修改 Client</h2><hr>
<p><strong>Calculator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Multiply</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Calculate</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Multiply(Add(x, y), z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>Multiply()</code> 與 <code>Calculate()</code> 。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">            <span class="keyword">var</span> result = calculator.Calculate(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client 改呼叫 <code>Calculate()</code>。</p>
<p><img src="/images/rider/change-signature/sig009.png" alt="sig009"></p>
<p>一樣針對 <code>Add()</code> 加以重構。</p>
<p><img src="/images/rider/change-signature/sig001.png" alt="sig001"></p>
<p>一樣重構 method name 與增加 parameter。</p>
<p><img src="/images/rider/change-signature/sig010.png" alt="sig010"></p>
<ol>
<li>選擇 <code>Resolve with call tree</code></li>
</ol>
<p><img src="/images/rider/change-signature/sig011.png" alt="sig011"></p>
<ol>
<li>Rider 會逐一根據 call tree 一步一步重構，首先遇到呼叫 <code>Add3()</code> 之處，會詢問你該如何重構，內建提供多種方法，選擇 <code>Create field _z in type Calculator</code></li>
</ol>
<p><img src="/images/rider/change-signature/sig012.png" alt="sig012"></p>
<ol>
<li>Rider 自動幫我們加上 field 與 Constructor</li>
</ol>
<p><img src="/images/rider/change-signature/sig013.png" alt="sig013"></p>
<p>既然 <code>Calculator</code> 新增了 constructor，接下來就是針對 constructor 加以重構。</p>
<ol>
<li>針對 constructor 也提供了眾多重構方式，選擇 User edit</li>
</ol>
<p><img src="/images/rider/change-signature/sig014.png" alt="sig014"></p>
<ol>
<li>自行在 constructor 輸入 <code>4</code></li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Rider 針對 Change Signature 提供多種重構方式，甚至還可以根據 call tree，一步一步提供客製化的重構</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/RiderChangeSignature" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.jetbrains.com/help/rider" target="_blank" rel="external">JetBrains Rider</a>, <a href="https://www.jetbrains.com/help/rider/Refactorings__Change_Signature.html?keymap=rider_osx#delegating" target="_blank" rel="external">Change Signature refactoring</a></p>
]]></content>
    <summary type="html">
    <![CDATA[針對 Method 的 Signature 加以重構]]>
    
    </summary>
    
      <category term="Refactoring" scheme="http://oomusou.io/tags/Refactoring/"/>
    
      <category term="Rider" scheme="http://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 F# 實現 Composite Pattern？]]></title>
    <link href="http://oomusou.io/fsharp/composite/"/>
    <id>http://oomusou.io/fsharp/composite/</id>
    <published>2018-04-21T12:23:43.000Z</published>
    <updated>2018-04-22T02:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>Composite Pattern 是 OOP 中著名的 Design Pattern，無論是 <code>物件</code> 或 <code>容器</code>，都能使用相同 interface 一視同仁的操作，F# 既然是 Function First Language，就讓我們以 function 的角度重新實現 Composite Pattern。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>Rider 2018.1<br>F# 4.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>由購物車計算商品價錢，但在活動期間，Apple 產品組合有特惠 ：</p>
<ul>
<li><strong>MacBook Pro 15”</strong>：6 萬</li>
<li><strong>iPad Air</strong>：1 萬</li>
<li><strong>Apple Watch</strong>：1 萬</li>
<li><strong>Apple 套餐組合</strong> : (Macbook Pro + iPad Air + Apple Watch) 總價打九折：<code>(6 + 1 + 1) * 0.9</code> = 7.2 萬</li>
</ul>
<p><img src="/images/fsharp/composite/composite000.svg" alt="composite000"></p>
<p>若同時買 MacBook Pro + iPad Air + Apple Watch + Apple 套餐為 15.2 萬。</p>
<h2 id="Task">Task</h2><hr>
<p>直接使用 FP 的思維完成需求。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Composite Pattern</p>
<p>當 <code>單一資料</code> 與 <code>組合資料</code> 同時存在時，讓 client 有一致性的操作方式</p>
</blockquote>
<p><img src="/images/fsharp/composite/composite002.svg" alt="composite002"></p>
<p>首先思考 Composite Pattern 的本質：</p>
<ol>
<li>Leaf 與 Composite 之間的 interface 必須相同</li>
<li>Client 操作 Leaf 與 Composite 都一視同仁</li>
</ol>
<p>只要能達到這兩個目標，就算完成了 Composite Pattern。</p>
<h2 id="OOP_思考方式">OOP 思考方式</h2><hr>
<ul>
<li>為了讓 Leaf 與 Composite 的 interface 要相同，所以必須訂出共同的 interface</li>
<li>Composite 必須以 state 記住 Leaf，並根據 state 加以操作</li>
<li>Client 以相同方式操作 Composite 與 Leaf</li>
</ul>
<h2 id="FP_思考方式">FP 思考方式</h2><hr>
<ul>
<li>Data 與 function 分開</li>
<li>將 Leaf 與 Composite 都設定成 type</li>
<li>Composite 無需以 state 記住 Leaf，在建立 data 時就建立 Leaf</li>
<li>只要建立單一 function 操作所有 data 即可，如此 Composite 與 Leaf 很自然地 interface 都相同</li>
<li>由於 Composite 與 Leaf 的 interface 都相同，所以 Composite 會以 recursive 方式呼叫 Leaf 的 function</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><strong>Product.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ClassLibrary</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Apple</span> </span>= </span><br><span class="line">    | MacBookPro <span class="keyword">of</span> double</span><br><span class="line">    | IPadAir <span class="keyword">of</span> double</span><br><span class="line">    | AppleWatch <span class="keyword">of</span> double</span><br><span class="line">    | AppleCombo <span class="keyword">of</span> Apple List</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> Product =</span><br><span class="line">    <span class="keyword">let</span> macbookPro = MacBookPro <span class="number">60000.0</span></span><br><span class="line">    <span class="keyword">let</span> ipadAir = IPadAir <span class="number">10000.0</span></span><br><span class="line">    <span class="keyword">let</span> appleWatch = AppleWatch <span class="number">10000.0</span></span><br><span class="line">    <span class="keyword">let</span> appleCombo = (AppleCombo) [ macbookPro; ipadAir; appleWatch ]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> getPrice product = </span><br><span class="line">        <span class="keyword">match</span> product <span class="keyword">with</span></span><br><span class="line">        | MacBookPro(price) </span><br><span class="line">        | IPadAir(price) </span><br><span class="line">        | AppleWatch(price)    -&gt; price</span><br><span class="line">        | AppleCombo(products) -&gt; products</span><br><span class="line">                                  |&gt; List.sumBy (<span class="keyword">fun</span> elm -&gt; getPrice elm)</span><br><span class="line">                                  |&gt; (<span class="keyword">fun</span> elm -&gt; elm * <span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Apple</span> </span>= </span><br><span class="line">    | MacBookPro <span class="keyword">of</span> double</span><br><span class="line">    | IPadAir <span class="keyword">of</span> double</span><br><span class="line">    | AppleWatch <span class="keyword">of</span> double</span><br><span class="line">    | AppleCombo <span class="keyword">of</span> Apple List</span><br></pre></td></tr></table></figure>
<p>將各產品都設定成 type，其中 <code>AppleCombo of Apple List</code> 表示 <code>AppleCombo</code> 為各種 Apple 產品的組合。</p>
<p>10 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> macbookPro = MacBookPro <span class="number">60000.0</span></span><br><span class="line"><span class="keyword">let</span> ipadAir = IPadAir <span class="number">10000.0</span></span><br><span class="line"><span class="keyword">let</span> appleWatch = AppleWatch <span class="number">10000.0</span></span><br></pre></td></tr></table></figure>
<p>設定各產品的定價。</p>
<p>13 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> appleCombo = (AppleCombo) [ macbookPro; ipadAir; appleWatch ]</span><br></pre></td></tr></table></figure>
<p>設定 Apple 套餐該包含哪些產品，<code>(AppleCombo)</code> 轉型是必要的，若沒有轉型，Type Inference 會推斷成 <code>Apple list</code>，導致編譯錯誤，我們實際需要的型別為 <code>Apple</code>。</p>
<p><img src="/images/fsharp/composite/composite001.png" alt="composite001"></p>
<p>再次證明 F# 寫程式不需要型別，但型別的檢查依然非常嚴格，這就是 Type Inference 優越的地方。</p>
<p>16 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> getPrice product = </span><br><span class="line">        <span class="keyword">match</span> product <span class="keyword">with</span></span><br><span class="line">        | MacBookPro(price) </span><br><span class="line">        | IPadAir(price) </span><br><span class="line">        | AppleWatch(price)    -&gt; price</span><br><span class="line">        | AppleCombo(products) -&gt; products</span><br><span class="line">                                  |&gt; List.sumBy (<span class="keyword">fun</span> elm -&gt; getPrice elm)</span><br><span class="line">                                  |&gt; (<span class="keyword">fun</span> elm -&gt; elm * <span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>
<p><code>getPrice()</code> 計算單一商品與 Apple 套餐。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> product <span class="keyword">with</span></span><br><span class="line">      | MacBookPro(price) </span><br><span class="line">      | IPadAir(price) </span><br><span class="line">      | AppleWatch(price)    -&gt; price</span><br></pre></td></tr></table></figure>
<p>Pattern Matching 會使用型別判斷，且將該型別的值 price 直接 extract 出來。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| AppleCombo(products) -&gt; products</span><br><span class="line">                          |&gt; List.sumBy (<span class="keyword">fun</span> elm -&gt; getPrice elm)</span><br><span class="line">                          |&gt; (<span class="keyword">fun</span> elm -&gt; elm * <span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>
<p>由 <code>AppleCombo</code> extract 出 <code>products</code>，其型別為 <code>List</code>，可由 <code>List.sumBy()</code> 去計算總和，值得注意的是再度使用 <code>getPrice()</code> 計算每個產品的價錢，因此 <code>getPrice()</code> 必須宣告成 <code>rec</code>。</p>
<p> 最後再將 <code>List.sumBy()</code> 的結果打九折。</p>
<blockquote>
<p>我們可以發現在處理 <code>多型</code> 的議題上，OOP 與 FP 採用不同的方式，由於 OOP 是 data 與 function 合一，因此 <code>getPrice()</code> 會寫在各 data class 上，然後用 interface 強迫各 class 都要實作 <code>getPrice()</code>；但 FP 是 data 與 function 分開，因此只要一個 <code>getPrice()</code>，然後使用 Pattern Matching 根據不同型別有相對應的處理。</p>
<p>但無論 OOP 或 FP，儘管處理方式不同，但對於 client 來說，只要是 <code>Apple</code> 型別，都使用相同的 <code>getPrice()</code>，符合 <code>開放封閉原則</code> 的要求。</p>
</blockquote>
<p><strong>ShoppingCart.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ClassLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> ShoppingCart =</span><br><span class="line">    <span class="keyword">let</span> calculatePrice products = </span><br><span class="line">        products</span><br><span class="line">        |&gt; List.sumBy (<span class="keyword">fun</span> elm -&gt; Product.getPrice elm)</span><br></pre></td></tr></table></figure>
<p><code>products</code> 的型別為 <code>Apple list</code>，因此每個 element 都是 <code>Apple</code> 型別，都可放心使用 <code>getPrice()</code>，這就是 Composite Pattern 的精華。</p>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Learn more about F# at http://fsharp.org</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> ClassLibrary</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    [ </span><br><span class="line">        Product.macbookPro</span><br><span class="line">        Product.ipadAir</span><br><span class="line">        Product.appleWatch</span><br><span class="line">        Product.appleCombo </span><br><span class="line">    ]</span><br><span class="line">    |&gt; ShoppingCart.calculatePrice </span><br><span class="line">    |&gt; printf <span class="string">"%.0f"</span></span><br><span class="line">    </span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>Client 呼叫 <code>ShoppingCart.calculatePrice()</code> 計算購物車內所有商品。</p>
<h2 id="Summary">Summary</h2><hr>
<p>回想 Composite Pattern 的本質：</p>
<ol>
<li>Leaf 與 Composite 之間的 interface 必須相同</li>
<li>Client 操作 Leaf 與 Composite 都一視同仁</li>
</ol>
<p>FP 雖然沒有特別定義 interface，但所有 <code>Apple</code> type 的 data 統一都適用於 <code>getPrice()</code> function，由於在 <code>getPrice()</code> 內使用了 Pattern Matching，只要其中有一個 type 回傳型別不同，compiler 編譯就會報錯，與原本 Composite Pattern 定義 interface 本質相同。</p>
<p>對於 <code>Apple</code> type，統一使用 <code>getPrice()</code> function 處理，與原本 Composite Pattern 在 <code>Component</code> interface 下的 <code>Leaf</code> 與 <code>Composite</code> 都一視同仁的本質相同。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Composite Pattern 本質就是 <code>多型</code>，OOP 使用 interface 讓 <code>物件</code> 與 <code>容器</code> 實踐相同 interface，讓兩者能使用相同的方式操作；FP 使用單一 function，再配合 Pattern Matching 對相同 type 的各種物件有不同的實作。雖然方式不同，但讓 client 以相同方式操作的本質都相同，也符合 <code>開放封閉原則</code> 的要求</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/FSharpComposite" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 FP 重新思考 Composite Pattern]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 C# 實現 Composite Pattern ?]]></title>
    <link href="http://oomusou.io/design-pattern/composite/"/>
    <id>http://oomusou.io/design-pattern/composite/</id>
    <published>2018-04-18T12:23:43.000Z</published>
    <updated>2018-04-22T02:14:44.000Z</updated>
    <content type="html"><![CDATA[<p>Composite Pattern 是 OOP 中著名的 Design Pattern，無論是 <code>物件</code> 或 <code>容器</code>，都能使用相同 interface 一視同仁的操作。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>Rider 2017.3.1<br>C# 7.2</p>
<h2 id="User_Story">User Story</h2><hr>
<p>由購物車計算商品價錢，但在活動期間，Apple 產品組合有特惠 ：</p>
<ul>
<li><strong>MacBook Pro 15”</strong>：6 萬</li>
<li><strong>iPad Air</strong>：1 萬</li>
<li><strong>Apple Watch</strong>：1 萬</li>
<li><strong>Apple 套餐組合</strong> : (Macbook Pro + iPad Air + Apple Watch) 總價打九折：<code>(6 + 1 + 1) * 0.9</code> = 7.2 萬</li>
</ul>
<p><img src="/images/design-pattern/composite/composite011.svg" alt="composite011"></p>
<p>若同時買 MacBook Pro + iPad Air + Apple Watch + Apple 套餐為 15.2 萬。</p>
<h2 id="Task">Task</h2><hr>
<p>在不改變產品 interface 的原則下，計算購物車價錢。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Composite Pattern</p>
<p>當 <code>單一資料</code> 與 <code>整體資料</code> 同時存在時，讓 client 有一致性的操作方式</p>
</blockquote>
<p><img src="/images/design-pattern/composite/composite008.svg" alt="composite008"></p>
<ul>
<li><p><strong>Client</strong>：<code>Leaf</code> 與 <code>Composite</code> 的 user，實務上可能是 component 或 controller</p>
</li>
<li><p><strong>Component</strong>：定義 <code>Leaf</code> 與 <code>Composite</code> 的共用 interface</p>
</li>
<li><p><strong>Leaf</strong>：表示 <code>單一資料</code></p>
</li>
<li><p><strong>Composite</strong>：表示 <code>整體資料</code></p>
</li>
</ul>
<p><img src="/images/design-pattern/composite/composite009.svg" alt="composite009"></p>
<p>由於 <code>Composite</code> 表示 <code>整體資料</code>，實務上可能還包含其他 <code>Composite</code>，而產生類似 tree 的結構。</p>
<blockquote>
<p>Composite Pattern 的確可以處理 tree 結構，但 tree 並非必要條件</p>
</blockquote>
<p><strong>適用時機</strong></p>
<ul>
<li>同時存在 <code>單一資料</code> 與 <code>整體資料</code> 時</li>
<li>想讓 client 不需分辨 <code>單一資料</code> 與 <code>整體資料</code>，都以相同的方式操作資料</li>
<li>不想使用 <code>繼承</code> 來描述 <code>樹狀結構</code></li>
</ul>
<p><strong>優點</strong></p>
<ul>
<li>​ Client 程式碼精簡，不需寫一堆 <code>if else</code> 判斷是 <code>單一資料</code> 或 <code>整體資料</code>，完全發揮 OOP 的 <code>多型</code></li>
<li>增加新的 <code>Leaf</code> 或 <code>Composite</code>，也不用修改 client 程式碼，符合 <code>開放封閉原則</code></li>
</ul>
<h2 id="Architecture">Architecture</h2><hr>
<p><img src="/images/design-pattern/composite/composite000.svg" alt="composite000"></p>
<ul>
<li><p><strong>ShoppingService</strong>：相當於 <code>Client</code></p>
</li>
<li><p><strong>IPrice</strong>：定義 <code>MabookPro</code>、<code>IPadAir</code>、<code>AppleWatch</code> 與 <code>AppleCombo</code> 的共用 interface，相當於 <code>Component</code> interface</p>
</li>
<li><p><strong>MacbookPro</strong>：單一產品，相當於 <code>Leaf</code></p>
</li>
<li><p><strong>IPadAir</strong>：單一產品，相當於 <code>Leaf</code></p>
</li>
<li><p><strong>AppleWatch</strong>：單一產品，相當於 <code>Leaf</code></p>
</li>
<li><p><strong>AppleCombo</strong>：套餐組合，相當於 <code>Composite</code></p>
</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><img src="/images/design-pattern/composite/composite001.svg" alt="composite001"></p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ShoppingCartLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> shoppingCartService = <span class="keyword">new</span> ShoppingCartService();</span><br><span class="line">            shoppingCartService.AddCart(<span class="keyword">new</span> MacBookPro());</span><br><span class="line">            shoppingCartService.AddCart(<span class="keyword">new</span> IPadAir());</span><br><span class="line">            shoppingCartService.AddCart(<span class="keyword">new</span> AppleWatch());</span><br><span class="line">            shoppingCartService.AddCart(<span class="keyword">new</span> AppleCombo());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result = shoppingCartService.CalculatePrice();</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;"</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>無論是 MacBook Pro、IPad Air、Apple Watch 或 AppleCombo 套餐組合，都統一用 <code>AddCart()</code> 新增。</p>
<p>且無論是 <code>單一產品</code> 或 <code>套餐組合</code>，都使用 <code>CalculatePrice()</code> 統一計算。</p>
<blockquote>
<p>可以猜想 <code>AddCart()</code> 與 <code>CalculatePrice()</code> 應該遵循特定 interface 使用，且 <code>單一產品</code> 與 <code>套餐組合</code> 也應該遵循特定 interface 實踐，client 才有可能這麼漂亮的實作</p>
</blockquote>
<h3 id="Composite_Pattern">Composite Pattern</h3><p><strong>IPrice</strong></p>
<p><img src="/images/design-pattern/composite/composite002.svg" alt="composite002"></p>
<p><strong>IPrice.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>訂定 <code>單一產品</code> 與 <code>套餐組合</code> 所遵守的共同 interface，這也是 Composite Pattern 的關鍵。</p>
<p><strong>MacBookPro</strong></p>
<p><img src="/images/design-pattern/composite/composite003.svg" alt="composite003"></p>
<p><strong>MacBookPro.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacBookPro</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">60000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>單一產品 MacBookPro 實踐 <code>IPrice</code>。</p>
<p><strong>IPadAir</strong></p>
<p><img src="/images/design-pattern/composite/composite004.svg" alt="composite004"></p>
<p><strong>IPadAir.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IPadAir</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>單一產品 IPadAir 實踐 <code>IPrice</code>。</p>
<blockquote>
<p>在 C# 世界習慣 interface 以 <code>I</code> 為 prefix，理論上 class name 不建議以 <code>I</code> 為開頭，這裡是因為 Apple 產品就叫做 <code>I</code> PadAir</p>
</blockquote>
<p><strong>AppleWatch</strong></p>
<p><img src="/images/design-pattern/composite/composite005.svg" alt="composite005"></p>
<p><strong>AppleWatch.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppleWatch</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>單一產品 AppleWatch 實踐 <code>IPrice</code>。</p>
<p><strong>AppleCombo</strong></p>
<p><img src="/images/design-pattern/composite/composite006.svg" alt="composite006"></p>
<p><strong>AppleCombo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppleCombo</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AppleCombo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> IPadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> _products)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += product.GetPrice();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.9</span> * sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppleCombo</span> : <span class="title">IPrice</span></span><br></pre></td></tr></table></figure>
<p>Apple <code>套餐組合</code> 也要實踐 <code>IPrice</code>，重點在於不再是 <code>單一產品</code> 要實踐 interface，而是連 <code>套餐組合</code> 也要實踐 interface。</p>
<p>也就是在將來，我們會將 <code>單一產品</code> 與 <code>套餐組合</code> 都一視同仁使用，也就是 OOP 的 <code>多型</code> 的實踐。</p>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br></pre></td></tr></table></figure>
<p>將套餐中所有產品 <code>封裝</code> 在 <code>_products</code> field，注意 <code>List</code> 的泛型為 <code>IPrice</code> interface，也就是只有實踐 <code>IPrice</code> 的單一產品才能加入，若該產品沒有實踐 <code>IPrice</code>，compiler 在編譯階段就可以擋掉。</p>
<blockquote>
<p>這也是 OOP 處理 side effect 方式，使用 private field 封裝在 class 內，避免資料被外界修改</p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AppleCombo</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">        <span class="keyword">new</span> IPadAir(),</span><br><span class="line">        <span class="keyword">new</span> AppleWatch()</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因為 Apple 套餐組合同時包含 MacBook Pro、iPad Air 與 Apple Watch，因此在 constructor 同時將產品建立好。</p>
<p>19 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> _products)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += product.GetPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.9</span> * sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將所有產品加總，並打九折。</p>
<p>也因為所有產品都遵守 <code>IPrice()</code> interface 的 <code>GetPrice()</code>，因此可以使用 <code>foreach()</code> 一視同仁以 <code>GetPrice()</code> 計算，這就是 interface 與 OOP <code>多型</code> 的優點。</p>
<p><strong>ShoppingCartService</strong></p>
<p><img src="/images/design-pattern/composite/composite007.svg" alt="composite007"></p>
<p><strong>ShoppingCartService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShoppingCartService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _carts = <span class="keyword">new</span> List&lt;IPrice&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCart</span>(<span class="params">IPrice product</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _carts.Add(product);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> _carts)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += product.GetPrice();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _carts = <span class="keyword">new</span> List&lt;IPrice&gt;();</span><br></pre></td></tr></table></figure>
<p>將購物車的購物資料封裝在 <code>_carts</code> field，注意 List 的泛型為 <code>IPrice</code> interface，也就是無論是 <code>單一產品</code> 或者 <code>套餐組合</code>，只要實踐 <code>IPrice</code> interface 就一視同仁，只要任何產品或套餐沒實踐 interface 而加入 List，compiler 在 compile-time 就會報錯。</p>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCart</span>(<span class="params">IPrice product</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    _carts.Add(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AddCart()</code> 新增至購物車，只要實踐 <code>IPrice</code> 的 <code>單一產品</code> 或 <code>套餐組合</code> 都可加入購物車。</p>
<p>14 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> _carts)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += product.GetPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CalculatePrice()</code> 計算購物車內的產品總金額，也由於 <code>單一產品</code> 與 <code>套餐組合</code> 都實踐 <code>IPrice</code> interface，因此可以安心用 <code>foreach()</code> 一視同仁的使用 <code>GetPrice()</code> 計算。</p>
<blockquote>
<p>這就是 Composite Pattern 的關鍵，也因為都有實踐 <code>IPrice</code> interface，我們能安心使用 <code>IPrice</code> 的 <code>GetPrice()</code>，且 IDE 的 intellisense 也能顯示</p>
</blockquote>
<h3 id="Refactoring">Refactoring</h3><p>目前為止 Composite Pattern 已經完成，但我們發現有不少 code smell，需要進一步的重構。</p>
<p><strong>MacBookPro</strong></p>
<p><img src="/images/design-pattern/composite/composite003.svg" alt="composite003"></p>
<p><strong>MacBookPro.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MacBookPro</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">double</span> Price = <span class="number">60000.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前將 <code>60000.0</code> hardcode 在 <code>GetPrice()</code>，這樣會造成將來維護上的困然，應該使用 <code>Introduce Field</code> 重構到 field。</p>
<p><strong>IPadAir</strong></p>
<p><img src="/images/design-pattern/composite/composite004.svg" alt="composite004"></p>
<p><strong>IPadAir.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IPadAir</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">double</span> Price = <span class="number">10000.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前將 <code>10000.0</code> hardcode 在 <code>GetPrice()</code>，這樣會造成將來維護上的困然，應該使用 <code>Introduce Field</code> 重構到 field。</p>
<p><strong>AppleWatch</strong></p>
<p><img src="/images/design-pattern/composite/composite005.svg" alt="composite005"></p>
<p><strong>AppleWatch.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppleWatch</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">double</span> Price = <span class="number">10000.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前將 <code>10000.0</code> hardcode 在 <code>GetPrice()</code>，這樣會造成將來維護上的困然，應該使用 <code>Introduce Field</code> 重構到 field。</p>
<p><strong>AppleCombo</strong></p>
<p><img src="/images/design-pattern/composite/composite006.svg" alt="composite006"></p>
<p><strong>AppleCombo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppleCombo</span> : <span class="title">IPrice</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">double</span> Discount = <span class="number">0.9</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _products;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AppleCombo</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _products = <span class="keyword">new</span> List&lt;IPrice&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> MacBookPro(),</span><br><span class="line">                <span class="keyword">new</span> IPadAir(),</span><br><span class="line">                <span class="keyword">new</span> AppleWatch()</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Discount * _products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>21 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetPrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Discount * _products.Sum(product =&gt; product.GetPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 將 <code>0.9</code> 使用 <code>Introduce Field</code> 重構到 field，並將 for loop 重構成 LINQ 的 <code>Sum()</code> 。</p>
<blockquote>
<p>實務上若搭配 List，使用 <code>foreach()</code> 的機率幾乎為 0，因為 LINQ 對 <code>IEnumerable</code> 的支援已經很完整，可以使用 FP 的方式使用 List，更加精簡，可讀性也更高</p>
</blockquote>
<p><strong>ShoppingCartService</strong></p>
<p><img src="/images/design-pattern/composite/composite007.svg" alt="composite007"></p>
<p><strong>ShoppingCartService.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ShoppingCartLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShoppingCartService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IPrice&gt; _carts = <span class="keyword">new</span> List&lt;IPrice&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCart</span>(<span class="params">IPrice product</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            _carts.Add(product);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _carts.Sum(product =&gt; product.GetPrice());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">CalculatePrice</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _carts.Sum(product =&gt; product.GetPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 for loop 重構成 LINQ 的 <code>Sum()</code> 。</p>
<h2 id="Summary">Summary</h2><hr>
<blockquote>
<p>Q：Proxy Pattern、Decorator Pattern 與 Composite Pattern 有何差異？</p>
</blockquote>
<p><strong>Proxy Pattern</strong><br><img src="/images/design-pattern/composite/composite014.svg" alt="composite014"></p>
<p><strong>Decorator Pattern</strong><br><img src="/images/design-pattern/composite/composite013.svg" alt="composite014"></p>
<p><strong>Composite Pattern</strong><br><img src="/images/design-pattern/composite/composite008.svg" alt="composite008"></p>
<p>以 class diagram 角度，Proxy Pattern、Decorator Pattern 與 Composite Pattern 的確非常類似。</p>
<blockquote>
<p>學 Design Pattern 不能以 class diagram 的角度去思考，而要以他要解決什麼問題來思考</p>
</blockquote>
<h3 id="Similarity">Similarity</h3><ul>
<li>都在解決 <code>繼承濫用</code>，將原本 <code>垂直結構</code> 變成 <code>水平結構</code></li>
<li>Interface 都不會改變</li>
</ul>
<h3 id="Difference">Difference</h3><ul>
<li>Proxy 目的在對 service 做 <code>控制存取</code></li>
<li>Decorator 目的在對 service <code>增加功能</code></li>
<li>Composite 目的在於對單一 model/DTO 與套餐組合 model/DTO <code>一視同仁</code></li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>單一產品</code> 與 <code>套餐組合</code>，原本是完全不同的東西，但藉由實踐相同的 interface，在邏輯上視為相同的物件，因此可藉由 OOP 的 <code>多型</code> 加以操作，而不須在 client 做任何判斷，將來新增任何 <code>單一產品</code> 或 <code>套餐組合</code>，也不用修改 client，符合 <code>開放封閉原則</code> 的要求</li>
<li>計算 List 的總和可使用 LINQ 的 <code>Sum()</code>，可讀性更高也更精簡</li>
<li>大部分書籍資料都將 Composite Pattern 用來實作 tree 資料結構，因此很多初學者以為此 pattern 就是為了用來實作 tree，但 tree 並非 Composite Pattern 的必要條件，事實上只要同時需要處理 <code>單一資料</code> 與 <code>整體資料</code>，就適合使用 Composite Pattern，因此也稱為 Part-Whole Pattern，<code>讓單一資料與整體資料有一致操作方式</code>，這就是 Composite Pattern 的本質</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/CSharpComposite" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[將物件與容器一視同仁操作]]>
    
    </summary>
    
      <category term="C#" scheme="http://oomusou.io/tags/C/"/>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 Ubuntu ?]]></title>
    <link href="http://oomusou.io/docker/ubuntu/"/>
    <id>http://oomusou.io/docker/ubuntu/</id>
    <published>2018-04-16T13:23:43.000Z</published>
    <updated>2018-05-07T03:03:47.387Z</updated>
    <content type="html"><![CDATA[<p>以前在 macOS 安裝 Ubuntu 都要先安裝 Parallel Desktop，然後再將 Ubuntu 安裝在 Parallel Desktop 上，安裝了 Docker for Mac 後，只要下載 Ubuntu 的 Docker image，Ubuntu 就能以 container 形式跑在 Docker 上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Docker for Mac 17.20.0-ce-mac49 (21995)<br>Ubuntu 16.04.4 LTS</p>
<h2 id="搜尋_Ubuntu_Image">搜尋 Ubuntu Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker search ubuntu</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker search</code> 搜尋 Docker Hub 的 image。</p>
<p><img src="/images/docker/ubuntu/ubuntu000.png" alt="ubuntu000"></p>
<ol>
<li>使用 Docker 第一步就是使用 <code>docker search</code> 到 Docker Hub 搜尋 image 下載</li>
<li>找到 <code>ubuntu</code> image</li>
<li>7234 star</li>
<li>為 official image</li>
</ol>
<blockquote>
<p>下載 Docker image 時，盡量使用 official  image，而不要使用別人包過的 image，因為可能會有後門或木馬</p>
</blockquote>
<h2 id="下載並建立_Container">下載並建立 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--name MyUbuntu -dt ubuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<ul>
<li><strong>–name</strong> : 替 container 取一個人能夠識別的名字 <code>MyUbuntu</code> ( 若省略，Docker 將隨機命名 )</li>
<li><strong>-d</strong> : <code>d</code>etach，建立 container 後，就脫離目前 process</li>
<li><strong>-t</strong> : <code>t</code>erminal，預設執行 <code>/bin/bash</code> process，為了讓 container 啟動後不會立即停止</li>
<li><strong>ubuntu</strong> : Ubuntu 的官方 image 名稱</li>
</ul>
<blockquote>
<p>Docker container  重要觀念</p>
<p>One process per container</p>
<ul>
<li>一個 container 應該只有 process</li>
<li>若有多個 process，就應該有多個 container</li>
<li>process 執行完，container 則釋放停止執行</li>
</ul>
<p>當 process 執行完，container 會自動釋放，<code>ubuntu</code> image 預設並沒有執行任何 process，所以 <code>start</code> 完後會自動釋放，為了讓 container 不會執行完立即釋放，因此特別加上 <code>-t</code>，讓此 container 預設執行 <code>bash</code>，使的 container 不會釋放</p>
</blockquote>
<p><img src="/images/docker/ubuntu/ubuntu002.png" alt="ubuntu002"></p>
<ol>
<li>使用 <code>docker run</code> 建立 container 並執行 bash</li>
</ol>
<h2 id="觀察_Container">觀察 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>ps</strong> : <code>p</code> resent <code>s</code>tate，使用 <code>docker ps</code> 顯示 <code>正在執行</code> 的 container。</li>
</ul>
<p><img src="/images/docker/ubuntu/ubuntu005.png" alt="ubuntu005"></p>
<ol>
<li>輸入 <code>docker ps</code></li>
<li><code>MyUbuntu</code> container 正在執行中</li>
</ol>
<h2 id="進入_Ubuntu">進入 Ubuntu</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -<span class="keyword">it</span> MyUbuntu bash</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec</code> 對已經執行中的 container 下指令。</p>
<ul>
<li><strong>-i</strong> :  <code>i</code>nteractive，可對 terminal 輸入資料</li>
<li><strong>-t</strong> : <code>t</code>erminal，可對 terminal 顯示資料</li>
<li><strong>MyUbuntu</strong> : Container 名稱</li>
<li><strong>bash</strong> : 對 container 下的指令</li>
</ul>
<p><img src="/images/docker/ubuntu/ubuntu007.png" alt="ubuntu007"></p>
<ol>
<li>輸入 <code>docker exec -it</code> 進入 container 的 terminal</li>
<li>輸入 <code>ll</code></li>
<li>顯示 Ubuntu 內的目錄結構</li>
</ol>
<blockquote>
<p>如此可證明 Ubuntu 已經正常啟動</p>
</blockquote>
<h2 id="離開_Ubuntu">離開 Ubuntu</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>exit</code> 離開 Ubuntu 的 terminal。</p>
<p><img src="/images/docker/ubuntu/ubuntu008.png" alt="ubuntu008"></p>
<h2 id="停止_Container">停止 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker stop <span class="constant">MyUbuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker stop</code> 停止 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu010.png" alt="ubuntu010"></p>
<ol>
<li>輸入 <code>docker stop MyUbuntu</code> 停止 <code>MyUbuntu</code> container</li>
<li>輸入 <code>docker ps</code> 顯示目前執行中的 container</li>
</ol>
<blockquote>
<p>目前已經沒有執行中的 container，表示 Ubuntu 已經停止執行</p>
</blockquote>
<h2 id="啟動_Container">啟動 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker start <span class="constant">MyUbuntu</span></span><br><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker start</code> 重新啟動已經在硬碟，但還沒有執行的 container。</p>
<p>使用 <code>docker ps</code> 顯示目前執行中的 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu006.png" alt="ubuntu006"></p>
<ol>
<li>輸入 <code>docker start MyUbuntu</code> 啟動 <code>MyUbuntu</code> container</li>
<li>輸入 <code>docker ps</code> 顯示目前執行中的 container</li>
<li><code>MyUbuntu</code> container 執行中。</li>
</ol>
<h2 id="刪除_Container">刪除 Container</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker rm <span class="constant">MyUbuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker rm</code> 刪除在硬碟中的 container。</p>
<p><img src="/images/docker/ubuntu/ubuntu011.png" alt="ubuntu011"></p>
<ol>
<li>輸入 <code>docker rm MyUbuntu</code> 刪除 <code>MyUbuntu</code> container，由於 container 正在執行中，無法刪除</li>
<li>輸入  <code>docker stop MyUbuntu</code> 停止 <code>MyUbuntu</code> container</li>
<li>再次輸入 <code>docker rm MyUbuntu</code> 刪除 <code>MyUbuntu</code> container，此次刪除成功</li>
<li>輸入 <code>docker ps -a</code> 顯示所有在硬碟的 container，確認已經沒有任何 container</li>
</ol>
<blockquote>
<p>要刪除 container 之前，必須先停止 container，才能加以刪除。</p>
</blockquote>
<h2 id="顯示所有_Image">顯示所有 Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker images</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker images</code> 顯示目前在硬碟所有的 image。</p>
<p><img src="/images/docker/ubuntu/ubuntu012.png" alt="ubuntu012"></p>
<ol>
<li>輸入 <code>docker images</code> 顯示目前在硬碟的所有 image</li>
<li>目前有 <code>ubuntu</code> image</li>
</ol>
<h2 id="刪除_Image">刪除 Image</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker rmi ubuntu</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker rmi</code> 刪除 image。</p>
<ul>
<li><strong>rm</strong> : 刪除</li>
<li><strong>i</strong> : <code>i</code>mage</li>
</ul>
<p><img src="/images/docker/ubuntu/ubuntu013.png" alt="ubuntu013"></p>
<ol>
<li>輸入 <code>docker rmi ubuntu</code> 刪除 <code>ubuntu</code> image</li>
<li>輸入 <code>docker images</code> 確認是否 image 已被刪除</li>
</ol>
<h2 id="Summary">Summary</h2><hr>
<p><img src="/images/docker/ubuntu/ubuntu014.svg" alt="ubuntu014"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>使用 Docker 快速建立 Ubuntu 測試環境</li>
<li>本文為 Docker 最基本的操作，是使用 Docker 一定要會的基本指令</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[使用 Docker 快速建立 Ubuntu 測試環境]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
      <category term="Ubuntu" scheme="http://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何安裝 Docker for Mac ?]]></title>
    <link href="http://oomusou.io/docker/docker-for-mac/"/>
    <id>http://oomusou.io/docker/docker-for-mac/</id>
    <published>2018-04-16T12:23:43.000Z</published>
    <updated>2018-04-16T12:44:42.000Z</updated>
    <content type="html"><![CDATA[<p>由於 Docker 在本質上仍是個 Linux，只是多個 container 跑在同一個 Linux 上，因此若要將 Docker 跑在 macOS，仍然需要一個 VM 在背景跑 Linux。Docker for Mac 讓我們不用安裝其他 VM，就可以將 container 跑在 Docker 上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Homebrew 1.6.0<br>Docker for Mac 18.03.0.ce (23751)</p>
<h2 id="Prerequisite">Prerequisite</h2><hr>
<p>在 macOS 先安裝好 Homebrew。</p>
<h2 id="Docker_for_Mac">Docker for Mac</h2><hr>
<h3 id="安裝_Docker">安裝 Docker</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>update</span><br><span class="line">$ <span class="keyword">brew </span>cask install docker</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew cask 安裝 Docker。</p>
<p><img src="/images/docker/docker-for-mac/mac000.png" alt="mac000"></p>
<ol>
<li>輸入 <code>brew cask install docker</code> 安裝 Docker</li>
<li>Homebrew cask 從官網下載 <code>Docker.dmg</code></li>
<li>安裝 Docker</li>
<li>將 <code>Docker.app</code> 安裝在 <code>Applications</code> 目錄下</li>
</ol>
<h3 id="執行_Docker">執行 Docker</h3><p><img src="/images/docker/docker-for-mac/mac001.png" alt="mac001"></p>
<ol>
<li>在 <code>Applications</code> 顯示 <code>Docker</code></li>
</ol>
<p><img src="/images/docker/docker-for-mac/mac002.png" alt="mac002"></p>
<p>第一次執行會要求管理者權限，按 <code>OK</code> 後會要求輸入管理者密碼。</p>
<p><img src="/images/docker/docker-for-mac/mac003.png" alt="mac003"></p>
<p>Docker 啟動中，會在右上角顯示 Docker icon。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker -v</span><br></pre></td></tr></table></figure>
<p>等 Docker 啟動完畢，在 terminal 輸入 <code>docker -v</code>，若能正確顯示版本，表示 Docker 已經安裝成功。</p>
<p><img src="/images/docker/docker-for-mac/mac004.png" alt="mac004"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>安裝 Docker for Mac 之後，就可以安裝各種 image，並執行各種 container</li>
</ul>
<h2 id="Appendix">Appendix</h2><hr>
<h3 id="清除_Cache">清除 Cache</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>cask cleanup</span><br></pre></td></tr></table></figure>
<p>清除 Homebrew cask 的 cache。</p>
<blockquote>
<p>Homebrew cask 下載了 <code>Docker.dmg</code> 安裝 Docker，預設會下載到 <code>~/Library/Caches/Homebrew/Cask</code> 目錄下，必須下 <code>brew cask cleanup</code> 才會刪除 <code>Docker.dmg</code></p>
</blockquote>
<p><img src="/images/docker/docker-for-mac/mac005.png" alt="mac005"></p>
<ol>
<li>輸入 <code>brew cask cleanup</code> </li>
<li>刪除在 <code>~/Library/Caches/Homebrew/Cask</code> 目錄下的 <code>Docker.dmg</code></li>
</ol>
<h3 id="開機啟動_Docker">開機啟動 Docker</h3><p><img src="/images/docker/docker-for-mac/mac006.png" alt="mac006"></p>
<p><strong><em>Preferences -&gt; General</em></strong></p>
<ol>
<li>預設 Docker 安裝後，下次會 Mac 開機也會自動啟動 Docker，可視需求決定是否要自動啟動 Docker</li>
</ol>
<blockquote>
<p>Docker 雖然比 Vagrant 省電，但本質還是 VM，所以若沒用卻開著，還是會耗電，若是 desktop 可能無感，但若是 notebook 且在乎電池續航力，建議只有要使用時才啟動 Docker</p>
</blockquote>
<h3 id="移除_Docker_for_Mac">移除 Docker for Mac</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>cask uninstall docker</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew cask 移除 Docker。</p>
<blockquote>
<p>不必事先關閉 Docker</p>
</blockquote>
<p><img src="/images/docker/docker-for-mac/mac007.png" alt="mac007"></p>
<ol>
<li>輸入 <code>brew cask uninstall docker</code></li>
<li>刪除 Docker</li>
<li>刪除 <code>Applications/Docker.app</code></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[使用 Homebrew 即可簡單的安裝 Docker]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Closure 達成 Encapsulation ?]]></title>
    <link href="http://oomusou.io/fsharp/closure-encapsulation/"/>
    <id>http://oomusou.io/fsharp/closure-encapsulation/</id>
    <published>2018-04-15T12:23:43.000Z</published>
    <updated>2018-04-16T12:45:14.000Z</updated>
    <content type="html"><![CDATA[<p><code>封裝</code> 是 OOP 三個重要的特色之一，也由於 <code>封裝</code>，才導致了 <code>多型</code>，而 <code>繼承</code> 則是實現多型的手段 (<code>里氏替換原則</code>)。事實上 FP 也能完美實現 <code>封裝</code>，關鍵就在於 Closure。</p>
<p>我們分別來看看 TypeScript、ReasonML 與 F# 如何以 Clsoure 達成 <code>封裝</code>。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>TypeScript 2.8<br>ReasonML 3.1.0<br>F# 4.1</p>
<h2 id="OOP_封裝">OOP 封裝</h2><hr>
<p>以 OOP 最經典的 Strategy Pattern 為例，我們將各種 strategy 封裝在 context 內，讓 client 與 strategy 解耦合。</p>
<h3 id="TypeScript">TypeScript</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Strategy </span>&#123;</span><br><span class="line">  execute(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Context &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private strategy: Strategy) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(x: <span class="built_in">number</span>, y:<span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.execute(x, y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context(<span class="keyword">new</span> <span class="keyword">class</span> <span class="keyword">implements</span> Strategy &#123;</span><br><span class="line">  execute(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = context.request(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Strategy </span>&#123;</span><br><span class="line">  execute(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>訂出 strategy 的 class interface。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Context &#123;</span><br><span class="line">  <span class="constructor"><span class="keyword">constructor</span>(private strategy: Strategy) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request(x: <span class="built_in">number</span>, y:<span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.execute(x, y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Context</code> class 負責將 strategy 封裝在 field，對於 client 來說只認得 <code>Context.request()</code>，將 client 與 strategy 解耦合。</p>
<p>14 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context(<span class="keyword">new</span> <span class="keyword">class</span> <span class="keyword">implements</span> Strategy &#123;</span><br><span class="line">  execute(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Client 在建立 <code>Context</code> 物件時，順便將 strategy 傳入，由於只使用一次，可以使用 anonymous class。</p>
<p>20 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = context.request(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
<p>Client 實際執行的是 <code>Context.request()</code>，由於已經將 strategy object 封裝在 <code>Context</code> 的 field 內，因此 client 已經跟 strategy 解耦合。</p>
<h2 id="FP_封裝">FP 封裝</h2><hr>
<h3 id="TypeScript-1">TypeScript</h3><p>TypeScript 除了支援完整 OOP，也支援 FP。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Strategy </span>&#123;</span><br><span class="line">  (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = (strategy: Strategy) =&gt; (x, y) =&gt; strategy(x, y);</span><br><span class="line"><span class="keyword">let</span> request = context((x, y) =&gt; x + y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = request(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="interface"><span class="keyword">interface</span> Strategy </span>&#123;</span><br><span class="line">  (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 strategy 的 interface 由 class interface 改成 function interface。</p>
<p>第 5 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = (strategy: Strategy) =&gt; (x, y) =&gt; strategy(x, y);</span><br></pre></td></tr></table></figure>
<p>將 <code>Context</code> class 退化成 <code>context()</code> function，class contructor 則退化成 function parameter，strategy function 依然要遵守 function interface。</p>
<p>回傳為新的 function，此時 strategy function 將以 Closure 形式保留在新的 function 內，也因為 Closure，使得 strategy function 被封裝在新的 function 內。</p>
<p>第 6 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = context((x, y) =&gt; x + y);</span><br></pre></td></tr></table></figure>
<p>由 <code>context()</code> 傳入 strategy function，以 Arrow Function 形式表達，而 request 為一 function，此時 strategy function 已經被封裝在 <code>request()</code> 內。</p>
<p>第 9 行</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = request(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>
<p>Client 實際執行的是 <code>request()</code>，由於已經將 strategy function 封裝在 <code>request()</code>，因此 client 已經跟 strategy function 解耦合。</p>
<h3 id="ReasonML">ReasonML</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = (strategy, x, y) =&gt; strategy(x, y);</span><br><span class="line"><span class="keyword">let</span> request = context((x, y) =&gt;  x + y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = request(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">Js.log(result);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context = (strategy, x, y) =&gt; strategy(x, y);</span><br></pre></td></tr></table></figure>
<p>因為 ReasonML 支援 Partial Application Function，因此可以將 <code>context()</code> 與 <code>request()</code> 合一，若只提供 strategy parameter，回傳的就是 strategy function。</p>
<p>第 2 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = context((x, y) =&gt;  x + y);</span><br></pre></td></tr></table></figure>
<p>由 <code>context()</code> function 傳入 strategy function。</p>
<p>第 4 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = request(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">Js.log(result);</span><br></pre></td></tr></table></figure>
<p>Client 實際執行的是 <code>request()</code>，由於已經將 strategy function 封裝在 <code>request()</code>，因此 client 已經跟 strategy function 解耦合。</p>
<blockquote>
<p>ReasonML 支援了目前 JavaScript 與 TypeScript 尚未支援的  Partial Application Function，也因為有 Type Inference，所以也不需要 interface，因此 ReasonML 寫起來比 TypeScript 精簡</p>
</blockquote>
<h3 id="FSharp">FSharp</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> context strategy x y = strategy x y</span><br><span class="line"><span class="keyword">let</span> request = context (<span class="keyword">fun</span> x y -&gt;  x + y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = request <span class="number">1</span> <span class="number">1</span></span><br><span class="line">printf <span class="string">"%d"</span> result</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>F# 寫起來與 ReasonML 已經非常類似，就不再詳細討論，大抵就是 F# 不用 <code>()</code> 與 <code>;</code>，且 Lambda 使用 <code>fun</code>，但 F# 支援 Partial Function Application 與 Type Inference 則與 ReasonML 一致。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>OOP 使用 constructor + field 將變化加以封裝；而 FP 亦可使用 Higher Order Function + Closure 將變化加以封裝</li>
<li>若以 FP 方式思考，無論使用 TypeScript、ReasonML 或 F#，寫法都已經相當接近，程式碼也比 OOP 精簡</li>
<li>ReasonML 與 F# 支援 Partial Application Function 與 Type Inference，程式碼又會比 TypeScript 更加精簡</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[封裝也有了新的方式]]>
    
    </summary>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
      <category term="ReasonML" scheme="http://oomusou.io/tags/ReasonML/"/>
    
      <category term="TypeScript" scheme="http://oomusou.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何安裝 Docker for Windows ?]]></title>
    <link href="http://oomusou.io/docker/docker-for-windows/"/>
    <id>http://oomusou.io/docker/docker-for-windows/</id>
    <published>2018-04-14T12:23:43.000Z</published>
    <updated>2018-04-14T12:30:35.000Z</updated>
    <content type="html"><![CDATA[<p>由於 Docker 在本質上仍是個 Linux，只是多個 container 跑在同一個 Linux 上，因此若要將 Docker 跑在 Windows，仍然需要一個 VM 在背景跑 Linux。Docker for Windws 內建支援 Windows 的 Hyper-V，只會在 Hyper-V 內跑一個極小的 Linux，如此其他 container 就能跑在 Docker 上。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>Parallel Desktop 13 for Mac Pro Edition 13.3.0 (43321)<br>Windows 10 Pro 1709 16299.371<br>Docker for Windows 18.03.0.ce (0520e24)</p>
<h2 id="Docker_for_Windows">Docker for Windows</h2><hr>
<p>要能在 Windows 執行 Docker，首先必須安裝 Docker for Windows。</p>
<h3 id="下載_Docker_for_Windows">下載 Docker for Windows</h3><p><img src="/images/docker/docker-for-windows/win000.png" alt="win000"></p>
<ol>
<li>到 <a href="https://store.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="external">Docker 官網</a></li>
<li>按 <code>Get Docker</code> 下載 Docker</li>
</ol>
<h3 id="執行_Installer">執行 Installer</h3><p><img src="/images/docker/docker-for-windows/win002.png" alt="win002"></p>
<ol>
<li>預設將 <code>Docker for Windows Installer</code> 下載到 <code>Downloads</code> 目錄</li>
<li>執行 <code>Docker for Windows Installer</code></li>
</ol>
<h3 id="Configuration">Configuration</h3><p><img src="/images/docker/docker-for-windows/win003.png" alt="win003"></p>
<ol>
<li>可選擇是否在 desktop 增加 shortcut</li>
<li>不要勾選 <code>Use Windows containers instead of Linux containers</code></li>
</ol>
<blockquote>
<p>Windows container 與 Linux container 正在整合中，同時只能 <code>單獨使用</code> Windows container 或 Linux container，目前只有 Edge 版可以 <code>同時使用</code> Windows container 與 Linux container</p>
</blockquote>
<p><img src="/images/docker/docker-for-windows/win004.png" alt="win004"></p>
<p>安裝 Docker for Windows 中。</p>
<p><img src="/images/docker/docker-for-windows/win005.png" alt="win005"></p>
<ol>
<li>按 <code>Close and log out</code>，即將登出 Windows 並重新登入</li>
</ol>
<h2 id="Hyper-V">Hyper-V</h2><p><img src="/images/docker/docker-for-windows/win006.png" alt="win006"></p>
<ol>
<li>重新登入後，Docker 發現 Hyper-V 沒有啟動而無法執行</li>
<li>按 <code>Ok</code> 後 Windows 將重新啟動並自動安裝 <code>Hyper-V</code></li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker -v</span><br></pre></td></tr></table></figure>
<p>預設 Windows 10 每次啟動都會執行 Docker，在 Command Prompt 輸入 <code>docker -v</code>，若出現 Docker 版本編號，則表示 Docker 安裝成功。</p>
<p><img src="/images/docker/docker-for-windows/win007.png" alt="win007"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>安裝 Docker for Windows 之後，就可以安裝各種 image，並執行各種 container</li>
</ul>
<h2 id="Appendix">Appendix</h2><hr>
<p>由於 Docker for Windows 會使用 Hyper-V，若在 Parallel Desktop 中的 Windows 10 執行 Docker，等於是在 VM 中執行 VM，必須在 Parallel Desktop 做額外的設定：</p>
<p><img src="/images/docker/docker-for-windows/win001.png" alt="win001"></p>
<ol>
<li>選擇 <code>Hardware</code></li>
<li>選擇 <code>CPU &amp; Memory</code></li>
<li>將 <code>Enable nested virtualization</code> 打勾</li>
</ol>
<blockquote>
<p>實務上不建議這樣使用 Docker，由於兩層 VM，效率並不好，建議直接使用 Docker for Mac</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[Docker 在 Windows 的安裝越來越簡單了]]>
    
    </summary>
    
      <category term="Docker" scheme="http://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 F# 實現 Proxy Pattern？]]></title>
    <link href="http://oomusou.io/fsharp/proxy/"/>
    <id>http://oomusou.io/fsharp/proxy/</id>
    <published>2018-04-13T12:23:43.000Z</published>
    <updated>2018-04-22T02:15:45.000Z</updated>
    <content type="html"><![CDATA[<p>Proxy Pattern 是 OOP 中著名的 Design Pattern，尤其可在不改變 interface 的前提下，就能控制該物件的使用，F# 既然是 Function First Language，就讓我們以 function 的角度重新實現 Proxy Pattern。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core SDK 2.1.101<br>Rider 2017.3.1<br>F# 4.1</p>
<h2 id="User_Story">User Story</h2><hr>
<p>假設你在處理訂單，只有會員才能享受 <code>全館八折</code>，其他人都只能原價購買。</p>
<ul>
<li>目前已經有 <code>MemberService.isMember()</code> 判斷是否為會員</li>
<li>目前已經有 <code>OrderService.getPrice()</code> 可根據折購計算售價</li>
<li>在 <code>MemberService.isMember()</code> 與 <code>OrderService.getPrice()</code> 不修改的前提下 (<code>開放封閉原則</code>)，計算出售價</li>
</ul>
<h2 id="Task">Task</h2><hr>
<p>直接使用 FP 的思維完成需求。</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p>Proxy Pattern</p>
<p>在不改變原有 interface 的前提下，控制 service 的使用</p>
</blockquote>
<p><img src="/images/fsharp/proxy/proxy000.svg" alt="ecorator00"></p>
<p>首先思考 Proxy Pattern 的本質：</p>
<ol>
<li>Proxy 與 RealSubject 之間的 interface 必須相同</li>
<li>Client 藉由 Proxy 控制 RealSubject 的使用</li>
</ol>
<p>只要能達到這兩個目標，就算完成了 Proxy Pattern。</p>
<h2 id="OOP_思考方式">OOP 思考方式</h2><hr>
<ul>
<li>為了讓 Proxy 與 RealSubject 的 interface 要相同，所以必須訂出共同的 interface</li>
<li>Proxy 必須以 state 記住 RealSubject，client 才能透過 Proxy 使用 RealSubject</li>
<li>Proxy 可以加上邏輯，控制 RealSubject 的使用</li>
</ul>
<h2 id="FP_思考方式">FP 思考方式</h2><hr>
<ul>
<li>Proxy 與 RealSubject 都是 function，不用事先定義 interface，反正只要 interface 不同，在 <code>if … else</code>、 <code>Pattern Matching</code> 或 <code>try catch</code> 一定會錯</li>
<li>Proxy 與 RealSubject 都是 function，既然 interface 都相同，由 RealSubject 切換到 Proxy 就不用修改程式碼</li>
<li>Proxy function 可加上邏輯，控制 RealSubject function 的使用</li>
</ul>
<h2 id="Implementation">Implementation</h2><hr>
<p><strong>MemberService.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MemberLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> MemberService =</span><br><span class="line">    <span class="keyword">let</span> isMember account = account = <span class="string">"Sam"</span></span><br></pre></td></tr></table></figure>
<p><code>isMember()</code> 判斷是否為 <code>會員</code>。</p>
<blockquote>
<p>實務上判斷 <code>是否為會員</code> 與資料庫有關，本文主要是談 Proxy Pattern，就只簡單的判斷會員是否為 <code>Sam</code> 即可。</p>
</blockquote>
<p><strong>OrderService.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> OrderLibrary</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> OrderService =</span><br><span class="line">    <span class="keyword">let</span> getPrice discount price = price * discount * <span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>計算 <code>全館八折</code>，之所以加上 <code>* 1.0</code>，是為了讓 Type Inference 推導出 <code>discount</code> 與 <code>price</code> 的型別為 <code>float</code>。</p>
<blockquote>
<p>當使用 function pipeline 時，最後一個參數可以自動被 pipeline，所以設計 function parameter 時，將要使用 pipeline 的 value 放在最後一個 parameter，才能發揮 pipeline 的優勢</p>
</blockquote>
<p><strong>Program.fs</strong></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> MemberLibrary</span><br><span class="line"><span class="keyword">open</span> OrderLibrary</span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"></span><br><span class="line"><span class="annotation">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main argv =</span><br><span class="line">    <span class="keyword">let</span> account = <span class="string">"Sam"</span></span><br><span class="line">    <span class="keyword">let</span> originalPrice = <span class="number">800.0</span></span><br><span class="line">    <span class="keyword">let</span> discount = <span class="number">0.8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isMember = MemberService.isMember account</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> orderProxy =</span><br><span class="line">        <span class="keyword">match</span> isMember <span class="keyword">with</span></span><br><span class="line">        | <span class="keyword">true</span>  -&gt; OrderService.getPrice</span><br><span class="line">        | <span class="keyword">false</span> -&gt; <span class="keyword">fun</span> _ price -&gt; price </span><br><span class="line">    </span><br><span class="line">    originalPrice</span><br><span class="line">    |&gt; orderProxy discount</span><br><span class="line">    |&gt; printf <span class="string">"Real price : %0.0f"</span>        </span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// return an integer exit code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Real price : 640</span></span><br></pre></td></tr></table></figure>
<p>11 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isMember = MemberService.isMember account</span><br></pre></td></tr></table></figure>
<p>由於會由 <code>MemberService.isMember()</code> 判斷是否為會員，先判斷並將結果 binding 到 <code>isMember</code>。</p>
<p>13 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> orderProxy =</span><br><span class="line">    <span class="keyword">match</span> isMember <span class="keyword">with</span></span><br><span class="line">    | <span class="keyword">true</span>  -&gt; OrderService.getPrice</span><br><span class="line">    | <span class="keyword">false</span> -&gt; <span class="keyword">fun</span> _ price -&gt; price</span><br></pre></td></tr></table></figure>
<p>將 <code>OrderProxy</code> class 退化成 <code>orderProxy()</code> function，其 interface 仍然為 <code>float -&gt; float -&gt; float</code>，Type Inference 會自動推導，若有違反，Pattern Matching 就會報錯。</p>
<p><code>orderProxy()</code> 本質為 function，由於 closure 機制，可以自然使用到 function 外面的 <code>isMember</code>，因此不必使用 parameter 方式傳入。</p>
<p>Pattern Matching 根據  <code>isMember</code> 結果回傳 <code>OrderService.getPrice()</code>，或者全新的 Lambda function。</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| <span class="keyword">false</span> -&gt; <span class="keyword">fun</span> _ price -&gt; price</span><br></pre></td></tr></table></figure>
<p>由於要 return 的 Lambda function 並沒有使用到 <code>discount</code> 計算，使用 <code>_</code> 代表即可。</p>
<p>16 行</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">originalPrice</span><br><span class="line">|&gt; orderProxy discount</span><br><span class="line">|&gt; printf <span class="string">"Real price : %0.0f"</span></span><br></pre></td></tr></table></figure>
<p>將 <code>originalPrice</code> 傳給 <code>orderProxy()</code> 計算，這是個已經考慮 <code>是否為會員</code> 的 <code>orderService()</code>，最後再傳給  <code>printf()</code> 顯示。</p>
<h2 id="Summary">Summary</h2><hr>
<p>回想 Proxy Pattern 的本質：</p>
<ol>
<li>Proxy 與 RealSubject 之間的 interface 必須相同</li>
<li>Client 藉由 Proxy 控制 RealSubject 的使用</li>
</ol>
<p>雖然沒有特別定義 interface，但 <code>orderProxy()</code> 與 <code>OrderService.getPrice()</code> 的 signature 都是 <code>float -&gt; float -&gt; float</code>，若 function 的 signature 不同，在 Pattern Matching 就會編譯錯誤，與原本 Proxy Pattern 定義 interface 的本質相同。</p>
<p>FP 則藉由 Proxy Function 控制 RealSubject function 的使用，與原本 Proxy Pattern 藉由 Proxy 控制 RealSubject 使用的本質相同。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Proxy Pattern 本質就是 delegation，但 object 的 delegation 沒 function 簡單直覺，所以才需要搭配 interface；但若純 function，連 interface 都不需要，而且也能享受 strong type 的編譯檢查</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/FSharpCore2OrderProxy" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 FP 重新思考 Proxy Pattern]]>
    
    </summary>
    
      <category term="Design Pattern" scheme="http://oomusou.io/tags/Design-Pattern/"/>
    
      <category term="F#" scheme="http://oomusou.io/tags/F/"/>
    
  </entry>
  
</feed>
