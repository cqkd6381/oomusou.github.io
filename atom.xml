<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[點燈坊]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://oomusou.io/"/>
  <updated>2018-07-28T08:14:52.791Z</updated>
  <id>https://oomusou.io/</id>
  
  <author>
    <name><![CDATA[真 OO無双]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何使 GitHub Blog 升級成 https ?]]></title>
    <link href="https://oomusou.io/hexo/https/"/>
    <id>https://oomusou.io/hexo/https/</id>
    <published>2018-07-28T12:23:43.000Z</published>
    <updated>2018-07-28T08:14:52.791Z</updated>
    <content type="html"><![CDATA[<p>當 Chrome 在 68 版後會將沒有 https 網站標上 <code>不安全</code> 字樣，讓 blog 升級成 https 已經不能避免的課題，若你是使用 Hexo 且放在 GitHub，則可參考本文的方式。</p>
<a id="more"></a>
<h2 id="GoDaddy">GoDaddy</h2><hr>
<p><img src="/images/hexo/https/https000.png" alt="https000"></p>
<ol>
<li>到 GoDaddy 去設定自己的 domain，按 <code>DNS</code></li>
</ol>
<p><img src="/images/hexo/https/https001.png" alt="https001"></p>
<ol>
<li>原本 GitHub pages domain 是兩組 <code>192</code> 開頭的 ip，改成這 4 組 ip。</li>
</ol>
<blockquote>
<p>不會馬上生效，要等 1 小時以上</p>
</blockquote>
<h2 id="Hexo">Hexo</h2><hr>
<p><strong>_config.yml</strong></p>
<p><img src="/images/hexo/https/https002.png" alt="https002"></p>
<p>在 Hexo 根目錄的 <code>_config.yml</code> 下，將 <code>url</code> 改成 <code>https</code>。</p>
<p>重新 <code>hexo clean</code>、<code>hero generate</code> 與 <code>hexo deploy</code>。</p>
<h2 id="GitHub">GitHub</h2><hr>
<p><img src="/images/hexo/https/https003.png" alt="https003"></p>
<ol>
<li>進入 repository 的 <code>Settings</code></li>
</ol>
<p><img src="/images/hexo/https/https004.png" alt="https004"></p>
<ol>
<li>將 <code>Enforce HTTPS</code> 打勾</li>
</ol>
<blockquote>
<p>若不能打勾，有可能 GoDaddy 的設定還沒生效，或者 Hexo 還沒上傳重新編譯過的 <code>https</code> 版本</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>由於 GitHub 的支援，要讓 blog 支援 https 已經非常簡單了</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[GitHub 現在已經內建支援 https]]>
    
    </summary>
    
      <category term="GitHub" scheme="https://oomusou.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="https://oomusou.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 安裝 PostgreSQL ?]]></title>
    <link href="https://oomusou.io/docker/postgres/"/>
    <id>https://oomusou.io/docker/postgres/</id>
    <published>2018-07-24T22:23:43.000Z</published>
    <updated>2018-07-25T14:07:30.292Z</updated>
    <content type="html"><![CDATA[<p>若要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker 。本文分別使用 <code>docker run</code> 與 <code>docker-compose</code> 兩種方式。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>Docker for Mac 18.03.1-ce-mac65 (24312)<br>PostgreSQL 10.3</p>
<h2 id="使用_docker_run">使用 docker run</h2><hr>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --name MyPostgres -<span class="keyword">d</span> -p 5432:5432 -v ~/Postgres:/<span class="keyword">var</span>/lib/postgresql/data -<span class="keyword">e</span> POSTGRES_DB=eflab -<span class="keyword">e</span> POSTGRES_USER=admin -<span class="keyword">e</span> POSTGRES_PASSWORD='12345' postgres:latest</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 由 image 建立 container，當 Docker 發現本機沒有 image，會自動從 Docker Hub 下載。</p>
<p><code>—name</code>：替 container 取一個人能夠識別的名字 <code>MyPostgres</code> (若省略，Docker 會自動以亂數建立 )<br><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</p>
<p><code>-v</code> : <code>v</code>olume，PostgresSQL 新增的資料會寫在 container 內的 <code>/var/lib/postgresql/data</code> 目錄，會改 mapping 到 host 的 <code>~/Postgres</code>，如此 container 刪除後，資料仍然會留在 host </p>
<p><code>-p</code> : <code>p</code>ort mapping，host 與 container post 的對應，格式為 host port : container port<br><code>-e</code> : <code>e</code>nvironment，設定 PostgreSQL 所需要的環境變數</p>
<ul>
<li><code>POSTGRES_DB</code> : database 名稱</li>
<li><code>POSTGRES_USER</code> : 帳號</li>
<li><code>POSTGRES_PASSWORD</code> : 密碼</li>
</ul>
<p><code>postgress:latest</code> : image 名稱，其中 <code>latest</code> 為最新版的 image</p>
<p><img src="/images/docker/postgres/post000.png" alt="post000"></p>
<h2 id="使用_Docker-Compose">使用 Docker-Compose</h2><hr>
<p><code>docker run</code> 方式雖然直接，但需要搭配一堆參數才能執行，若能將這些參數先寫在文字檔內，只要下 <code>docker-compose up -d</code> 就可執行 container。</p>
<p><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</p>
<h3 id="Docker-compose-yml">Docker-compose.yml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  postgres:&#10;    image: postgres:latest&#10;    container_name: MyPostgres&#10;    volumes:&#10;      - $&#123;HOST_DIR&#125;:/var/lib/postgresql/data&#10;    expose:&#10;      - &#34;5432&#34;&#10;    ports:&#10;      - &#34;$&#123;POSTGRES_PORT&#125;:5432&#34;&#10;    environment:&#10;      - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;      - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;      - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>version</code> 設定 <code>docker-compose.yml</code> 格式的版本。</p>
<p>因為 <code>docker-compose.yml</code> 的格式版本與 Docker 版本息息相關，若你要使用新版的 Docker 所提供的功能，在 <code>docker-compose.yml</code> 的版本就必須下的更細，如 <code>3.3</code>，在此只使用了 <code>docker-compose.yml</code> 基本功能而已，使用 <code>3</code> 即可。</p>
<p>第 3 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services:&#10;  postgres:</span><br></pre></td></tr></table></figure>
<p>使用 <code>services</code> 設定有哪些 service 要一起跑。</p>
<p><code>Docker-compose.yml</code> 理論上可以同時描述多個 service，也就是多個 container，如 .NET Core + PostgreSQL + Nginx + Redis 同時啟動，但本文只想使用 PostgreSQL 而已，因此僅建立  <code>postgres</code> service。</p>
<p>第 4 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres:&#10;  image: postgres:latest</span><br></pre></td></tr></table></figure>
<p>設定 <code>postgres</code> service，此名稱可自行建立。</p>
<ul>
<li><strong>image</strong> :  設定使用的 image。</li>
</ul>
<blockquote>
<p><code>latest</code> 表示最新版的 <code>postgres</code></p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyPostgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 container 名稱。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>--name</code></p>
</blockquote>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - $&#123;POSTGRES_HOST_DIR&#125;:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumes</code> 設定 host 與 container 所對應的目錄，將來 PostgreSQL 所寫入資料，將寫入 host 目錄。</p>
<p><code>:</code> 左側為 host 目錄，右側為 container 內目錄。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>-v</code></p>
</blockquote>
<p><code>POSTGRES_HOST_DIR</code> 將在 <code>.env</code> 中設定。</p>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose:&#10;  - &#34;5432&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>expose</code> 設定 container 的 port。</p>
<p>第 11 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:&#10;  - &#34;$&#123;POSTGRES_PORT&#125;:5432&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>ports</code> 設定 host 與 container 所 mapping 的 port。</p>
<p><code>:</code> 左側為 host 的 port，右側為 container 的 port。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>-p</code></p>
</blockquote>
<p><code>POSTGRES_PORT</code> 將在 <code>.env</code> 中設定。</p>
<p>13 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environment:&#10;    - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;    - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;    - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;</span><br></pre></td></tr></table></figure>
<p>設定 PostgreSQL 的 database、user 與 password，此為 PostgreSQL 所需要的環境變數。</p>
<blockquote>
<p>相當於 <code>docker run</code> 的 <code>-e</code></p>
</blockquote>
<p><code>POSTGRES_DB</code>、<code>POSTGRES_USER</code> 與 <code>POSTGRES_PASSWORD</code> 將在 <code>.env</code> 中設定。</p>
<h3 id="-env">.env</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">HOST_DIR=<span class="value">~/Postgres</span></span></span><br><span class="line"><span class="setting">POSTGRES_PORT=<span class="value"><span class="number">1234</span></span></span></span><br><span class="line"><span class="setting">POSTGRES_DB=<span class="value">eflab</span></span></span><br><span class="line"><span class="setting">POSTGRES_USER=<span class="value">admin</span></span></span><br><span class="line"><span class="setting">POSTGRES_PASSWORD=<span class="value"><span class="number">12345</span></span></span></span><br></pre></td></tr></table></figure>
<p>此為 <code>Docker-compose.yml</code> 所設定的環境變數，被獨立在 <code>.env</code> 中，可單獨設定，不用修改 <code>Docker-compose.yml</code>。</p>
<h3 id="Docker-compose_up">Docker-compose up</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker-compose up</code> 啟動 PostgreSQL。</p>
<p><code>-d</code> : <code>d</code>etach，建立 container 後，就脫離目前 process</p>
<p><img src="/images/docker/postgres/post001.png" alt="post001"></p>
<h3 id="Docker-compose_down">Docker-compose down</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker-compose down</code> 結束 PostgreSQL，並且刪除 container。</p>
<p><img src="/images/docker/postgres/post002.png" alt="post002"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>要在 Mac 使用 PostgreSQL，最簡單的方式就是使用 Docker</li>
<li><code>docker-run</code> 與 <code>Docker-Compose</code> 都可以啟動 PostgreSQL，實務上建議使用 <code>Docker-Compose</code>，將變數寫在 <code>.env</code> 中，這樣可使用 <code>docker-compose up -d</code> 就可啟動 PostgreSQL，<code>docker-compose down</code> 就可結束 PostgreSQL，不用再擔心參數問題</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/PostgresDocker" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[在 Mac 最簡單使用 PostgreSQL 方式就是使用 Docker]]>
    
    </summary>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
      <category term="PostgreSQL" scheme="https://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入探討 C# 之 Extension Method]]></title>
    <link href="https://oomusou.io/csharp/extension-method/"/>
    <id>https://oomusou.io/csharp/extension-method/</id>
    <published>2018-07-22T12:23:43.000Z</published>
    <updated>2018-07-22T10:52:27.838Z</updated>
    <content type="html"><![CDATA[<p>C# 3 的 Extension Method 是很了不起的發明，讓我們在不修改原本 source code 的前提下，就能為 class 增加新 method，實現開放封閉原則，尤其對於 .NET Framework 或 package 的擴展特別有效。</p>
<p>事實上 Extension Method 在 Functional Programming 下另有妙用，讓我們輕易實現 Function Composition。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>C# 7.2<br>Rider 2018.1.3</p>
<h2 id="Extension_Method">Extension Method</h2><hr>
<p>首先來看 Extension Method 最標準的應用。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(x =&gt; x * <span class="number">2</span>)</span><br><span class="line">                .ToList()</span><br><span class="line">                .ForEach(x =&gt; Console.WriteLine(x.ToString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先使用 <code>Enumerable.Range()</code> 產生 <code>1, 2, 3</code>，再使用 <code>Select()</code> 變成 <code>2, 4, 6</code>，最後使用 <code>ForEach()</code> 印出來。</p>
<p>但中間出現了一個很詭異的 <code>ToList()</code>。</p>
<p>原因是因為 <code>IEnumerable</code> 沒有 <code>ForEach()</code>，只有 <code>List</code> 才有 <code>ForEach()</code>，因此我們必須先 <code>ToList()</code>。</p>
<p>但就語意來說，這是很怪的，<code>IEnumerable</code> 自帶 <code>Aggregate()</code>，為什麼卻沒有提供更常用的 <code>ForEach()</code> 呢 ?</p>
<p>既然 .NET Framework 沒有，我們就來替 <code>IEnumerable</code> 打造一個 <code>ForEach()</code> 吧。</p>
<p><strong>Extensions.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> ForEach&lt;T&gt;(<span class="keyword">this</span> IEnumerable&lt;T&gt; source, Action&lt;T&gt; action)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (T element <span class="keyword">in</span> source)</span><br><span class="line">                action(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ForEach()</code> 第一個參數為 <code>this IEnumerable&lt;T&gt;</code>，注意特別加了 <code>this</code>，表示我們要為 <code>IEnumerable</code> 提供 <code>ForEach()</code> Extension Method。</p>
<p>且 Extension Method 必須都為 static method。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Enumerable</span><br><span class="line">                .Range(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">                .Select(x =&gt; x * <span class="number">2</span>)</span><br><span class="line">                .ForEach(x =&gt; Console.WriteLine(x.ToString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之後我們就能將奇怪的 <code>ToList()</code> 拿掉了，這樣的語意是不是更好呢 ?</p>
<blockquote>
<p>Extension Method 讓我們對 .NET Framework 或 package 加以擴充，用起來好像是內建的method 一樣，只要做兩件事情 :</p>
<ol>
<li>使用 static method</li>
<li>第一個參數為該 class 或 interface 型別，並加上 <code>this</code> 修飾</li>
</ol>
</blockquote>
<h2 id="Function_Composition">Function Composition</h2><hr>
<p>Function Composition 是 FP 的招牌菜，強調藉由眾多的小 functional 組合成大 function，而非傳統 imperative 寫法，總是寫出數百行的 method，且這些 method 幾乎是量身定做，不只重複使用的機會很低，且因為行數過多很難維護，也難以單元測試。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> ConsoleApp.Email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>);</span><br><span class="line">            <span class="function"><span class="keyword">string</span> <span class="title">EmailFor</span>(<span class="params">Person person</span>) </span>=&gt; AppendDomain(AbbreviateName(person));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> email = EmailFor(john);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(email);</span><br><span class="line">            <span class="comment">// jodo@gmail.com</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>EmailFor()</code> 能根據 user 的 <code>姓</code> 與 <code>名</code> 自動產生 email。</p>
<p>11 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">EmailFor</span>(<span class="params">Person person</span>) </span>=&gt; AppendDomain(AbbreviateName(person));</span><br></pre></td></tr></table></figure>
<p><code>EmailFor()</code> 為 C# 7 的 Local Function，藉由 <code>AbbreviateName()</code> 與 <code>AppendDomain()</code> 組合出新的 <code>EmailFor()</code>，這也就是所謂的 Function Composition : <code>h = fog = f(g)</code>，其中 <code>g</code> 就是 <code>AbbreviateName()</code>，而 <code>f</code> 就是 <code>AppendDomain()</code>。</p>
<p>這種數學式的 Function Composition 雖然重複使用性極高，但並不容易閱讀，程式碼必須 <code>由右而左</code>，違反一般人 <code>由左至右</code> 的閱讀習慣，因此想改用 Function Pipeline 方式變成 <code>由左至右</code>。</p>
<p><strong>Email.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Email</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AbbreviateName</span>(<span class="params"><span class="keyword">this</span> Person person</span>)</span><br><span class="line">            </span>=&gt; Abbreviate(person.FirstName) + Abbreviate(person.LastName);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">AppendDomain</span>(<span class="params"><span class="keyword">this</span> <span class="keyword">string</span> localPart</span>) </span>=&gt; $<span class="string">"&#123;localPart&#125;@gmail.com"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Abbreviate</span>(<span class="params"><span class="keyword">string</span> s</span>) </span>=&gt; s.Substring(<span class="number">0</span>, <span class="number">2</span>).ToLower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 <code>AbbreviateName()</code> 與 <code>AppendDomain()</code> 的第一個參數都改加上 <code>this</code>，搖身一變成為 Extension Method。</p>
<p><strong>Program.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> ConsoleApp.Email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> email = </span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doe"</span>)</span><br><span class="line">                    .AbbreviateName()</span><br><span class="line">                    .AppendDomain();</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(email);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>則原本的 <code>EmailFor()</code> Local Function 就不需要了，只要將 <code>Person</code> new 後，直接如 LINQ 般去 <code>AbbreviateName()</code> 與 <code>AppendDomain()</code>，這種風格維持了 <code>由左至右</code> 的閱讀習慣，非常清楚。</p>
<blockquote>
<p>只要將第一個參數加上 <code>this</code> 修飾成為 Extenstion Method 後，就可由 Function Composition 改成 Function Pipeline 風格</p>
</blockquote>
<h2 id="Refactoring">Refactoring</h2><hr>
<p>若 Legacy code 只用了 Function Composition，可以使用 Rider 幫我們重構成 Function Pipeline。</p>
<p><img src="/images/csharp/extension-method/em000.png" alt="em000"></p>
<p>Legacy code 並沒有使用 Extension Method。</p>
<p><img src="/images/csharp/extension-method/em001.png" alt="em001"></p>
<ol>
<li>將 cursor 放在 method 上</li>
<li>按熱鍵 <code>⌃ + T</code>，選擇 <code>Convert Static Method to Extension</code></li>
</ol>
<p><img src="/images/csharp/extension-method/em002.png" alt="em002"></p>
<ul>
<li>Rider 自動幫我們將第一個參數加上 <code>this</code></li>
</ul>
<p><img src="/images/csharp/extension-method/em003.png" alt="em003"></p>
<ol>
<li>使用端會重構成 Function Pipeline</li>
</ol>
<p><img src="/images/csharp/extension-method/em004.png" alt="em004"></p>
<p><code>EmailFor</code> 與 <code>john</code> 可以進一步 Inline 掉。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Function Composition 與 Function Pipeline 講的是同一件事情，只是 Function Composition 偏數學，採用 <code>由右至左</code>，而 Function Pipeline 偏閱讀習慣，採用 <code>由左至右</code></li>
<li>Funciton Compostion 與 Function Pipeline 是 FP 極關鍵部分，以前總以為 C# 沒有支援，因此無法使用 C# 寫 FP，有了 Extension Method，C# 就能很輕鬆的實踐 FP</li>
<li>Rider 支援 <code>Convert static method to Extension</code>，讓我們快速重構成 Extension Method，再加上 <code>Inline Method</code> 與 <code>Inline Variable</code>，最後就會重構出 Function Pipeline</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/CSharpFunctionComposition" target="_blank" rel="external">GitHub</a> 與 <a href="https://github.com/oomusou/CSharpExtensionMethod" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p>Enrico Buonanno, <a href="https://www.manning.com/books/functional-programming-in-c-sharp" target="_blank" rel="external">Functional Programming in C#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Extension Method 是 C# 的獨門招式]]>
    
    </summary>
    
      <category term="C#" scheme="https://oomusou.io/tags/C/"/>
    
      <category term="Refactoring" scheme="https://oomusou.io/tags/Refactoring/"/>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Rider 使用 Vim ?]]></title>
    <link href="https://oomusou.io/rider/vim/"/>
    <id>https://oomusou.io/rider/vim/</id>
    <published>2018-07-21T12:23:43.000Z</published>
    <updated>2018-07-21T15:34:18.592Z</updated>
    <content type="html"><![CDATA[<p>Vim 是一個歷史悠久的編輯器，完全使用鍵盤操作，就算你使用 IDE，但其 <code>鍵盤操作</code> 的精神卻可以保留下來，讓你在開發時完全不需要摸到滑鼠與觸控板，而使用鍵盤全速開發。</p>
<p>在 Rider 只要安裝以下三個套件，就能順利在 Rider 使用 Vim，也適用於其他 JetBrains 產品。</p>
<a id="more"></a>
<h2 id="Verison">Verison</h2><hr>
<p>macOS High Sierra 10.13.6<br>Rider 2018.1.3</p>
<h2 id="IdeaVim">IdeaVim</h2><hr>
<p><img src="/images/rider/vim/extension003.png" alt="extension003"></p>
<p>由 JetBrains 自己所開發的 Vim 套件，讓你可以在 JetBrains 使用 Vim 熱鍵。</p>
<h2 id="Relative_Line_Numbers">Relative Line Numbers</h2><hr>
<p><img src="/images/rider/vim/extension004.png" alt="extension004"></p>
<p>Vim 的重要精神就是不用選取就可操作，所以必須知道目前 cursor 的相對行數。</p>
<p><img src="/images/rider/vim/extension005.png" alt="extension005"></p>
<p>裝了之後除了原本的 <code>行數</code>，還多了一排 <code>相對行數</code>。</p>
<h2 id="IdeaVimExtension">IdeaVimExtension</h2><hr>
<p><img src="/images/rider/vim/extension000.png" alt="extension000"></p>
<p>實務上在寫 <code>註解</code> 或單元測試的 <code>method 名稱</code> 時，有可能會使用中文，此時若切換回 Vim 的 Normal Mode，又必須重新切回 <code>英文輸入法</code> 才能下指令，非常不方便。</p>
<p>IdeaVimExtension 能在切換到 Normal Mode 時，自動切換到回 <code>英文輸入法</code>。</p>
<h3 id="編輯_-ideavimrc">編輯 .ideavimrc</h3><p>Rider 的 Vim 預設會執行 home directory 的 <code>.ideavimrc</code>，須在此啟動 IdeaVimExtension。</p>
<p><strong>.ideavimrc</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> keep-<span class="keyword">english</span>-<span class="operator">in</span>-<span class="keyword">normal</span></span><br></pre></td></tr></table></figure>
<p>在 <code>.ideavimrc</code> 加上這一行</p>
<p><img src="/images/rider/vim/extension002.png" alt="extension002"></p>
<p>再次重新啟動 Rider 後，當切換到 Normal Mode 時，就都會是 <code>英文輸入法</code> 。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>此技巧在 JetBrains 其他工具也適用</li>
<li>Rider 重構 + Vim 編輯，讓我們同時享受 IDE 與 Editor 的優點，等於是倚天劍 + 屠龍刀</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[完全使用鍵盤高速寫 code]]>
    
    </summary>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
      <category term="Vim" scheme="https://oomusou.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rider Refactoring 之 Extract Local Function]]></title>
    <link href="https://oomusou.io/rider/extract-local-function/"/>
    <id>https://oomusou.io/rider/extract-local-function/</id>
    <published>2018-07-21T12:23:43.000Z</published>
    <updated>2018-07-21T15:04:49.607Z</updated>
    <content type="html"><![CDATA[<p>Local Function 是 C# 7 支援 FP 的重要功能，除了比 C# 3 的 Func 與 Action 可讀性高，速度也更快，因此建議全面使用 Local Function 取代 Func 與 Action。</p>
<p>透過 Rider，我們也可將 legacy code 快速重構成有 FP 風格的 Local Function。<br><a id="more"></a></p>
<h2 id="Version">Version</h2><p>macOS High Sierra 10.13.6<br>.NET Core 2.1<br>Rider 2018.1.3</p>
<h2 id="重構前">重構前</h2><hr>
<p><strong>Program.cs</strong></p>
<p><img src="/images/rider/extract-local-function/local000.png" alt="local000"></p>
<ol>
<li>傳統我們在寫 LINQ 時，會將 Lambda 寫在 <code>Where()</code> 內，若能將 Lambda 抽成 Local Function，則可讀性更高</li>
</ol>
<h2 id="Introduce_Variable">Introduce Variable</h2><hr>
<p><strong>Program.cs</strong></p>
<p><img src="/images/rider/extract-local-function/local001.png" alt="local001"></p>
<ol>
<li>選擇要抽的 Lambda</li>
</ol>
<p><img src="/images/rider/extract-local-function/local002.png" alt="local002"></p>
<ol>
<li>按熱鍵 <code>⌃ + T</code>，選擇 <code>Introduce Variable</code></li>
</ol>
<p><img src="/images/rider/extract-local-function/local004.png" alt="local002"></p>
<ol>
<li>Rider 會自動抽出 Func，不過卻也建議你改用 Local Function</li>
</ol>
<blockquote>
<p>Q : 為什麼 Rider 不直接抽成 Local Function ?</p>
</blockquote>
<p><img src="/images/rider/extract-local-function/local003.png" alt="local003"></p>
<p>因為 Local Function 屬於 C# 7 支援的新功能，只有當你選擇 C# 7 以上時，才會建議使用 Local Function。</p>
<h2 id="To_Local_Function">To Local Function</h2><hr>
<p><img src="/images/rider/extract-local-function/local005.png" alt="local005"></p>
<ol>
<li>將 cursor 放在 <code>predicate</code> 上</li>
<li>按熱鍵 <code>⌥ + ↩</code>，選擇 <code>To local function</code> </li>
</ol>
<p><img src="/images/rider/extract-local-function/local006.png" alt="local006"></p>
<p>Rider 會將 Local Function 轉型成 Func，這是不需要的，Rider 也已經反灰提示這是多餘的。</p>
<ol>
<li>將 cursor 放在反灰之處</li>
<li>按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Remove redundant code in file</code> </li>
</ol>
<h2 id="Rename_Variable">Rename Variable</h2><hr>
<p><img src="/images/rider/extract-local-function/local007.png" alt="local007"></p>
<p>Rider 預設抽出的 Local Function 名稱都是 <code>Predicate</code>，可讀性不高，需要進一步重構</p>
<ol>
<li>將 cursor 放在 <code>Predicate</code> 上</li>
<li>按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Rename</code> </li>
</ol>
<p><img src="/images/rider/extract-local-function/local008.png" alt="local008"></p>
<ol>
<li>重新命名為 <code>IsOdd</code></li>
</ol>
<h2 id="重構後">重構後</h2><hr>
<p><img src="/images/rider/extract-local-function/local009.png" alt="local009"></p>
<p>如此的程式碼，可讀性就很高。</p>
<ol>
<li><code>original</code> 陣列經過 <code>Where()</code> ，再經過 <code>ForEach()</code>，這正是 FP 所謂的 Function Pipeline</li>
<li><code>Where(IsOdd)</code> 可以明顯看出要 where 的是 <code>奇數</code>，<code>ForEach(WriteLine)</code> 可以看出 writeline 要 foreach，而 <code>WriteLine()</code> 與 <code>IsOdd()</code> 又各自是小小的 Local Function 構成，這正是 FP 所謂的 Function Composition</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>要抽成 Local Function，直覺會想使用 Rider 的 <code>Extract Method</code>，但因為在 FP 觀念中，Function 就是 First-Class Value，所以在 Rider 要使用 <code>Introduce Variable</code>，而不是 <code>Extract Method</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[重構成 C# 7 的 Local Function]]>
    
    </summary>
    
      <category term="Refactoring" scheme="https://oomusou.io/tags/Refactoring/"/>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 .NET Core 使用 NUnit 與 NSubstitute ?]]></title>
    <link href="https://oomusou.io/nunit/setup/"/>
    <id>https://oomusou.io/nunit/setup/</id>
    <published>2018-07-10T13:23:43.000Z</published>
    <updated>2018-07-10T03:12:04.938Z</updated>
    <content type="html"><![CDATA[<p>在 <code>單元測試的藝術</code> 一書中，使用的是 <code>NUnit</code> 與 <code>NSubstitute</code>，但 .NET Core SDK 預設只提供 <code>MSTest</code> 與 <code>xUnit</code>，該如何在 .NET Core 使用我們熟悉的 <code>NUnit</code> 與 <code>NSubstitute</code> 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>NUnit 3.10.1<br>NSubstitute 3.1.0<br>Rider 2018.1.3</p>
<h2 id="Symptons">Symptons</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> -l</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>-l</strong> : <code>l</code>ist ，使用 <code>dotnet new</code> 加上 <code>-l</code> 參數，將列出目前系統所安裝的所有 project template。</li>
</ul>
<p><img src="/images/nunit/setup/setup000.png" alt="nunit000"></p>
<p>.NET Core SDK 預設只提供 <code>MSTest</code> 與 <code>xUnit</code> 的 project template。</p>
<p><img src="/images/nunit/setup/setup001.png" alt="nunit001"></p>
<ul>
<li>因為 .NET Core SDK 只有 <code>MSTest</code> 與 <code>XUnit</code>，因此 Rider 也只支援 <code>MSTest</code> 與 <code>xUnit</code></li>
</ul>
<h2 id="NUnit">NUnit</h2><hr>
<p><img src="/images/nunit/setup/setup002.png" alt="nunit002"></p>
<p>事實上在 .NET Core 官網的 <a href="https://github.com/dotnet/templating/wiki/Available-templates-for-dotnet-new" target="_blank" rel="external">Available templates for dotnet new</a>，還準備了不少其他 project template 可供下載，其中也包含了 <code>NUnit</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet new -<span class="tag">i</span> <span class="string">"NUnit3.DotNetNew.Template::*"</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/nunit/setup/setup003.png" alt="nunit003"></p>
<p><img src="/images/nunit/setup/setup004.png" alt="nunit004"></p>
<ol>
<li>安裝完就會出現 <code>NUnit 3</code> project template</li>
</ol>
<p><img src="/images/nunit/setup/setup005.png" alt="nunit005"></p>
<ol>
<li>安裝完後，Rider 也會出現 <code>NUnit 3 Test Project</code></li>
</ol>
<h2 id="Project_Reference">Project Reference</h2><hr>
<p>將 Class Library 的 project reference 加到 Unit Test 專案。</p>
<p><img src="/images/nunit/setup/setup007.png" alt="nunit007"></p>
<ol>
<li>選擇 Unit Test 專案</li>
<li>按滑鼠右鍵選擇 <code>Add</code></li>
<li>選擇 <code>Add Reference</code></li>
</ol>
<p><img src="/images/nunit/setup/setup008.png" alt="nunit008"></p>
<ol>
<li>選擇 <code>ClassLib</code></li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<h2 id="NSubstitute">NSubstitute</h2><hr>
<p>除了 <code>NUnit</code> 外，單元測試另外一個要角就是 <code>NSubstitute</code>，這要另外安裝。</p>
<p><img src="/images/nunit/setup/setup009.png" alt="nunit009"></p>
<ol>
<li>選擇 Unit Test 專案</li>
<li>按滑鼠右鍵選擇 <code>Manage NuGet Packages</code></li>
</ol>
<p><img src="/images/nunit/setup/setup006.png" alt="nunit006"></p>
<ol>
<li>在 NuGet 下輸入 <code>NSubstitute</code></li>
<li>選擇 <code>NSubstitute</code></li>
<li>在 Unit Test 專案下安裝 <code>NSubstitute</code></li>
</ol>
<h2 id="Parallel_Test">Parallel Test</h2><hr>
<p><code>NUnit</code> 預設並不是以 parallel 進行單元測試，而是以 sequential 方式，也就是 <code>一個單元測試執行完，才會進行下一個單元測試</code>，而不是每個單元測試平行執行。</p>
<p>這種方式雖然安全，但有幾個缺點：</p>
<ol>
<li>執行速度較慢，沒有完全發揮多核心 CPU 的優勢</li>
<li>Jenkins 會以 parallel 方式執行單元測試，因此每個單元測試之間不能相依，讓本機與 Jenkins 環境相同</li>
</ol>
<p><strong>AssemblyInfo.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NUnit.Framework;</span><br><span class="line"></span><br><span class="line">[assembly:Parallelizable(ParallelScope.All)]</span><br></pre></td></tr></table></figure>
<p>在 Unit Test 專案下新增 <code>AssemblyInfo.cs</code>，對整個 Unit Test assembly 增加 <code>NUnit</code> 的 <code>Parallelizable</code> attribute，如此每個 test method 都會以 parallel 方式執行單元測試。</p>
<p><img src="/images/nunit/setup/setup010.png" alt="nunit010"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core SDK 預設沒有支援 <code>NUnit</code>，但只要自行透過 <code>dotnet new -i</code>，即可安裝 <code>NUnit</code> project template</li>
<li><code>NSubstitute</code> 以 NuGet package 形式存在，必須另外安裝</li>
<li><code>NUnit</code> 預設以 sequential 方式執行 Unit Test，不僅沒發揮多核心 CPU 威力，也與 Jenkins 執行環境不同，建議在 Unit Test 專案增加 <code>AssemblyInfo.cs</code>，對整個 Unit Test assembly 增加 <code>Parallelizable(ParallelScope.All)</code> attribute，如此才會以 parallel 方式執行單元測試，也能提早發現 test method 彼此相依可能造成的問題</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/NUnitCore" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[需要另外安裝 NUnit Project Template]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="NSubstitute" scheme="https://oomusou.io/tags/NSubstitute/"/>
    
      <category term="NUnit" scheme="https://oomusou.io/tags/NUnit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rider Refactoring 之 Transform Parameters]]></title>
    <link href="https://oomusou.io/rider/transform-parameters/"/>
    <id>https://oomusou.io/rider/transform-parameters/</id>
    <published>2018-07-08T12:23:43.000Z</published>
    <updated>2018-07-09T04:13:01.840Z</updated>
    <content type="html"><![CDATA[<p>在實務上常會發現一些 parameter 總是以 primitive type 一起出現，導致 method 內的 parameter 個數過多，也就是 Code Smell 所謂的 <code>Primitive Obsession</code>，解決方式是將這些 parameter 抽成 class，這在 Refactoring 稱為 <code>Introduce Parameter Object</code>，而在 Rider 則稱為 <code>Transform Parameters</code>，且實務上常常搭配 <code>Make Method Non-Static</code> 一起重構。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>Rider 2018.1.3</p>
<h2 id="重構前">重構前</h2><hr>
<p><strong>StateroomService.cs</strong></p>
<p><img src="/images/rider/transform-parameters/tp004.png" alt="tp004"></p>
<p>第 9 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">decimal</span> <span class="title">TotalAmount</span>(<span class="params">DateTime startTime, DateTime endTime</span>)</span></span><br></pre></td></tr></table></figure>
<p>我們發現 <code>startTime</code> 與 <code>endTime</code> 總是一起出現，這正是典型的 <code>Primitive Obsession</code>，因此我們想將 <code>startTime</code> 與 <code>endTime</code> 抽成 <code>Period</code> class。</p>
<blockquote>
<p><strong>Primitive Obsession</strong></p>
<p>過度使用程式語言所提供的基本型別，卻忘記使用使用更有意義的 class 型別</p>
</blockquote>
<h2 id="Transform_Parameters">Transform Parameters</h2><hr>
<p>將 primitive type 的 parameter 抽成 class，也就是 Refactoring 中的 <code>Introduce Parameter Object</code>。</p>
<p><img src="/images/rider/transform-parameters/tp000.png" alt="tp000"></p>
<ol>
<li>將 cursor 放到要抽的 parameter 上</li>
<li>按熱鍵 <code>⌃ + T</code> ，選擇 <code>Transform Parameters</code></li>
</ol>
<p><img src="/images/rider/transform-parameters/tp001.png" alt="tp001"></p>
<ol>
<li>選擇要抽出的 parameter</li>
<li><strong>Method receives</strong> : 選擇要抽成 Class 或 Tuple</li>
<li>輸入 class 名稱</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/rider/transform-parameters/tp002.png" alt="tp002"></p>
<ol>
<li>抽出了 <code>Period</code> class</li>
<li><code>TotalAmount</code> 的 parameter 也由兩個 <code>DateTime</code> 重構成只有一個 <code>Period</code></li>
</ol>
<blockquote>
<p>Rider 預設會將 class 抽在同一個檔案，但實務上建議 1 個檔案只有 1 個 class，因此會繼續重構，將 <code>Period</code> class 獨立成一個檔案</p>
</blockquote>
<h2 id="Move_Class_to_File">Move Class to File</h2><hr>
<p>將 class 抽成獨立的檔案。</p>
<p><img src="/images/rider/transform-parameters/tp005.png" alt="tp005"></p>
<ol>
<li>將 cursor 放到 <code>Period</code> 上</li>
<li>按熱鍵 <code>⌥ + ↩</code>，選擇 <code>Move to &#39;Period.cs&#39;</code></li>
</ol>
<p><img src="/images/rider/transform-parameters/tp006.png" alt="tp006"></p>
<ol>
<li>重構出獨立的 <code>Period.cs</code> 檔案</li>
</ol>
<h2 id="Extract_Method">Extract Method</h2><hr>
<p>將一段 code 抽成 method。</p>
<p><img src="/images/rider/transform-parameters/tp007.png" alt="tp007"></p>
<ol>
<li><code>days</code> 由 <code>period.EndTime</code> 與 <code>period.StartTime</code> 計算所得，明明在 <code>StateroomService</code> 內，卻一直讀取 <code>Period</code> 的資料，這正是典型的 <code>Feature Envy</code>，需進一步抽成 method，然後 <code>Move Method</code> 到 <code>Period</code> </li>
</ol>
<blockquote>
<p><strong>Feature Envy</strong></p>
<p>不斷的向其他 class 取值，然後在自己的 class 運算</p>
</blockquote>
<p><img src="/images/rider/transform-parameters/tp008.png" alt="tp008"></p>
<ol>
<li>選擇要抽取的 code</li>
<li>按熱鍵 <code>⌃ + T</code> ，選擇 <code>Extract Method</code></li>
</ol>
<p><img src="/images/rider/transform-parameters/tp009.png" alt="tp009"></p>
<ol>
<li>選擇 <code>Method</code></li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/rider/transform-parameters/tp010.png" alt="tp010"></p>
<ol>
<li>抽出 <code>Days</code> method</li>
<li>預設將 <code>Make static</code> 打勾</li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<blockquote>
<p><strong>Make static 的重要性</strong></p>
<ul>
<li>若能抽成 <code>static</code>，Rider 會自動將 <code>Make static</code> 打勾，這表示該 method 已經與此 class 沒有任何瓜葛 (沒使用 field)，可隨時 <code>Move Method</code> 到其他 class</li>
<li>若不能抽成 <code>static</code>，則表示此 method 仍使用該 class 的 field，須先進一步重構，直到能抽成 <code>static</code> method 後，才能 <code>Move Method</code> 到其他 class</li>
<li>若要繼續使用 <code>Make Method Non-Static</code> 重構，則 <code>static</code> method 為其必要條件，否則無法繼續使用 <code>Make Method Non-Static</code></li>
</ul>
</blockquote>
<h2 id="Make_Method_Non-Static">Make Method Non-Static</h2><hr>
<p>將 <code>Static</code> method  重構到 parameter object 的 instance method，也就是 Refactoring 中的 <code>Move Method</code>。</p>
<p><img src="/images/rider/transform-parameters/tp011.png" alt="tp011"></p>
<ol>
<li>將 cursor 放在 <code>Days()</code> 上</li>
<li>按熱鍵 <code>⌃ + T</code> ，選擇 <code>Make Method Non-Static</code></li>
</ol>
<p><img src="/images/rider/transform-parameters/tp012.png" alt="tp012"></p>
<ol>
<li>選擇要 <code>Move Method</code> 到 <code>Period</code> </li>
<li>按 <code>Next</code> 繼續</li>
</ol>
<p><img src="/images/rider/transform-parameters/tp013.png" alt="tp013"></p>
<ol>
<li><code>Days()</code> 被搬到 <code>Period</code> </li>
</ol>
<p><img src="/images/rider/transform-parameters/tp014.png" alt="tp014"></p>
<ol>
<li>直接呼叫 <code>period.Days()</code></li>
</ol>
<blockquote>
<p><code>Make Method Non-Static</code> 本質上就是 <code>Move Method</code>，只是因為 <code>Make Method Non-Static</code> 的名稱，會讓人誤以為只是單純的將一個 method 由 <code>static</code> 重構成 <code>non-static</code> 而已，但事實上不只單純的重構成 <code>non-static</code>，還會將整個 method 搬到 parameter object 上，所以若 <code>Extract Method</code> 所抽出的 parameter，不是要我們要 <code>Move Method</code> 的 class，我們還會透過 <code>Change Parameter</code> 加以重構 parameter，讓 <code>Make Method Non-Static</code> 可以繼續進行</p>
</blockquote>
<h2 id="Inline_Variable">Inline Variable</h2><hr>
<p>將不必要的 <code>中介變數</code> 去除。</p>
<p><img src="/images/rider/transform-parameters/tp015.png" alt="tp015"></p>
<ol>
<li><code>days</code> 可以再加以 inline</li>
</ol>
<p><img src="/images/rider/transform-parameters/tp016.png" alt="tp016"></p>
<ol>
<li>將 cursor 放在 <code>days</code> 上</li>
<li>按熱鍵 <code>⌃ + T</code> ，選擇 <code>Inline Variable</code></li>
</ol>
<p><img src="/images/rider/transform-parameters/tp017.png" alt="tp017"></p>
<ol>
<li><code>days</code> 變數被 inline 掉了</li>
</ol>
<p><img src="/images/rider/transform-parameters/tp018.png" alt="tp018"></p>
<ol>
<li>同理，<code>days</code> 也可再被 inline 掉</li>
</ol>
<p><img src="/images/rider/transform-parameters/tp019.png" alt="tp019"></p>
<ol>
<li><code>days</code> 變數被 inline 掉了</li>
</ol>
<blockquote>
<p>由於 <code>職責</code> 變清楚，因此少掉了很多不必要的 parameter 與 variable，不只 code 變的清爽，可讀性也高，也更容易維護</p>
</blockquote>
<h2 id="執行單元測試">執行單元測試</h2><hr>
<p><img src="/images/rider/transform-parameters/tp020.png" alt="tp020"></p>
<ul>
<li>重新跑單元測試，確認 production code 沒被重構壞掉</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Primitive Obsession</code> 是很常見的 Code Smell，由於太堅持使用 primitive type，而喪失發現 object 的機會，導致 OOP 名存實亡，透過 Rider 的 <code>Transform Parameters</code>，我們可以直接將 parameter 將抽成 class，這對 legacy code 重構非常方便</li>
<li><code>Feature Envy</code> 也是很常見的 Code Smell，由於 class A 一直使用 class B，因此需要很多中介的 parameter 與 variable，透過 Rider 的 <code>Extract Method</code>，我們可以直接將 class A 的一段 code 抽成 method，然後透過 <code>Make Method Non-Static</code> 般到 class B，這會使得 class 與 class 間的 <code>職責</code> 更為清楚，也可將不必要的 parameter 與 variable 重構掉</li>
<li><code>Transform Parameters</code> 與 <code>Make Method Non-Static</code> 常常一起執行，因為既然已經使用 <code>Transform Parameters</code> 將 parameter 抽成新的 object，根據 OOP 的 <code>職責</code> 思維，必然將一些 code 透過 <code>Make Method Non-Static</code> 搬到新的 class，如此才能避免 <code>Primitive Obsession</code> 與 <code>Feature Envy</code></li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/RiderTransformParameters" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[Rider 最具威力的重構功能之一]]>
    
    </summary>
    
      <category term="Refactoring" scheme="https://oomusou.io/tags/Refactoring/"/>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Rider 從 Editor 與 Terminal 快速切換 ?]]></title>
    <link href="https://oomusou.io/rider/terminal-esc/"/>
    <id>https://oomusou.io/rider/terminal-esc/</id>
    <published>2018-06-27T12:23:43.000Z</published>
    <updated>2018-06-27T05:26:10.791Z</updated>
    <content type="html"><![CDATA[<p>在 .NET Core 使用 CLI 的機會越來越多，因此如何在 Rider 從 Editor 與 Terminal 快速切換，是一個不可逃避的問題，當然可以用滑鼠慢慢的點，但若能完全使用鍵盤操作，整個 workflow 會非常的順。</p>
<p>將設定使用  <code>⌃ + ~</code> 啟動 Terminal，<code>ESC</code> 離開 Terminal 回 Editor。</p>
<a id="more"></a>
<h2 id="Verison">Verison</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1.1<br>Rider 2018.1.2</p>
<h2 id="重新設定_Terminal_熱鍵">重新設定 Terminal 熱鍵</h2><hr>
<p>Rider 預設的 terminal 熱鍵是 <code>⌥ + F12</code>，這個熱鍵組合勢必用到 <code>雙手</code>，我建議改成 VS Code 的 <code>⌃ + ~</code>，只要 <code>單手</code>就能啟動 terminal，非常順手。</p>
<p><img src="/images/rider/terminal-esc/esc000.png" alt="esc000"></p>
<ol>
<li><strong><em>JetBrains Rider -&gt; Preferences -&gt; Keymap</em></strong></li>
<li>輸入 <code>terminal</code></li>
<li>選擇 <code>Tool Windows -&gt; Terminal</code></li>
</ol>
<p><img src="/images/rider/terminal-esc/esc001.png" alt="esc001"></p>
<ol>
<li>按滑鼠右鍵選擇 <code>Add Keyboard Shoarcut</code></li>
</ol>
<p><img src="/images/rider/terminal-esc/esc002.png" alt="esc002"></p>
<ol>
<li>重新定義熱鍵  <code>⌃ + ~</code></li>
</ol>
<h2 id="Terminal_自動隱藏">Terminal 自動隱藏</h2><hr>
<p><img src="/images/rider/terminal-esc/esc003.png" alt="esc003"></p>
<ol>
<li>Termial 的 <code>Docked Mode</code> 與 <code>Floating Mode</code> 都不要勾選</li>
</ol>
<blockquote>
<p>如此就能隨著 <code>ESC</code> 而自動隱藏，如 Solution、Database 也建議如此設定</p>
</blockquote>
<h2 id="使用_ESC_自動隱藏_Terminal">使用 ESC 自動隱藏 Terminal</h2><hr>
<p>對於 Rider 其它視窗，如 Solution、Database，只要 <code>ESC</code> 按下就會自動隱藏，但是 Terminal 是特例，按 <code>ESC</code> 竟然不會隱藏</p>
<p><img src="/images/rider/terminal-esc/esc004.png" alt="esc004"></p>
<ol>
<li><strong><em>JetBrains Rider -&gt; Preferences -&gt; Tools -&gt; Terminal</em></strong></li>
<li><code>Override IDE shortcuts</code> 不要勾選</li>
<li>按 <code>Save</code> 存檔</li>
</ol>
<blockquote>
<p>也就是 Rider 當初有特別考量，希望 Terminal 有自己的 <code>ESC</code>，不要吃 Rider 整體的 <code>ESC</code>，但這會使 Terminal 不會隨著按下 <code>ESC</code> 而隱藏</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>此技巧在 JetBrains 其他工具也適用</li>
<li>Rider 是一個開發 .NET Core 很舒服的工具，尤其在這麼短的時間，就已經將 Resharper 與 IntelliJ 的精華融合在 Rider 上，目前我還沒遇到什麼 Resharper 重構無法在 Rider 執行，假如你覺得 Visual Studio + Resharper 太慢，又想在 macOS 開發 .NET Core，Rider 真的是非常推薦的工具</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[完全使用鍵盤操作才會快]]>
    
    </summary>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 pgcli 連上 PostgreSQL ?]]></title>
    <link href="https://oomusou.io/postgres/pgcli/"/>
    <id>https://oomusou.io/postgres/pgcli/</id>
    <published>2018-06-14T13:23:43.000Z</published>
    <updated>2018-06-14T15:00:24.348Z</updated>
    <content type="html"><![CDATA[<p>傳統都會使用 GUI 工具連上 database，如 DataGrip、SQLPro Studio，若只是想簡單確定資料有沒有寫入成功，簡單的 CLI 工具會更方便，pgcli 就是一套在 CLI 連接 PostgreSQL 的小工具。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>PostgreSQL 10.3<br>pgcli 1.9.1</p>
<h2 id="安裝_pgcli">安裝 pgcli</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install pgcli</span><br></pre></td></tr></table></figure>
<p>使用 Homebrew 安裝 pgcli。</p>
<p><img src="/images/postgres/pgcli/pgcli000.png" alt="pgcli000"></p>
<ol>
<li>pgcli 非常的小，也沒有任何 dependency</li>
</ol>
<h2 id="連上_PostgreSQL">連上 PostgreSQL</h2><hr>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>pgcli <span class="symbol">postgresql:</span>/<span class="regexp">/admin:12345@localhost:5432/eflab</span></span><br></pre></td></tr></table></figure>
<p>輸入 <code>pgcli</code> 連接 PostgreSQL。</p>
<ul>
<li>以 <code>postgresql://</code> 開頭</li>
<li><code>admin</code> 為 username，<code>12345</code> 為 password，中間以 <code>:</code> 隔開</li>
<li><code>@</code> 之後接 server 名稱，<code>5432</code> 為 port，中間以 <code>:</code> 隔開</li>
<li><code>/</code> 之後接 database</li>
</ul>
<p><img src="/images/postgres/pgcli/pgcli001.png" alt="pgcli000"></p>
<h2 id="直接下_SQL">直接下 SQL</h2><hr>
<p><img src="/images/postgres/pgcli/pgcli002.png" alt="pgcli002"></p>
<p>可直接下 SQL 指令，也有 Intellisense。</p>
<p><img src="/images/postgres/pgcli/pgcli003.png" alt="pgcli003"></p>
<p>正確顯示資料。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>若想簡單的對 PostgreSQL 下 SQL 查資料，其實不太需要全功能的 GUI 工具，只要 pgcli 就能勝任，重點是讓你完全在 CLI 工作</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://github.com/dbcli" target="_blank" rel="external">dbcli</a>, <a href="https://github.com/dbcli/pgcli" target="_blank" rel="external">dbcli/pgcli</a></p>
]]></content>
    <summary type="html">
    <![CDATA[使用 CLI 管理 PostgreSQL]]>
    
    </summary>
    
      <category term="PostgreSQL" scheme="https://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Entity Framework Core 使用 Data Seeding ? (PostgreSQL)]]></title>
    <link href="https://oomusou.io/efcore/data-seeding/"/>
    <id>https://oomusou.io/efcore/data-seeding/</id>
    <published>2018-06-14T12:23:43.000Z</published>
    <updated>2018-06-14T14:37:22.451Z</updated>
    <content type="html"><![CDATA[<p>當使用 Code First 與 Migration 後，下一步就是 Data Seeding，讓我們對 table 新增基本的資料。在 EF Core 2.0，Data Seeding 只能自己手動處理，在 EF Core 2.1 正式提供 Data Seeding。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.1<br>Entity Framework 2.1<br>PostgreSQL 10.3<br>Npgsql EF Core Provider 2.1<br>VS Code 1.24.0<br>DataGrip 2018.4</p>
<h2 id="建立資料">建立資料</h2><hr>
<p>我們可以將一些 database 預設的資料寫在 <code>DbContext.OnModelCreating()</code>，這樣在 Migration 時，就會順便將資料寫進 database。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>本文為 <a href="/efcore/migration/">如何在 Entity Framework Core 使用 Migration ? (PostgreSQL)</a> 內容之延續，請搭配參考</span></span></span></p>
<p><strong>EFLabDbContext.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFLabDbContext</span>: <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Customer&gt; Customers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DbConnectionString = <span class="string">"Host=localhost;Port=5432;Database=eflab;Username=admin;Password=12345"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            optionsBuilder.UseNpgsql(DbConnectionString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">                Name = <span class="string">"Sam"</span>,</span><br><span class="line">                Age = <span class="number">18</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">                Name = <span class="string">"Kevin"</span>,</span><br><span class="line">                Age = <span class="number">19</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">        Name = <span class="string">"Sam"</span>,</span><br><span class="line">        Age = <span class="number">18</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">            </span><br><span class="line">    modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">        Name = <span class="string">"Kevin"</span>,</span><br><span class="line">        Age = <span class="number">19</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如同設定 connection string 要 override <code>OnConfiguring()</code>，若要使用 Data Seeding 則要 override <code>OnModelCreating()</code>。</p>
<p>使用 <code>modelBuilder.Entity&lt;T&gt;().HasData()</code> 新增資料，其中 <code>&lt;T&gt;</code> 為要新增的 Entity 型別。</p>
<p>因為 <code>CustomerID</code> 為 PK，PostgreSQL 會自動處理，所以我們就不特別指定，只設定 <code>Name</code> 與 <code>Age</code> 兩個欄位。</p>
<p><img src="/images/efcore/data-seeding/seeding000.png" alt="seeding000"></p>
<h2 id="建立_Migration">建立 Migration</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet ef migrations <span class="keyword">add </span>Migration02</span><br></pre></td></tr></table></figure>
<p>因為我們對 DbContext 做了變動，所以要重新建立 Migration。</p>
<p>輸入 <code>dotnet ef migrations add</code> 建立新的 Migration。</p>
<p><img src="/images/efcore/data-seeding/seeding001.png" alt="seeding001"></p>
<ol>
<li>建立 Migration 出現錯誤，EF Core 抱怨 <code>CustomerID</code> 沒有提供。</li>
</ol>
<p>這目前在 .NET Core 2.1 為 <a href="https://github.com/aspnet/EntityFrameworkCore/issues/11776" target="_blank" rel="external">Known Issue</a>，當使用  <code>modelBuilder.Entity&lt;T&gt;().HasData()</code> 做 Data Seeding 時，目前連 PK 這種 auto-generated 欄位，也必須手動提供。</p>
<p><strong>EFLabDbContext.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFLabDbContext</span>: <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Customer&gt; Customers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DbConnectionString = <span class="string">"Host=localhost;Port=5432;Database=eflab;Username=admin;Password=12345"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            optionsBuilder.UseNpgsql(DbConnectionString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> customerID = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">                CustomerID = customerID++,</span><br><span class="line">                Name = <span class="string">"Sam"</span>,</span><br><span class="line">                Age = <span class="number">18</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">                CustomerID = customerID++,</span><br><span class="line">                Name = <span class="string">"Kevin"</span>,</span><br><span class="line">                Age = <span class="number">19</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> customerID = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">        CustomerID = customerID++,</span><br><span class="line">        Name = <span class="string">"Sam"</span>,</span><br><span class="line">        Age = <span class="number">18</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">            </span><br><span class="line">    modelBuilder.Entity&lt;Customer&gt;().HasData(<span class="keyword">new</span> Customer &#123;</span><br><span class="line">        CustomerID = customerID++,</span><br><span class="line">        Name = <span class="string">"Kevin"</span>,</span><br><span class="line">        Age = <span class="number">19</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 PK 的 <code>CustomerID</code> 加入，並自行使用 <code>customerID++</code> 處理。</p>
<p><img src="/images/efcore/data-seeding/seeding007.png" alt="seeding007"></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet ef migrations <span class="keyword">add </span>Migration02</span><br></pre></td></tr></table></figure>
<p>再重新建立一次 Migration，這次就成功了。</p>
<p><img src="/images/efcore/data-seeding/seeding002.png" alt="seeding002"></p>
<p><strong>Migration02.cs</strong></p>
<p><img src="/images/efcore/data-seeding/seeding003.png" alt="seeding003"></p>
<p>觀察 <code>Migration02.Up()</code>，發現我們剛剛使用  <code>modelBuilder.Entity&lt;T&gt;().HasData()</code> 新增的資料，已經成為 Migration 的一部分。</p>
<p><strong>ModelSnapshot.cs</strong></p>
<p><img src="/images/efcore/data-seeding/seeding004.png" alt="seeding004"></p>
<p>觀察 <code>ModelSnapshot.cs</code>，發現我們剛剛使用  <code>modelBuilder.Entity&lt;T&gt;().HasData()</code> 新增的資料也寫入了 <code>ModelSnapshot.cs</code>，因此之後再建立新的 Migration 時，就有了 golden sample 可以比對，不會重複新增 Data Seeding 資料。</p>
<h2 id="執行_Migration">執行 Migration</h2><hr>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">EFCoreMigration</span> $ <span class="keyword">dotnet</span> ef database update</span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet ef database update</code> 執行 Migration。</p>
<p><img src="/images/efcore/data-seeding/seeding005.png" alt="seeding005"></p>
<ol>
<li>只執行了 <code>Migration02</code></li>
</ol>
<h2 id="確認資料">確認資料</h2><hr>
<p><img src="/images/efcore/data-seeding/seeding006.png" alt="seeding006"></p>
<ul>
<li>兩筆資料已經透過 Data Seeding 新增至 database</li>
</ul>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>理論上在 Data Seeding 時，PK 欄位應該要省略，但目前 EF Core 2.1 的 <code>HasData()</code> 仍必須自己處理 PK 欄位，是比較可惜的地方</li>
<li>Data Seeding 最大的用處在於使用 Docker 的 <code>整合測試</code>，當一個測試案例執行時，PostgreSQL 隨著 <code>docker-compose up -d</code> 而跑起來，此時 database 是空的，必須重新執行 Migration 與 Data Seeding，將 schema 與基本資料建立起來，然後才能讓每個測試案例新增測試資料跑測試</li>
<li>Data Seeding 也可以用在 production 環境，當 production 環境需要一些基本資料才能正常執行時，就適合使用 Data Seeding</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/EFCoreMigration" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding" target="_blank" rel="external">Data Seeding</a><br><a href="https://github.com/aspnet/EntityFrameworkCore" target="_blank" rel="external">Entity Framework Core</a>, <a href="https://github.com/aspnet/EntityFrameworkCore/issues/11776" target="_blank" rel="external">Seeding data: The seed entity for entity type ‘X’ cannot be added because there was no value provided for the required property ‘Id’.</a></p>
]]></content>
    <summary type="html">
    <![CDATA[EF Core 2.1 終於支援 Data Seeding]]>
    
    </summary>
    
      <category term="EF Core" scheme="https://oomusou.io/tags/EF-Core/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Entity Framework Core 使用 Migration ? (PostgreSQL)]]></title>
    <link href="https://oomusou.io/efcore/migration/"/>
    <id>https://oomusou.io/efcore/migration/</id>
    <published>2018-06-13T12:23:43.000Z</published>
    <updated>2018-06-21T05:43:14.751Z</updated>
    <content type="html"><![CDATA[<p>透過 PostgreSQL 官方提供的 Npgsql EF Core Provider，Entity Framework Core 也能簡單地存取 PostgreSQL。</p>
<p>本文將使用 Code First 方式對 PostgreSQL 建立 database schema，並解釋 Migration 背後運作原理。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.1<br>Entity Framework 2.1<br>PostgreSQL 10.3<br>Npgsql EF Core Provider 2.1<br>VS Code 1.24.0<br>DataGrip 2018.1.4</p>
<h2 id="Definition">Definition</h2><hr>
<blockquote>
<p><strong>Code First</strong></p>
<p>會先在 code 建立 <code>DbContext</code> 與 <code>Entity</code> ，然後透過 Migration 在 database 建立 schema</p>
<p>Q : 為什麼要使用 Code First 與 Migration ?</p>
</blockquote>
<p>A : 傳統都會使用視覺化工具建立 database schema，這種方式雖然直覺，但有以下缺點：</p>
<ul>
<li>Schema 建立步驟無法透過 Git 版控</li>
<li>無法很簡單的同步 development / lab / stage / production 各 server 環境的 database schema</li>
</ul>
<p>EF Core 提供以下解決方案：</p>
<ul>
<li>透過 Code First，schema 改用 Entity 描述，我們可將 Migration 檔案進行 Git 版控，明確地知道 schema 變化過程</li>
<li>透過 Migration，只要在各 server 執行 <code>dotnet ef database update</code>，就能確保 schema 同步</li>
</ul>
<h2 id="建立_Console_App">建立 Console App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o EFCoreMigration</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 .NET Core App。</p>
<ul>
<li><strong>new</strong>：建立 project</li>
<li><strong>console</strong>：建立 console 類型 project</li>
<li><strong>-o</strong>：以 <code>EFCorePostgres</code> 為專案名稱並建立目錄</li>
</ul>
<p><img src="/images/efcore/migration/migration000.png" alt="post000"></p>
<h2 id="以_VS_Code_開啟">以 VS Code 開啟</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>cd <span class="class">EFCoreMigration</span></span><br><span class="line">~/<span class="class">EFCorrMigration</span> <span class="char">$ </span>code .</span><br></pre></td></tr></table></figure>
<p>進入專案目錄，呼叫 VS Code 開啟。</p>
<p><img src="/images/efcore/migration/migration001.png" alt="post001"></p>
<p><img src="/images/efcore/migration/migration002.png" alt="post002"></p>
<h2 id="安裝_EF_Core_Package">安裝 EF Core Package</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet add package Microsoft<span class="class">.EntityFrameworkCore</span><span class="class">.Design</span></span><br></pre></td></tr></table></figure>
<p>將來會在 CLI 執行 migration，而 <code>dotnet ef</code> 必須透過 <code>Microsoft.EntityFrameworkCore.Design</code> 才能存取 Entity 與 DbContext，所以必須另外安裝 package。</p>
<p><img src="/images/efcore/migration/migration005.png" alt="post005"></p>
<ol>
<li>輸入 <code>dotnet add package Microsoft.EntityFrameworkCore.Design</code> 安裝 package</li>
</ol>
<p><img src="/images/efcore/migration/migration003.png" alt="post003"></p>
<ol>
<li>安裝完 package 會在 <code>.csproj</code> 會增加新的 <code>&lt;PackageReference/&gt;</code></li>
</ol>
<h2 id="安裝_PostgreSQL_Database_Provider">安裝 PostgreSQL Database Provider</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet add package Npgsql<span class="class">.EntityFrameworkCore</span><span class="class">.PostgreSQL</span></span><br></pre></td></tr></table></figure>
<p>EF Core 預設提供了 MSSQL、SQLite 與 InMemory 3 個 Database Provider，其餘的 provider 則由原廠 vendor 提供。</p>
<p>其中 Npgsql 為 PostgreSQL 所提供的 EFCore Database Provider。</p>
<p><img src="/images/efcore/migration/migration006.png" alt="post006"></p>
<ol>
<li>使用 <code>dotnet add package</code> 安裝 <code>Npgsql.EntityFrameworkCore.PostgreSQL</code> package</li>
</ol>
<p><img src="/images/efcore/migration/migration004.png" alt="post004"></p>
<ol>
<li>安裝完 package 會在 <code>.csproj</code> 會增加新的 <code>&lt;PackageReference/&gt;</code></li>
</ol>
<blockquote>
<p>目前在 <code>.csproj</code> 一共會看到 <code>Microsoft.EntityFrameworkCore.Design</code> 與 <code>Npgsql.EntityFrameworkCore.PostgreSQL</code> 兩個 package</p>
</blockquote>
<h2 id="EF_Core">EF Core</h2><hr>
<p>在 EF Core，database 在 ORM 中都有相對應的物件：</p>
<ul>
<li><strong>Database</strong>：EF Core 的 <code>DbContext</code></li>
<li><strong>Table</strong>：EF Core 的 <code>Entity</code></li>
<li><strong>Column</strong>：EF Core 的 <code>Property</code></li>
</ul>
<p>我們即將在 PostgreSQL 建立 :</p>
<ul>
<li><strong>Database</strong> : <code>eflab</code></li>
</ul>
<ul>
<li><strong>Table</strong>：<code>Customers</code></li>
<li><strong>Column</strong>：<ul>
<li><code>CustomerID</code> : int (PK)</li>
<li><code>Name</code> : string</li>
</ul>
</li>
</ul>
<h2 id="Code_First">Code First</h2><hr>
<p><strong>建立 Entity</strong></p>
<p><code>Entity</code> 在 EF Core 中代表 table，我們將建立自己的 Entity。</p>
<p>其中 <code>Customer</code> entity 代表 <code>Customers</code> table。</p>
<blockquote>
<p>Entity 名稱為 <code>單數</code>，而 table 名稱為 <code>複數</code></p>
</blockquote>
<p><strong>Customer.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> CustomerID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 3 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br></pre></td></tr></table></figure>
<p>Entity 為 <code>單數</code>，所以使用單數的 <code>Customer</code>。</p>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> CustomerID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>Column 以 property 呈現。</p>
<blockquote>
<p>Q : string 是否能指定長度 ?</p>
</blockquote>
<p>A : EF Core 能使用 <code>[StringLength()]</code> 指定 string 的 column 長度，我們將在稍後改變長度，目前先不指定長度，看看不指定長度下的 string，在 PostgreSQL 會如何 ?</p>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> CustomerID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>Table 的 PK，EF Core 規定要以 <code>table name</code> + <code>ID</code> 表示，則 migration 時會自動將該欄位建立成 PK，不需要額外 attribute。</p>
<p><img src="/images/efcore/migration/migration009.png" alt="migration009"></p>
<p><strong>建立 DbContext</strong></p>
<p><code>DbContext</code> 在 EF Core 中代表 database，我們將繼承 <code>DbContext</code> 建立自己的 database context。</p>
<p>其中 <code>EFLabDbContext</code> DbContext 代表 <code>eflab</code> database。</p>
<p><strong>EFLabDbContext.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFLabDbContext</span>: <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Customer&gt; Customers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DbConnectionString = <span class="string">"Host=localhost;Port=5432;Database=eflab;Username=admin;Password=12345"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            optionsBuilder.UseNpgsql(DbConnectionString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EFLabDbContext</span>: <span class="title">DbContext</span></span><br></pre></td></tr></table></figure>
<p>建立自己的 <code>EFLabDbContext</code>，繼承自 <code>DbContext</code>。</p>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DbSet&lt;Customer&gt; Customers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>使用 property 宣告 table，其型別為 <code>DbSet&lt;Customer&gt;</code>，這表示其在 EF Core 為 <code>Customer</code> entity，而在 database 為 <code>Customers</code> table。</p>
<blockquote>
<p>Entity 名稱為 <code>單數</code>，而 table 名稱為 <code>複數</code></p>
</blockquote>
<p>第 8 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DbConnectionString = <span class="string">"Host=localhost;Port=5432;Database=eflab;Username=admin;Password=12345"</span>;</span><br></pre></td></tr></table></figure>
<p>連接 database server 需要基本的資訊，統稱為 database connection string，包含以下資料：</p>
<ul>
<li><strong>Host</strong> : 設定 PostgreSQL server 的名稱</li>
<li><strong>Port</strong> : 設定 PostgreSQL 對外的 port</li>
<li><strong>Database</strong> : 設定要連接的 database</li>
<li><strong>Username</strong> : 設定 user name</li>
<li><strong>Password</strong> : 設定 password</li>
</ul>
<blockquote>
<p> 這些資訊在建立 PostgreSQL 的 <code>docker-compose.yml</code> 時，都已經在 <code>.env</code> 建立</p>
</blockquote>
<p>第 10 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    optionsBuilder.UseNpgsql(DbConnectionString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Override <code>OnConfiguring()</code> 設定 database。</p>
<p>EF Core 會傳入 <code>DbContextOptionBuider</code>，因為我們要連接的是 PostgreSQL，其 database provider 為 <code>Npgsql</code>， 所以將 connection string 傳入 <code>OptionBuilder.UseNpgsql()</code> 。</p>
<p><img src="/images/efcore/migration/migration010.png" alt="migration010"></p>
<h2 id="Migration">Migration</h2><hr>
<p>Migration 分兩個階段：</p>
<ul>
<li>建立 Migration</li>
<li>執行 Migration</li>
</ul>
<p><strong>建立 Migration</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet ef migrations <span class="keyword">add </span>Migration00</span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet ef migrations add</code> 建立 Migration，其中 <code>Migration00</code> 為 Migration 名稱，請自行建立不重複的名稱。</p>
<p><img src="/images/efcore/migration/migration007.png" alt="migration007"></p>
<p><img src="/images/efcore/migration/migration011.png" alt="migration011"></p>
<ol>
<li>執行完 <code>dotnet ef migrations add Migration00</code>，會發現新增了 <code>Migrations</code> 目錄，並增加了 <code>3</code> 個檔案</li>
</ol>
<blockquote>
<p>Q : 為什麼需要這 3 個 Migration 檔案 ?</p>
</blockquote>
<p>A : 稍後在 <code>Migration 工作原理</code> 會一併並解釋。</p>
<p><strong>執行 Migration</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">EFCoreMigration</span> $ <span class="keyword">dotnet</span> ef database update</span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet ef database update</code> 執行 Migration。</p>
<blockquote>
<p>EF Core 將根據剛剛在 <code>Migrations</code> 所建立的 3 個檔案，與 <code>DbContext.OnConfiguration()</code> 的設定，對 PostgreSQL 進行 Migration</p>
</blockquote>
<p><img src="/images/efcore/migration/migration008.png" alt="migration008"></p>
<ol>
<li>執行了 <code>Migration00</code></li>
</ol>
<p><strong>確認 Database</strong></p>
<p><img src="/images/efcore/migration/migration012.png" alt="migration012"></p>
<ol>
<li>展開 <code>eflab</code> database</li>
<li>EF Core 的 Migration 在 <code>eflab</code> 建立了 <code>__EFMigrationHistory</code> 與 <code>Customers</code> 兩個 table</li>
<li><code>Customers</code> 則建立 <code>CustomerID</code> 與 <code>Name</code> 兩個 column，並有 <code>PK_Customers</code></li>
</ol>
<p>注意 <code>Name</code> 的型別為 <code>text</code>，也就是在 Entity 的 <code>string</code>，預設在 PostgreSQL 為 <code>text</code>，而不是 <code>varchar</code>。</p>
<blockquote>
<p>若 Migration 沒有建立成功，請確認 Docker 與 PostgreSQL container 已經正常執行</p>
<p>Q : 為什麼會多了 <code>__EFMigrationHistory</code> table 呢 ?</p>
</blockquote>
<p>A : 稍後在 <code>Migration 工作原理</code> 會一併並解釋。</p>
<h2 id="Code_First-1">Code First</h2><hr>
<p><strong>新增 Field</strong></p>
<p>若只是單純將 Entity 建立成 table，還顯不出 Migration 的威力。</p>
<p>實務上因為需求的變動，我們會想在 table 新增 column，我們只要繼續在 Entity 新增 property 即可。</p>
<p><strong>Customer.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> CustomerID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>新增 <code>Age</code> property。</p>
<p><img src="/images/efcore/migration/migration013.png" alt="migration013"></p>
<h2 id="Migration-1">Migration</h2><hr>
<p><strong>建立 Migration</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet ef migrations <span class="keyword">add </span>Migration01</span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet ef migrations add</code> 建立 Migration，其中 <code>Migration01</code> 為 Migration 名稱，有別於剛剛建立的 <code>Migration00</code>。</p>
<p><img src="/images/efcore/migration/migration014.png" alt="migration007"></p>
<p><img src="/images/efcore/migration/migration017.png" alt="migration017"></p>
<ol>
<li>新增兩個 Migration 檔案</li>
</ol>
<blockquote>
<p>Q : 為什麼第二次 Migration 只新增了兩個檔案 ?</p>
</blockquote>
<p>A : 稍後在 <code>Migration 工作原理</code> 會一併並解釋。</p>
<p><strong>執行 Migration</strong><br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="type">EFCoreMigration</span> $ <span class="keyword">dotnet</span> ef database update</span><br></pre></td></tr></table></figure></p>
<p>輸入 <code>dotnet ef database update</code> 執行 Migration。</p>
<p><img src="/images/efcore/migration/migration015.png" alt="migration015"></p>
<ul>
<li>只執行了 <code>Migration01</code>，並沒有執行 <code>Migration00</code></li>
</ul>
<blockquote>
<p>Q : 為什麼 EF Core 知道只執行新的 Migration，而不是全部 Migration 重跑一次 ?</p>
</blockquote>
<p>A : 稍後在 <code>Migration 工作原理</code> 會一併並解釋。</p>
<p><strong>確認 Database</strong></p>
<p><img src="/images/efcore/migration/migration016.png" alt="migration016"></p>
<ol>
<li><code>Customers</code> 只新增了 <code>Age</code> column</li>
</ol>
<h2 id="Code_First-2">Code First</h2><hr>
<p><strong>指定 Column 長度</strong></p>
<p><strong>Customer.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> CustomerID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [StringLength(<span class="number">20</span>)]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實務上也常會有改變欄位長度的需求，目前我們將 <code>Name</code> 加上 <code>StringLength()</code> attribute，指定長度為 <code>20</code>。</p>
<p><img src="/images/efcore/migration/migration021.png" alt="migration021"></p>
<ol>
<li>在 <code>Name</code> 加上 <code>StringLength()</code> attribute</li>
<li>加上 <code>using System.ComponentModel.DataAnnotations;</code> namespace</li>
</ol>
<h2 id="Migration-2">Migration</h2><hr>
<p><strong>建立 Migration</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/EFCoreMigration $ dotnet ef migrations <span class="keyword">add </span>Migration02</span><br></pre></td></tr></table></figure>
<p>由於 <code>Customer</code> entity 被修改，因此必須建立新的 Migration。</p>
<p><img src="/images/efcore/migration/migration022.png" alt="migration022"></p>
<ul>
<li>由於我們是將 <code>text</code> 改成 <code>varchar(20)</code>，因此有可能會 loss 資料，EF Core 特別提出警告</li>
</ul>
<p><strong>執行 Migration</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet ef database update</span><br></pre></td></tr></table></figure>
<p>輸入 <code>dotnet ef database update</code> 執行 Migration。</p>
<p><img src="/images/efcore/migration/migration023.png" alt="migration023"></p>
<ul>
<li>只執行了 <code>Migration02</code>，並沒有執行其他 Migration</li>
</ul>
<p><strong>確認 Database</strong></p>
<p><img src="/images/efcore/migration/migration024.png" alt="migration024"></p>
<ol>
<li><code>Name</code> 由 <code>text</code> 變成 <code>varchar(20)</code></li>
</ol>
<h2 id="Migration_工作原理">Migration 工作原理</h2><hr>
<p>目前 Migration 已經正常執行，Table 與 Column 也都如預期建立在 PostgreSQL，但我們累積了很多疑問：</p>
<ul>
<li>Q : 為什麼需要這 3 個 Migration 檔案 ?</li>
<li>Q : 為什麼會多了 <code>__EFMigrationHistory</code> table 呢 ?</li>
<li>Q : 為什麼第二次 Migration 只有兩個檔案 ?</li>
<li>Q : 為什麼 EF Core 知道只執行新的 Migration，而不是全部 Migration 重跑一次 ?</li>
</ul>
<p>這些都是 Migration 的黑魔法，我們必須從 EF Core 的 Migration 工作原理談起。</p>
<p><strong>建立 Migration</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet ef migrations <span class="keyword">add</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/images/efcore/migration/migration018.svg" alt="migration018"></p>
<ol>
<li>根據 <code>DbContext</code> 與 <code>Entity</code> 蒐集要建立 Migration 的資訊</li>
<li>比對 <code>ModelSnapshot.cs</code> 與 <code>DbContext</code> 與 <code>Entity</code> 的差異，決定 Migration 檔案要如何建立</li>
<li><code>MyMigrate.Designer.cs</code> 與 <code>MyMigrate.cs</code> 就是實際的 Migration 檔案</li>
<li>將新增異動的 schema 寫入 <code>ModelSnapshot.cs</code></li>
</ol>
<p><strong>ModelSnapshot.cs</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;auto-generated /&gt;</span></span><br><span class="line"><span class="keyword">using</span> EFCoreMigration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Infrastructure;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Storage.ValueConversion;</span><br><span class="line"><span class="keyword">using</span> Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration.Migrations</span></span><br><span class="line">&#123;</span><br><span class="line">    [DbContext(<span class="keyword">typeof</span>(EFLabDbContext))]</span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">EFLabDbContextModelSnapshot</span> : <span class="title">ModelSnapshot</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildModel</span>(<span class="params">ModelBuilder modelBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable 612, 618</span></span><br><span class="line">            modelBuilder</span><br><span class="line">                .HasAnnotation(<span class="string">"Npgsql:ValueGenerationStrategy"</span>, NpgsqlValueGenerationStrategy.SerialColumn)</span><br><span class="line">                .HasAnnotation(<span class="string">"ProductVersion"</span>, <span class="string">"2.1.0-rtm-30799"</span>)</span><br><span class="line">                .HasAnnotation(<span class="string">"Relational:MaxIdentifierLength"</span>, <span class="number">63</span>);</span><br><span class="line"></span><br><span class="line">            modelBuilder.Entity(<span class="string">"EFCoreMigration.Customer"</span>, b =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    b.Property&lt;<span class="keyword">int</span>&gt;(<span class="string">"CustomerID"</span>)</span><br><span class="line">                        .ValueGeneratedOnAdd();</span><br><span class="line"></span><br><span class="line">                    b.Property&lt;<span class="keyword">int</span>&gt;(<span class="string">"Age"</span>);</span><br><span class="line"></span><br><span class="line">                    b.Property&lt;<span class="keyword">string</span>&gt;(<span class="string">"Name"</span>)</span><br><span class="line">                        .HasMaxLength(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">                    b.HasKey(<span class="string">"CustomerID"</span>);</span><br><span class="line"></span><br><span class="line">                    b.ToTable(<span class="string">"Customers"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore 612, 618</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>描述了 database schema 該有哪些 table 與 column。</p>
<blockquote>
<p><code>ModelSnapshot.cs</code> 可視為前一次 Migration 所產生 database schema 的 golden sample，因此可用目前的 <code>DbContext</code> 、 <code>Entity</code> 與 <code>ModelSnapshot</code> 做比對，產生新的 Migration 檔案</p>
</blockquote>
<p><strong>Migration02.Designer.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;auto-generated /&gt;</span></span><br><span class="line"><span class="keyword">using</span> EFCoreMigration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Infrastructure;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Migrations;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Storage.ValueConversion;</span><br><span class="line"><span class="keyword">using</span> Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration.Migrations</span></span><br><span class="line">&#123;</span><br><span class="line">    [DbContext(<span class="keyword">typeof</span>(EFLabDbContext))]</span><br><span class="line">    [Migration(<span class="string">"20180615035640_Migration03"</span>)]</span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Migration03</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildTargetModel</span>(<span class="params">ModelBuilder modelBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable 612, 618</span></span><br><span class="line">            modelBuilder</span><br><span class="line">                .HasAnnotation(<span class="string">"Npgsql:ValueGenerationStrategy"</span>, NpgsqlValueGenerationStrategy.SerialColumn)</span><br><span class="line">                .HasAnnotation(<span class="string">"ProductVersion"</span>, <span class="string">"2.1.0-rtm-30799"</span>)</span><br><span class="line">                .HasAnnotation(<span class="string">"Relational:MaxIdentifierLength"</span>, <span class="number">63</span>);</span><br><span class="line"></span><br><span class="line">            modelBuilder.Entity(<span class="string">"EFCoreMigration.Customer"</span>, b =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    b.Property&lt;<span class="keyword">int</span>&gt;(<span class="string">"CustomerID"</span>)</span><br><span class="line">                        .ValueGeneratedOnAdd();</span><br><span class="line"></span><br><span class="line">                    b.Property&lt;<span class="keyword">int</span>&gt;(<span class="string">"Age"</span>);</span><br><span class="line"></span><br><span class="line">                    b.Property&lt;<span class="keyword">string</span>&gt;(<span class="string">"Name"</span>)</span><br><span class="line">                        .HasMaxLength(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">                    b.HasKey(<span class="string">"CustomerID"</span>);</span><br><span class="line"></span><br><span class="line">                    b.ToTable(<span class="string">"Customers"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore 612, 618</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>描述了這次 Migration 建立後最終的 schema。</p>
<p><strong>Migration02.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Migrations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreMigration.Migrations</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Migration03</span> : <span class="title">Migration</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            migrationBuilder.AlterColumn&lt;<span class="keyword">string</span>&gt;(</span><br><span class="line">                name: <span class="string">"Name"</span>,</span><br><span class="line">                table: <span class="string">"Customers"</span>,</span><br><span class="line">                maxLength: <span class="number">20</span>,</span><br><span class="line">                nullable: <span class="keyword">true</span>,</span><br><span class="line">                oldClrType: <span class="keyword">typeof</span>(<span class="keyword">string</span>),</span><br><span class="line">                oldNullable: <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            migrationBuilder.AlterColumn&lt;<span class="keyword">string</span>&gt;(</span><br><span class="line">                name: <span class="string">"Name"</span>,</span><br><span class="line">                table: <span class="string">"Customers"</span>,</span><br><span class="line">                nullable: <span class="keyword">true</span>,</span><br><span class="line">                oldClrType: <span class="keyword">typeof</span>(<span class="keyword">string</span>),</span><br><span class="line">                oldMaxLength: <span class="number">20</span>,</span><br><span class="line">                oldNullable: <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>描述了 <code>dotnet ef database update</code> 與 <code>dotnet ef migrations remove</code> 要執行的動作。</p>
<p>第 7 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    migrationBuilder.AlterColumn&lt;<span class="keyword">string</span>&gt;(</span><br><span class="line">       name: <span class="string">"Name"</span>,</span><br><span class="line">       table: <span class="string">"Customers"</span>,</span><br><span class="line">       maxLength: <span class="number">20</span>,</span><br><span class="line">       nullable: <span class="keyword">true</span>,</span><br><span class="line">       oldClrType: <span class="keyword">typeof</span>(<span class="keyword">string</span>),</span><br><span class="line">       oldNullable: <span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當執行 <code>dotnet ef datebase update</code> 時，就會執行 <code>Up()</code>，包含如何建立 schema。</p>
<p>以 <code>Migration02</code> 為例，這次 migration 的目的就是將 <code>Name</code> 的 <code>text</code> 改成 <code>varchar(20)</code>，因此在 <code>Up</code> 只看到 <code>AlterColumn&lt;T&gt;()</code>。</p>
<p>18 行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    migrationBuilder.AlterColumn&lt;<span class="keyword">string</span>&gt;(</span><br><span class="line">        name: <span class="string">"Name"</span>,</span><br><span class="line">        table: <span class="string">"Customers"</span>,</span><br><span class="line">        nullable: <span class="keyword">true</span>,</span><br><span class="line">        oldClrType: <span class="keyword">typeof</span>(<span class="keyword">string</span>),</span><br><span class="line">        oldMaxLength: <span class="number">20</span>,</span><br><span class="line">        oldNullable: <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當執行 <code>dotnet ef migrations remove</code> 時，就會執行 <code>Down()</code>，包含如何還原此次 Migration 所需要的動作。</p>
<p>由於 <code>Migration02</code> 主要動作就是將 <code>Name</code> 由 <code>text</code> 改成 <code>varchar(20)</code>，因此 <code>Down()</code> 就是反過來由 <code>varchar(20)</code> 改成 <code>text</code>。</p>
<blockquote>
<p>由於 <code>MyMigrate.Designer.cs</code> 與 <code>MyMigrate.cs</code> 都是 C# 檔案，因此可以進入 Git 版控，可藉由 Migration 檔案的變化，得知 database schema 變化的歷程，且若真的 Migration 錯誤，還可以透過 <code>dotnet ef migrations remove</code> 還原 Migration 所變動的 database schema</p>
<p><code>MyMigrate.Designer.cs</code> 與 <code>MyMigrate.cs</code> 雖然是由 CLI 產生，但並非不能修改，一些進階的Migration 功能，就得自行修改才能實現，如想利用 Migration 建立 Stored Procedure，就必須自行修改 <code>MyMigrate.cs</code> 的 <code>Up()</code></p>
<p>但 <code>ModelSnapshot.cs</code> 則不應該修改，應該交由 Migration 去維護，否則會發生錯亂</p>
</blockquote>
<p>這解釋了 :</p>
<ol>
<li>Q : 為什麼需要這 3 個 Migration 檔案 ?</li>
<li>Q : 為什麼第二次 Migration 只有兩個檔案 ?</li>
</ol>
<p><strong>執行 Migration</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>dotnet ef database update</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/efcore/migration/migration019.svg" alt="migration019"></p>
<ol>
<li>檢查是否有 <code>__EFMigrationHistory</code> table，若沒有，表示是第一次執行 Migration</li>
<li>若是第一次執行 Migration，會建立 <code>__EFMigrationHistory</code> table</li>
<li>若已經有 <code>__EFMigrationHistory</code>，表示已經執行過 Migration，因此在 <code>__EFMigrationHistory</code> 會有 Migration 紀錄，可查詢已經執行過哪些 Migration</li>
<li>執行尚未執行過的 Migration</li>
<li>將執行過的 Migration <code>名稱</code> 寫進 <code>__EFMigrationHistory</code></li>
</ol>
<p><img src="/images/efcore/migration/migration020.png" alt="migration020"></p>
<p><code>__EFMigrationHistory</code> 記載了執行過的 Migration 名稱。</p>
<p>透過 <code>__EFMigrationHistory</code>，<code>dotnet ef database update</code> 就知道每次該執行哪些沒執行過的 Migration，且在不同環境下，如 development / lab / stage / production，因為各自有各自的 <code>__EFMigrationHistory</code>，也能根據不同環境執行不同的 Migration。</p>
<p>這解釋了  : </p>
<ol>
<li>Q : 為什麼會多了 __EFMigrationHistory table 呢 ?</li>
<li>Q : 為什麼 EF Core 知道只執行新的 Migration，而不是全部 Migration 重跑一次 ?</li>
</ol>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Code First 與 Migration 解決了 database schema 無法 Git 版控與 schema 同步問題，且完全使用開發端技術，而不是資料庫端技術 </li>
<li>Migration 另外一個優點就是用在 <code>整合測試</code>，當配合 Docker 時，每個測試案例在執行前先 <code>docker-compose up</code> 建立 PostgreSQL container，接著跑 Migration 建立 schema，然後跑整合測試讀寫 PostgreSQL， 測試完畢後再 <code>docker-compose down</code> 刪除 PostgreSQL container，所有在 PostgreSQL 的測試資料也跟著刪除，下一個測試案例再重新 <code>docker-compose up</code> 建立新的 container，重新跑 Migration …，如此能確保每個整合測試都是全新乾淨的 database，完全沒有任何 side effect</li>
<li>因為不了解 Migration，所以很多人在實務上不敢用 Migration，事實上對於新的技術，只要能充分了解其背後原理與機制，就不再是黑魔法了</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/EFCoreMigration" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="http://www.npgsql.org/doc/index.html" target="_blank" rel="external">Npgsql</a>, <a href="http://www.npgsql.org/efcore/index.html" target="_blank" rel="external">Entity Framework Core</a><br>John P Smith, <a href="https://www.manning.com/books/entity-framework-core-in-action" target="_blank" rel="external">Entity Framework Core in Action</a></p>
]]></content>
    <summary type="html">
    <![CDATA[了解 Migration 的黑魔法]]>
    
    </summary>
    
      <category term="EF Core" scheme="https://oomusou.io/tags/EF-Core/"/>
    
      <category term="PostgreSQL" scheme="https://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rider Refactoring 之 Extract Higher Order Function]]></title>
    <link href="https://oomusou.io/rider/extract-higher-order-function/"/>
    <id>https://oomusou.io/rider/extract-higher-order-function/</id>
    <published>2018-06-12T12:23:43.000Z</published>
    <updated>2018-06-11T16:34:23.071Z</updated>
    <content type="html"><![CDATA[<p>Higher Order Function 是 JavaScript 或 FP 語言常見的語言機制，事實上 C# 也支援某種程度的 FP，如 Func、 Predicate 與 Action。</p>
<p>透過 Rider，我們也能將既有 method 重構出具 FP 風格的 Higher Order Function。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>.NET Core 2.1<br>Rider 2018.1.2</p>
<h2 id="Func">Func</h2><hr>
<h3 id="重構前">重構前</h3><p><strong>OrderService.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof000.png" alt="hof000"></p>
<p><code>price</code> 實務上會從 repository 而來，為了簡化起見，暫時 hardcore <code>price</code> 為 <code>100</code>。</p>
<p>因為 <code>全館八折</code>，所以 <code>price</code> 一律打八折。</p>
<p><strong>Program.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof001.png" alt="hof001"></p>
<p>Client 呼叫 <code>OrderService.CalculatePrice()</code>。</p>
<h3 id="重構後">重構後</h3><p><strong>OrderService.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof002.png" alt="hof002"></p>
<p>目前 <code>全館八折</code> 的 <code>price * 0.8</code> 是寫死的，但考量折扣的算法常常會變，寫死並不是一個好方法，因此想將 <code>price * 0.8</code> 整個 expression 抽成 parameter。</p>
<ol>
<li>選擇 <code>price * 0.8</code></li>
<li>熱鍵 <code>⌃ + T</code> ，呼叫出 <code>Refactor This</code></li>
<li>選擇 <code>Introduce Parameter</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof003.png" alt="hof003"></p>
<ol>
<li>將下方的 <code>Select parameters to enlambda</code> 的 parameter 打勾，parameter 型別將為 <code>Func&lt;double, double&gt;</code></li>
<li>輸入 parameter 名稱為 <code>discountStrategy</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof004.png" alt="hof004"></p>
<ol>
<li>原來的 <code>price * 0.8</code> 重構成 <code>discountStrtegy(price)</code></li>
<li><code>discountStrategy</code> parameter 型別為 <code>Func&lt;double, double&gt;</code></li>
</ol>
<p><strong>Program.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof005.png" alt="hof005"></p>
<ol>
<li>原來的 <code>price * 0.8</code> 重構成 <code>price =&gt; price * 0.8</code> 以 Lambda 形式傳入</li>
</ol>
<blockquote>
<p>Q : 這樣重構有什麼好處呢 ?</p>
<p>若將來折扣規則改成 <code>全館折價 100</code>，只要傳入 <code>price =&gt; price - 100</code> 即可，<code>OrderService</code> 完全不用修改，符合 <code>開放封閉原則</code> 要求</p>
</blockquote>
<h2 id="Predicate">Predicate</h2><hr>
<h3 id="重構前-1">重構前</h3><p><strong>OrderService.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof006.png" alt="hof006"></p>
<p><code>price</code> 實務上會從 repository 而來，為了簡化起見，暫時 hardcore <code>price</code> 為 <code>100</code>。</p>
<p>因為 <code>滿千送百</code>，所以 <code>price</code> 超過 <code>1000.0</code> 會自動折價 <code>100.0</code>。</p>
<p><strong>Program.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof007.png" alt="hof007"></p>
<p>Client 呼叫 <code>OrderService.CalculatePrice()</code>。</p>
<h3 id="重構後-1">重構後</h3><p><strong>OrderService.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof008.png" alt="hof008"></p>
<p>目前 <code>滿千送百</code> 的 <code>price &gt; 1000.0</code> 是寫死的，但考量折扣的算法常常會變，寫死並不是一個好方法，因此想將 <code>price &gt; 1000.0</code> 整個 expression 抽成 parameter。</p>
<ol>
<li>選擇 <code>price &gt; 1000.0</code></li>
<li>熱鍵 <code>⌃ + T</code> ，呼叫出 <code>Refactor This</code></li>
<li>選擇 <code>Introduce Parameter</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof011.png" alt="hof011"></p>
<ol>
<li>將下方的 <code>Select parameters to enlambda</code> 的 parameter 打勾，parameter 型別將為 <code>Func&lt;double, bool&gt;</code></li>
<li>輸入 parameter 名稱為 <code>discountPredicate</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof009.png" alt="hof009"></p>
<ol>
<li>原來的 <code>price &gt; 1000.0</code> 重構成 <code>discountPredicate(price)</code></li>
<li><code>discountStrategy</code> parameter 型別為 <code>Func&lt;double, bool&gt;</code></li>
</ol>
<blockquote>
<p>理想上當然是抽成 <code>Predicate&lt;double&gt;</code>，但目前 Rider 只能抽成 <code>Func&lt;double, bool&gt;</code>，但因為兩個型別等價，所以不滿意但可以接受</p>
</blockquote>
<p><img src="/images/rider/extract-higher-order-function/hof010.png" alt="hof010"></p>
<ol>
<li>原來的 <code>price &gt; 1000.0</code> 重構成 <code>price =&gt; price &gt; 1000.0</code> 以 Lambda 形式傳入</li>
</ol>
<blockquote>
<p>Q : 這樣重構有什麼好處呢 ?</p>
<p>若將來折扣規則改成 <code>只有 1000 ~ 2000 之間有折扣</code>，只要傳入 <code>price =&gt; price &gt; 1000.0 &amp;&amp; price &lt; 2000.0</code> 即可，<code>OrderService</code> 完全不用修改，符合 <code>開放封閉原則</code> 要求</p>
</blockquote>
<h2 id="Action">Action</h2><hr>
<h3 id="重構前-2">重構前</h3><p><strong>OrderService.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof012.png" alt="hof012"></p>
<p><code>price</code> 實務上會從 repository 而來，為了簡化起見，暫時 hardcore <code>price</code> 為 <code>2000</code>。</p>
<p>因為過年活動 <code>全館折價 100</code>，所以 <code>price - 100</code> 。</p>
<p>因為過年，所以特別顯示 <code>Happy New Year!!</code>。</p>
<p><strong>Program.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof013.png" alt="hof013"></p>
<p>Client 呼叫 <code>OrderService.CalculatePrice()</code>。</p>
<h3 id="重構後-2">重構後</h3><p><strong>OrderService.cs</strong></p>
<p><img src="/images/rider/extract-higher-order-function/hof014.png" alt="hof014"></p>
<p>目前 <code>Happy New Year!!</code> 是寫死的，但考量不同節慶顯示不同訊息，甚至不同顯示方式 (呼叫其他 service ?)，寫死並不是一個好方法，因此想將 <code>Console.WriteLine(&#39;Happy New Year!!&#39;)</code> 整個 statement 抽成 parameter。</p>
<ol>
<li>選擇 <code>Console.WriteLine(&#39;Happy New Year!!&#39;)</code></li>
<li>熱鍵 <code>⌃ + T</code> ，呼叫出 <code>Refactor This</code></li>
<li>目前並無  <code>Introduce Parameter</code> 可選，只剩下 <code>Extract Method</code> 與 <code>Introduce Variable</code>，試試看先 <code>Introduce Variable</code> 後再 <code>Introduce Parameter</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof015.png" alt="hof015"></p>
<ol>
<li>若選擇 <code>Introduce Variable</code>，則顯示 <code>Expression type is void</code> ，無法繼續重構</li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof016.png" alt="hof016"></p>
<ol>
<li>這裡必須自己寫 code，先自行宣告 <code>Action</code> 型別變數，將 <code>Console.WriteLine(&#39;Happy New Year!!&#39;)</code> 包在 Lambda 內，最後再用 <code>Action.Invoke()</code> 執行 <code>action</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof017.png" alt="hof017"></p>
<ol>
<li>選擇 <code>action</code> 變數</li>
<li>熱鍵 <code>⌃ + T</code> ，呼叫出 <code>Refactor This</code>，選擇 <code>Introduce Parameter</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof019.png" alt="hof019"></p>
<ol>
<li>已經抓出 parameter 型別為 <code>Action</code></li>
<li>輸入 parameter 名稱</li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof020.png" alt="hof020"></p>
<ol>
<li>原來的 <code>Action action = () =&gt; { Console.WriteLine(&quot;Happy New Year!!&quot;); };</code> 重構成 <code>action</code> parameter</li>
<li><code>action</code> parameter 型別為 <code>Action</code></li>
</ol>
<p><img src="/images/rider/extract-higher-order-function/hof021.png" alt="hof021"></p>
<ol>
<li>原來的 <code>Action action = () =&gt; { Console.WriteLine(&quot;Happy New Year!!&quot;); };</code> 重構成 <code>() =&gt; { Console.WriteLine(&quot;Happy New Year!!&quot;); }</code> 以 Lambda 形式傳入</li>
</ol>
<blockquote>
<p>Q : 這樣重構有什麼好處呢 ?</p>
<p>若將來顯示訊息改變，甚至呼叫其他 service 顯示，只要傳入 <code>（）=&gt; {}</code> 即可，<code>OrderService</code> 完全不用修改，符合 <code>開放封閉原則</code> 要求</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>隨著 C# 支援 FP 越來越完整，Extract Higher Order Function 的需求會越來越多，而 Extract Method 卻無法抽出 Higher Order Function，必須靠 Introduce Parameter，才能抽出 Func、Predicate 與 Action</li>
<li>目前 Rider 無法直接抽出 Predicate，所幸 Predicate 也都可以用 Func 表示，雖不滿意但尚可接受</li>
<li>目前 Rider 無法直接抽出 Action，必須搭配一些小技巧，才能順利抽出 Action</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 GitHub 上找到</p>
<ul>
<li><a href="https://github.com/oomusou/RiderExtractFunc" target="_blank" rel="external">Extract Func</a></li>
<li><a href="https://github.com/oomusou/RiderExtractPredicate" target="_blank" rel="external">Extract Predicate</a></li>
<li><a href="https://github.com/oomusou/RiderExtractAction" target="_blank" rel="external">Extract Action</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[C# 也能輕鬆抽出 Higher Order Function]]>
    
    </summary>
    
      <category term="Refactoring" scheme="https://oomusou.io/tags/Refactoring/"/>
    
      <category term="Rider" scheme="https://oomusou.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 CLI 呼叫 Typora 開啟 Markdown ?]]></title>
    <link href="https://oomusou.io/typora/typora-cli/"/>
    <id>https://oomusou.io/typora/typora-cli/</id>
    <published>2018-06-07T13:23:43.000Z</published>
    <updated>2018-06-07T14:54:45.727Z</updated>
    <content type="html"><![CDATA[<p>隨著 CLI 的流行，在 CLI 下以 <code>code .</code> 開啟 VS Code 非常方便，對於常用的 Markdown 檔案，是否也能在 CLI 以 <code>typora .</code> 開啟 Typora 呢 ?</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>zsh 5.3<br>Typora 0.9.9.16.2</p>
<h2 id="設定_Alias">設定 Alias</h2><hr>
<p><strong>.zshrc</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> typora=<span class="string">"open -a typora"</span></span><br></pre></td></tr></table></figure>
<p>只要在你的 <code>.zshrc</code> 加上這個 alias，就可以在任何目錄</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>typora .</span><br></pre></td></tr></table></figure>
<p>以 Typora 開啟目前目錄</p>
<p>或</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ typora foo.<span class="built_in">md</span></span><br></pre></td></tr></table></figure>
<p>直接以 Typora 開啟某個檔案。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>Typora 是非常好用的 Markdown 編輯器，有別於傳統左右視窗的 Markdown 編輯器，Typora 是 WYSISWYG，除了直接使用 Markdown 語法外，也可以搭配熱鍵，還支援自動 outline 功能</li>
<li>透過簡單的 alias，就可以使用 CLI 方式開啟 Typora 了</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://typora.io" target="_blank" rel="external">Typora</a>, <a href="https://support.typora.io/Use-Typora-From-Shell-or-cmd/" target="_blank" rel="external">Use Typora from shell or Cmd</a></p>
]]></content>
    <summary type="html">
    <![CDATA[完全在 CLI 開啟 Typora]]>
    
    </summary>
    
      <category term="CLI" scheme="https://oomusou.io/tags/CLI/"/>
    
      <category term="Typora" scheme="https://oomusou.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何架設企業內部的 NuGet Server ?]]></title>
    <link href="https://oomusou.io/netcore/nuget/nuget-server/"/>
    <id>https://oomusou.io/netcore/nuget/nuget-server/</id>
    <published>2018-06-07T12:23:43.000Z</published>
    <updated>2018-06-07T10:09:01.388Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 目前仍延續 .NET Framework 使用 NuGet 為 package，除了使用公用的 NuGet server 外，企業也需要自己內部使用 NuGet server。</p>
<p>NuGet Foundation 提供了 <code>NuGet.Server</code> 免費使用，但目前只有 .NET Framework 版本，因此還是只能安裝在 Windows Server 上。<br><a id="more"></a></p>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Parallel Desktop 13 for Mac Pro Edition 13.3.1 (43365)<br>Windows 10 Pro 1803 17134.81<br>Visual Studio Enterprise 2017 15.7.3<br>NuGet.Server 3.1.2<br>.NET Framework 4.6.1<br>.NET Core 2.1</p>
<h2 id="建立_NuGet_Server">建立 NuGet Server</h2><hr>
<p>NuGet.Server 已經被封裝的 NuGet package，只要建立 ASP.NET MVC Application，並且加入 <code>NuGet.Server</code> package，不用寫任何一行 code，編譯後就是可用的 NuGet server。</p>
<h2 id="建立_ASP-NET_Web_Application">建立 ASP.NET Web Application</h2><hr>
<p><img src="/images/netcore/nuget/nuget-server/nuget000.png" alt="nuget000"></p>
<ol>
<li>選擇 <code>Web</code></li>
<li>選擇 <code>ASP.NET Web Application</code> (不是 ASP.NET Core)</li>
<li><strong>Name</strong>：輸入 project 名稱</li>
<li><strong>Framework</strong>：注意是 <code>.NET Framework 4.6</code>，不是 .NET Core</li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/netcore/nuget/nuget-server/nuget001.png" alt="nuget001"></p>
<ol>
<li>選擇 <code>Empty</code> ，其餘什麼都不用勾選</li>
<li>按 <code>OK</code> 繼續</li>
</ol>
<h2 id="安裝_NuGet-Server_Package">安裝 NuGet.Server Package</h2><hr>
<p><img src="/images/netcore/nuget/nuget-server/nuget002.png" alt="nuget002"></p>
<p><strong><em>Tools -&gt; NuGet Package Manager -&gt; Manage NuGet Package for Solution</em></strong></p>
<p><img src="/images/netcore/nuget/nuget-server/nuget003.png" alt="nuget003"></p>
<ol>
<li>輸入 <code>NuGet.Server</code></li>
<li>選擇 <code>NuGet.Server</code></li>
<li>勾選 <code>NuGetServer</code> project</li>
<li>按 <code>Install</code> 開始安裝 package</li>
</ol>
<p><img src="/images/netcore/nuget/nuget-server/nuget004.png" alt="nuget004"></p>
<ol>
<li>按 <code>OK</code> 繼續</li>
</ol>
<p><img src="/images/netcore/nuget/nuget-server/nuget005.png" alt="nuget005"></p>
<ol>
<li>按 <code>I Accept</code> 繼續</li>
</ol>
<p><img src="/images/netcore/nuget/nuget-server/nuget006.png" alt="nuget006"></p>
<ol>
<li><code>NuGet.Server</code> package 安裝完成</li>
</ol>
<h2 id="編輯_Web-config">編輯 Web.config</h2><hr>
<p><img src="/images/netcore/nuget/nuget-server/nuget007.png" alt="nuget007"></p>
<ol>
<li>將 18 行的 <code>&lt;compilation debug=&quot;true&quot; targetFramework=&quot;4.6&quot; /&gt;</code> 刪除，這算是 bug，重複兩個相同的 <code>targetFramework</code> 會無法執行</li>
</ol>
<h2 id="設定_API_Key">設定 API Key</h2><hr>
<p><img src="/images/netcore/nuget/nuget-server/nuget009.png" alt="nuget009"></p>
<ol>
<li>當使用 <code>dotnet nuget push</code> 上傳時，會需要指定 API Key，可在 <code>Web.config</code> 內設定。</li>
</ol>
<h2 id="測試_NuGet_Server">測試 NuGet Server</h2><hr>
<p><img src="/images/netcore/nuget/nuget-server/nuget008.png" alt="nuget008"></p>
<ol>
<li>按熱鍵 <code>Alt + Shift + R</code> Start Without Debug，此時會啟動 IIS Express 執行</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet nuget push MyClassLib<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>.nupkg -k <span class="number">12345</span> -s http:<span class="comment">//localhost:49771/nuget</span></span><br></pre></td></tr></table></figure>
<p>使用 .NET Core CLI 的 <code>dotnet nuget push</code> 將 <code>.nupkg</code> 上傳到 NuGet server。</p>
<ul>
<li><strong>-k</strong> : 指定 API Key</li>
<li><strong>-s</strong> : 指定 NuGet server 網址</li>
</ul>
<p><img src="/images/netcore/nuget/nuget-server/nuget010.png" alt="nuget010"></p>
<p>目前為止，<code>NuGet.Server</code> 已經正常啟動，也可接受 <code>dotnet nuget push</code> 將 <code>.nupkg</code> 上傳到 NuGet server，但 IIS Express 會動態選擇 port，只適合開發測試用，最後還是得將 NuGet.Server 安裝到 IIS 上。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>目前 NuGet.Server 還沒有 .NET Core 版本，這也意味著若使用 NuGet.Server，只能搭配 .NET Framework，也就是只能用於 Windows Server，還無法跨平台裝在 Linux 上</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://poychang.github.io" target="_blank" rel="external">Poy Chang</a>, <a href="https://poychang.github.io" target="_blank" rel="external">架設私有的 NuGet 伺服器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[可惜目前只有 .NET Framework 版本]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term=".NET Framework" scheme="https://oomusou.io/tags/NET-Framework/"/>
    
      <category term="NuGet" scheme="https://oomusou.io/tags/NuGet/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入淺出 Dockerfile 與 Docker Compose]]></title>
    <link href="https://oomusou.io/docker/dockerfile-dockercompose/"/>
    <id>https://oomusou.io/docker/dockerfile-dockercompose/</id>
    <published>2018-06-05T12:23:43.000Z</published>
    <updated>2018-06-08T05:19:26.198Z</updated>
    <content type="html"><![CDATA[<p>Dockerfile 與 Docker Compose 是 Docker 兩個最重要的概念，也是初學者最容易卡關的地方，本文以 <code>使用需求</code> 為觀點解釋這兩者的差異。</p>
<a id="more"></a>
<h2 id="Image_與_Container">Image 與 Container</h2><hr>
<p>在解釋 Dockerfile 與 Docker Compose 之前，先複習兩個更基礎的概念：</p>
<h3 id="Image">Image</h3><hr>
<p>將 Service 打包成 image，通常會從 Docker Hub 下載官方的 image 使用，也可以根據官方的 image 再包成自己的 image，或者完全自行製作自己的 image。</p>
<h3 id="Container">Container</h3><hr>
<p>Image 類似 template，基於壓好的 image 產生隔離的執行環境，稱之為 container。</p>
<p>一般會以 Microservice 方式使用 container，也就是會同時啟動多個 container 形成 service。</p>
<blockquote>
<p>Image 與 container 都會佔硬碟空間，尤其 container 若執行完畢後，雖然 container 從記憶體釋放，但在硬碟仍然會留一份 container 的 <code>屍體</code> ，需要自行刪除，或者在 <code>docker run</code> 時增加 <code>--rm</code> 參數，在執行完自行從硬碟刪除 container</p>
</blockquote>
<h2 id="Dockerfile">Dockerfile</h2><hr>
<p>實務上我們會從 Docker Hub 下載官方的 Docker Image 使用，但官方的 image 功能可能過於陽春，我們可能想根據自己的需求，再安裝其他的 app，最後再打包成自己的 Docker image。</p>
<p>在傳統 VM 時代，要打造自己的 image，必須用 export 方式，但這樣有幾個缺點：</p>
<ul>
<li>Image 可能非常龐大</li>
<li>安裝步驟無法進 git 版控</li>
</ul>
<p>Docker 以 <code>Infrastructure as Code</code> 概念，將  infrastructure 以 code 形式描述：</p>
<p><strong>Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Linux library dependency</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget apt-transport-https gpg</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install microsoft.gpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://packages.microsoft.com/config/ubuntu/<span class="number">18.04</span>/prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv prod.list /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install .NET Core SDK</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Display Greeting</span></span><br><span class="line"><span class="built_in">CMD</span> <span class="bash">[ <span class="string">"echo"</span>, <span class="string">"Ubuntu 18.04 LTS with .NET Core 2.1"</span>]</span></span><br></pre></td></tr></table></figure>
<p>以上為典型的 <code>Dockerfile</code>，只需一個文字檔，就清楚描述一個 Docker image。</p>
<p>以前若要在 Ubuntu 安裝其他 dependency，只能透過 Bash 安裝一堆 package，最後再 export 成 image，但 image 可能很龐大，且安裝步驟也無法 git 版控。</p>
<p>但透過 Dockerfile 之後，整個新的 Ubuntu 都是以 code 形式描述，你只要將 <code>Dockerfile</code> 給其他人，對方只要使用 <code>docker build</code> 就能自行根據 <code>Dockerfile</code> 建立 Docker image，最後再根據 <code>docker run</code> 執行客製化過的 Ubuntu container。</p>
<ul>
<li><code>Dockerfile</code> 檔案很小，只是文字檔而已</li>
<li>由於 <code>Dockerfile</code> 是文字檔，可以 git 版控</li>
</ul>
<blockquote>
<p>簡單的說，<code>Dockerfile 就是描述如何產生客製化的 image</code>，只是採用 code 形式描述</p>
</blockquote>
<h2 id="Docker_Compose">Docker Compose</h2><hr>
<p>實務上一個服務，一定由眾多 service 共同運作。如一個典型的 Web 服務，最少就必須有</p>
<blockquote>
<p>.NET Core Runtime + Nginx + Redis + PosgreSQL</p>
</blockquote>
<p>4 個 service 一起運行，若只使用 <code>docker run</code>，則勢必寫 Bash 來管理 4 個 service，還必須考慮：</p>
<ul>
<li>4 個 service 必須在同一個虛擬 network 下</li>
<li>4 個 service 的啟動順序</li>
</ul>
<p>… 等問題。</p>
<p>Docker 為此提出 Docker Compose 概念，在 <code>docker-compose.yml</code> 檔描述各 service 間的參數與關係：</p>
<p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  netcore:&#10;    image: microsoft/dotnet&#10;    container_name: MyNETCore&#10;    volumes:&#10;      - $&#123;NETCORE_HOST_DIR&#125;:/code/&#10;    tty: true&#10;    networks: &#10;      - netcore-dev&#10;    depends_on:&#10;      - postgres&#10;&#10;  postgres:&#10;    image: postgres&#10;    container_name: MyPostgres&#10;    volumes:&#10;      - $&#123;POSTGRES_HOST_DIR&#125;/data:/var/lib/postgresql/data&#10;    expose:&#10;      - &#34;5432&#34;&#10;    ports:&#10;      - &#34;$&#123;POSTGRES_PORT&#125;:5432&#34;&#10;    environment:&#10;      - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;      - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;      - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;&#10;    networks:&#10;      - netcore-dev&#10;&#10;networks:&#10;  netcore-dev:</span><br></pre></td></tr></table></figure>
<p>以上為典型的 <code>docker-compose.yml</code>，只需一個文字檔，就清楚描述 .NET Core Runtime 與 PostgreSQL 兩個 service，將 <code>docker-compose.yml</code> 拿到任何裝有 Docker 的電腦，都成重現 .NET Core + PostreSQL 的環境，也就是 <code>Infrastructure as Code</code>。</p>
<ul>
<li><code>docker-compose.yml</code> 檔案很小，只是文字檔而已</li>
<li>由於 <code>docker-compose.yml</code> 是文字檔，可以 git 版控</li>
</ul>
<blockquote>
<p>間單的說，<code>docker-compose.yml 就是 container 的管理文件</code>，只是採用 code 形式描述</p>
</blockquote>
<h2 id="FAQ">FAQ</h2><hr>
<blockquote>
<p>Q：<code>Dockerfile</code> 與 <code>docker-compose.yml</code> 看起來很像，都是在描述 server，有什麼差別呢 ?</p>
</blockquote>
<ul>
<li><code>Dockerfile</code> 是用來描述 image，也就是如何產生客製化的 image，通常用來安裝 package，將檔案複製進 image 用</li>
<li><code>docker-compose.yml</code> 是用來描述 container，也就是管理一個以上的 container，彼此串連，把同一組架構寫在一起，通常用來設定 container 參數，設定 container 的網路，設定 container 啟動順序或 service 的環境變數 … 等</li>
</ul>
<blockquote>
<p>Q：<code>Dockerfile</code> 是用來描述 image，<code>docker-compose.yml</code> 是用來描述 container，但若我們還有客製化的 <code>邏輯</code> 該怎麼辦 ?</p>
</blockquote>
<p>若在使用 <code>Dockerfile</code> 或 <code>docker-compose.yml</code> 時，還必須搭配額外的 <code>if else</code> 或 <code>for loop</code> 邏輯，就必須再搭配 Bash。</p>
<p><code>Dockerfile</code> 與 <code>docker-composer.yml</code> 只是設計用來描述 <code>infrastructure</code>，並不是描述 <code>邏輯</code>。</p>
<blockquote>
<p>Q：單一 service 也適用 <code>docker-compose.yml</code> 嗎 ?</p>
</blockquote>
<p>由於實務上，儘管是單一 service，如只為了使用 PostgreSQL，也必須在 <code>docker run</code> 搭配一堆參數，但人的腦容量有限，很難記住所有的參數，與其寫在 Bash，建議寫在 <code>docker-compose.yml</code> ，統一由 <code>docker-compose</code> 管理。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li><code>Dockerfile</code> 用來描述 image；而 <code>docker-compose.yml</code> 用來描述 container</li>
<li>若 <code>Dockerfile</code> 與 <code>docker-compose.yml</code> 還無法達到客製化的需求，就必須搭配 Bash</li>
<li><code>Dockerfile</code> 與 <code>docker-compose.yml</code> 都是文字檔，因此檔案很小，也容易 git 版控，實現 <code>Infrastructur as Code</code> 理想。</li>
<li>儘管只有一個 container，也建議使用 <code>docker-compose.yml</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[兩個初學者最容易卡關的概念]]>
    
    </summary>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 建立 .NET Core + PostgreSQL 開發環境 ?]]></title>
    <link href="https://oomusou.io/docker/postgres-core/"/>
    <id>https://oomusou.io/docker/postgres-core/</id>
    <published>2018-06-04T12:23:43.000Z</published>
    <updated>2018-06-04T08:32:28.687Z</updated>
    <content type="html"><![CDATA[<p>當使用 .NET Core 之後，server 就不見的要使用 Microsoft 技術，可自由選擇 Linux 受歡迎的 service，如 Nginx、Redis、PostgreSQL … 等。</p>
<p>以 PostgreSQL 而言，透過 Docker，我們可以很輕鬆的在 Windows 或 macOS 建立 .NET Core + PostgreSQL 開發環境，且重點是 Linux 版的 PostgreSQL 的。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.1<br>PostgreSQL 10.3<br>DataGrip 2018.1.4</p>
<h2 id="建立_Docker_Compose">建立 Docker Compose</h2><hr>
<p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  netcore:&#10;    image: microsoft/dotnet&#10;    container_name: MyNETCore&#10;    volumes:&#10;      - $&#123;NETCORE_HOST_DIR&#125;:/code/&#10;    tty: true&#10;    networks: &#10;      - netcore-dev&#10;    depends_on:&#10;      - postgres&#10;&#10;  postgres:&#10;    image: postgres&#10;    container_name: MyPostgres&#10;    volumes:&#10;      - $&#123;POSTGRES_HOST_DIR&#125;/data:/var/lib/postgresql/data&#10;    expose:&#10;      - &#34;5432&#34;&#10;    ports:&#10;      - &#34;$&#123;POSTGRES_PORT&#125;:5432&#34;&#10;    environment:&#10;      - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;      - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;      - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;&#10;    networks:&#10;      - netcore-dev&#10;&#10;networks:&#10;  netcore-dev:</span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;</span><br></pre></td></tr></table></figure>
<p><code>version</code> 為 <code>docker-compose.yml</code> 的第一層 tag，用來設定 <code>docker-compose.yml</code> 格式的版本。</p>
<p>因為 <code>docker-compose.yml</code> 的格式版本與 Docker 版本息息相關，若你要使用新版的 Docker 所提供的功能，在 <code>docker-compose.yml</code> 的版本就必須下的更細，如 <code>3.3</code>，在此只使用了 <code>docker-compose.yml</code> 基本功能而已，使用 <code>3</code> 即可。</p>
<p>第 3 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services:&#10;  netcore:&#10;  postgres:</span><br></pre></td></tr></table></figure>
<p><code>services</code> 為 <code>docker-compose.yml</code> 的第一層 tag，用來設定有哪些 service 要一起跑。</p>
<p>以本文為例，要同時跑 <code>.NET Core</code> 與 <code>PostgreSQL</code> 兩個 service，因此在 <code>docker-compose.yml</code> 內建立 <code>netcore</code> 與 <code>postgres</code> 兩個 service。</p>
<p>31 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  netcore-dev:</span><br></pre></td></tr></table></figure>
<p><code>networks</code> 為 <code>docker-compose.yml</code> 的第一層 tag，用來設定 container 間所共用的網路名稱。</p>
<p>以本文為例，我們希望 <code>netcore</code> 與 <code>postgres</code> 兩個 container 都跑在相同的網路下，彼此都能看到對方，因此特別宣告了 <code>netcore-dev</code> 網路，將來兩個 container 都將共用此網路。</p>
<p>第 4 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netcore:&#10;  image: microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>設定 <code>netcore</code> service，此名稱可自行建立。</p>
<p>使用 <code>image</code>設定使用 <code>microsoft/dotnet</code> image。</p>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyNETCore</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 <code>netcore</code> service 的 container 名稱為 <code>MyNETCore</code>。</p>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - $&#123;NETCORE_HOST_DIR&#125;:/code/</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumns</code> 設定 Host OS 與 container 所共享目錄，將來 Host OS 所分享的目錄，相當於 container 內部的 <code>/code</code> 目錄。</p>
<p>由於每個人 Host OS 要分享的目錄都不一樣，因此設定成 <code>NETCORE_HOST_DIR</code> 變數，稍後自行在 <code>.env</code> 設定。</p>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tty: true</span><br></pre></td></tr></table></figure>
<p>Docker 為了節省硬體資源，app 執行完就會釋放 container，但處於開發階段，我們需要的是類似 service 跑在背景，隨時可以進入 container 測試 Linux app。</p>
<p><code>tty: true</code> 將令 Docker 分配一個 TTY (<code>T</code> ele <code>TY</code> pewriter)，綁定到 container 的 <code>stdin</code> 與 <code>stdout</code> 上，將來我們才能透過 Bash 對 container 下指令，由於 <code>tty</code> 在背景持續執行，因此 container 就不會被釋放。</p>
<p>10 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks: &#10;  - netcore-dev</span><br></pre></td></tr></table></figure>
<p>使用 <code>networks</code> 設定 container 所要使用的網路名稱。</p>
<p>由於之前已經建立了 <code>netcore-dev</code> 網路，現在 <code>netcore</code> container 將使用 <code>netcore-dev</code> 網路。</p>
<p>12 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">depends_on:&#10;  - postgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>depends_on</code> 設定 container 的啟動順序。</p>
<p>我們希望 <code>postgres</code> container 先啟動後，<code>netcore</code> container 再啟動，如此 .NET Core 才能使用 PostgresSQL。</p>
<p>15 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres:&#10;  image: postgres</span><br></pre></td></tr></table></figure>
<p>設定 <code>postgres</code> service，此名稱可自行建立。</p>
<p>使用 <code>image</code> 設定使用 <code>postgres</code> image。</p>
<p>17 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyPostgres</span><br></pre></td></tr></table></figure>
<p>使用 <code>container_name</code> 設定 <code>postgres</code> service 的 container 名稱為 <code>MyPostgres</code>。</p>
<p>18 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - $&#123;POSTGRES_HOST_DIR&#125;/data:/var/lib/postgresql/data</span><br></pre></td></tr></table></figure>
<p>使用 <code>volumns</code> 設定 PostgreSQL 所儲存的資料到 Host OS。</p>
<blockquote>
<p>我們不希望 PostreSQL 將資料存在 container 內部，如此 PostgreSQL 將來要更新版本時會很麻煩，無法簡單換掉 container 就更新版本，因此特別使用 <code>volumns</code> 指定 Host OS 目錄，如此 PostgreSQL 會將資料存在 Host OS，而不是 container 內</p>
</blockquote>
<p>20 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expose:&#10;  - &#34;5432&#34;</span><br></pre></td></tr></table></figure>
<p>PostgreSQL 將以 port 5432 對外溝通。</p>
<blockquote>
<p>注意這只是對 <code>netcore-dev</code> 網路以 port 5432，若要讓 Host OS 存取，必須進一步靠 <code>ports</code> 設定</p>
</blockquote>
<p>22 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:&#10;  - &#34;$&#123;POSTGRES_PORT&#125;:5432&#34;</span><br></pre></td></tr></table></figure>
<p>使用 <code>ports</code> 設定 Host OS 與 container 的 port 對應。</p>
<p>由於每個人 Host OS 所希望的 port 不同，因此設定成 <code>POSTGRES_PORT</code> 變數，稍後自行在 <code>.env</code> 設定。</p>
<p>24 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environment:&#10;  - POSTGRES_DB=$&#123;POSTGRES_DB&#125;&#10;  - POSTGRES_USER=$&#123;POSTGRES_USER&#125;&#10;  - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>environment</code> 設定 PostgreSQL 所需的環境變數。</p>
<ul>
<li><strong>POSTGRES_DB</strong>： 要使用的 database，container 在建立時，會幫我們自動建立</li>
<li><strong>POSTGRES_USER</strong>：連進 PostgreSQL 的 <code>user</code></li>
<li><strong>POSTGRES_PASSWORD</strong>：連進 PostgreSQL 的 <code>password</code></li>
</ul>
<p>由於這 3 個變數每個人的需求不同，因此統一使用變數在 <code>.env</code> 設定。</p>
<p>28 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networks:&#10;  - netcore-dev</span><br></pre></td></tr></table></figure>
<p>使用 <code>networks</code> 設定 container 所要使用的網路名稱。</p>
<p>由於之前已經建立了 <code>netcore-dev</code> 網路，現在 <code>postgres</code> container 將使用 <code>netcore-dev</code> 網路，如此 <code>netcore</code> 與 <code>postgres</code> 都在相同的 <code>netcore-dev</code> 網路下，可以彼此看到對方。</p>
<p><img src="/images/docker/postgres-core/post000.png" alt="post000"></p>
<p><strong>.env</strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NETCORE_HOST_DIR=<span class="value">~/Code/CSharp</span></span></span><br><span class="line"><span class="setting">POSTGRES_HOST_DIR=<span class="value">~/Postgres</span></span></span><br><span class="line"><span class="setting">POSTGRES_DB=<span class="value">eflab</span></span></span><br><span class="line"><span class="setting">POSTGRES_USER=<span class="value">admin</span></span></span><br><span class="line"><span class="setting">POSTGRES_PASSWORD=<span class="value"><span class="number">12345</span></span></span></span><br><span class="line"><span class="setting">POSTGRES_PORT=<span class="value"><span class="number">5432</span></span></span></span><br></pre></td></tr></table></figure>
<p>所有 Host OS 自行設定的部分，全部放在 <code>.env</code>。</p>
<ul>
<li><strong>NETCORE_HOST_DIR</strong> : 設定 Host OS 的 .NET Core 專案所在目錄</li>
<li><strong>POSTGRES_HOST_DIR</strong> : 設定 PostgreSQL 將資料存到 Host OS 的目錄</li>
<li><strong>POSTGRES_DB</strong> : 設定 PostgreSQL 所使用的資料庫名稱</li>
<li><strong>POSTGRES_USER</strong> : 設定 PostgreSQL 連線的 user</li>
<li><strong>POSTGRES_PASSWORD</strong> : 設定 PostgreSQL 連線的 password</li>
<li><strong>POSTGRES_PORT</strong> : 設定 PostgreSQL 對應到 Host OS 的 port</li>
</ul>
<p><img src="/images/docker/postgres-core/post001.png" alt="post001"></p>
<h2 id="執行_Docker_Compose">執行 Docker Compose</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/PostgresCore $ docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>進入 <code>docker-compose.yml</code> 所在的目錄，執行 <code>docker-compose up</code> 啟動所有 container。</p>
<ul>
<li><strong>-d</strong>：<code>d</code> etatch，表示 <code>docker-compose</code> 啟動後將離開 container 的 process，讓 container 在背景執行</li>
</ul>
<p><img src="/images/docker/postgres-core/post002.png" alt="post002"></p>
<h2 id="連接_PostgreSQL">連接 PostgreSQL</h2><hr>
<p><img src="/images/docker/postgres-core/post003.png" alt="post003"></p>
<p>開啟 DataGrip：</p>
<ol>
<li>右側選擇 <code>Database</code> tab</li>
<li>上放按 <code>+</code> 新增連線</li>
<li>選擇 <code>Data Source -&gt; ProgreSQL</code></li>
</ol>
<p><img src="/images/docker/postgres-core/post004.png" alt="post004"></p>
<ol>
<li><strong>Name</strong>：設定 connection 連線名稱</li>
<li><strong>Database</strong>：設定剛剛所建立的 database</li>
<li><strong>User</strong>：設定剛剛所建立的 user</li>
<li><strong>Password</strong> : 設定剛剛所建立的 password</li>
<li>按 <code>Test Connection</code> 測試連線是否成功</li>
<li>顯示 <code>Successful</code> 確認連線成功</li>
<li>按 <code>OK</code> 建立連線</li>
</ol>
<p><img src="/images/docker/postgres-core/post005.png" alt="post005"></p>
<ol>
<li>顯示剛剛所建立的 database</li>
</ol>
<h2 id="結束_Docker_Compose">結束 Docker Compose</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">PostgresCore</span> <span class="char">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>進入 <code>docker-compose.yml</code> 所在的目錄，執行 <code>docker-compose down</code> 結束所有 container。</p>
<p><img src="/images/docker/postgres-core/post006.png" alt="post006"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>透過 Docker，我們可以很輕易在本機建立 .NET Core + PostgreSQL 環境，重點是跑的是 Linux 版本的 PostgreSQL，與 production 的 Linux 版本一致。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/PostgresCore" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[以 Docker 快速建立 PostgreSQL 開發環境]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
      <category term="PostgreSQL" scheme="https://oomusou.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立 Ubuntu 18.04 + .NET Core 2.1 的 Docker Image ?]]></title>
    <link href="https://oomusou.io/docker/ubuntu1804-core21/"/>
    <id>https://oomusou.io/docker/ubuntu1804-core21/</id>
    <published>2018-06-01T12:23:43.000Z</published>
    <updated>2018-06-05T02:56:34.984Z</updated>
    <content type="html"><![CDATA[<p>實務上我們會直接使用 .NET Core 2.1 的 <code>microsoft/netcore</code> Docker image，但我們也可以使用 Ubuntu 18.04 為基底，自行撰寫 Dockerfile，練習建立包含 .NET Core 2.1 的 Docker image。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>Ubuntu 18.04<br>.NET Core 2.1</p>
<h2 id="建立_Dockerfile">建立 Dockerfile</h2><hr>
<p><strong>Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Linux library dependency</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget apt-transport-https gpg</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install microsoft.gpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://packages.microsoft.com/config/ubuntu/<span class="number">18.04</span>/prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv prod.list /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Install .NET Core SDK</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span></span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Display Greeting</span></span><br><span class="line"><span class="built_in">CMD</span> <span class="bash">[ <span class="string">"echo"</span>, <span class="string">"Ubuntu 18.04 LTS with .NET Core 2.1"</span>]</span></span><br></pre></td></tr></table></figure>
<p>根據 .NET Core 官方文件 <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a>，若要在 Ubuntu 18.04 安裝 .NET Core 2.1，必須依照這些步驟。</p>
<p>將這些步驟改寫在 Dockerfile 內。</p>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> ubuntu</span><br></pre></td></tr></table></figure>
<p>根據最新版 ubuntu 為基底 image。</p>
<p>第 3 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Linux library dependency</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y wget apt-transport-https gpg</span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a> 所描述，若要在 Ubuntu 18.04 安裝 .NET Core，在 Ubuntu 還必須安裝以下 dependency：</p>
<ul>
<li>wget</li>
<li>apt-transport-https</li>
<li>gpg</li>
</ul>
<p>第 7 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install microsoft.gpg</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">wget -q https://packages.microsoft.com/config/ubuntu/<span class="number">18.04</span>/prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">mv prod.list /etc/apt/sources.list.d/microsoft-prod.list</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chown root:root /etc/apt/sources.list.d/microsoft-prod.list</span></span><br></pre></td></tr></table></figure>
<p>根據官網的 <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a> 所描述，要安裝 .NET Core SDK 前，必須先將 <code>microsoft.gpg</code> 裝好。</p>
<p> 15 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install .NET Core SDK</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">apt-get update</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">apt-get install -y dotnet-sdk-<span class="number">2.1</span>.<span class="number">3</span></span></span><br></pre></td></tr></table></figure>
<p>所有的 dependency 與  <code>microsoft.gpg</code> 都裝好後，就可以正式安裝 .NET Core SDK 了。</p>
<p>19 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Display Greeting</span></span><br><span class="line"><span class="built_in">CMD</span> <span class="bash">[ <span class="string">"echo"</span>, <span class="string">"Ubuntu 18.04 LTS with .NET Core 2.1"</span>]</span></span><br></pre></td></tr></table></figure>
<p>成為 container 後，最後執行 <code>echo Ubuntu 18.04 LTS with .NET Core 2.1</code>。</p>
<p><img src="/images/docker/ubuntu1804-core21/core000.png" alt="core000"></p>
<h2 id="建立自己的_Image">建立自己的 Image</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/UbuntuCore $ docker <span class="keyword">build </span>-t myubuntu .</span><br></pre></td></tr></table></figure>
<p>進入 <code>Dockerfile</code> 所在的目錄，使用 <code>docker build</code> 建立自己的 image。</p>
<ul>
<li><strong>-t</strong> : Docker image 的名稱</li>
<li><strong>.</strong> : 將目前目錄的 <code>Dockerfile</code> 建立成 image</li>
</ul>
<p><img src="/images/docker/ubuntu1804-core21/core001.png" alt="core001"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker images</span><br></pre></td></tr></table></figure>
<p><code>docker build</code> 的確幫我們建立了新的 <code>myubuntu</code> image。</p>
<p><img src="/images/docker/ubuntu1804-core21/core002.png" alt="core002"></p>
<h2 id="建立且執行_Container">建立且執行 Container</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--rm myubuntu</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 執行 <code>myubuntu</code> image。</p>
<ul>
<li><strong>–rm</strong>：執行完 container 後立即刪除，避免日後還要手動刪除 container</li>
</ul>
<p><img src="/images/docker/ubuntu1804-core21/core005.png" alt="core005"></p>
<p>顯示剛剛在 <code>Dockerfile</code> 的 <code>CMD [ &quot;cat&quot;, &quot;Ubuntu 18.04 LTS with .NET Core 2.1&quot;]</code>。</p>
<h2 id="顯示_Ubuntu_版本">顯示 Ubuntu 版本</h2><hr>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> myubuntu <span class="keyword">cat</span> /etc/lsb-release</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 執行剛剛建立的 image，並執行 <code>cat /etc/lsb-release</code> 顯示 Ubuntu 版本。</p>
<p><img src="/images/docker/ubuntu1804-core21/core003.png" alt="core003"></p>
<h2 id="顯示_-NET_Core_版本">顯示 .NET Core 版本</h2><hr>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> <span class="comment">--rm myubuntu dotnet --info</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 執行剛剛建立的 image，並執行 <code>dotnet --info</code> 顯示 .NET Core 版本。</p>
<p><img src="/images/docker/ubuntu1804-core21/core004.png" alt="core004"></p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>以前使用 VM 時，若要自建 VM，最後會 export 出一大包 image，除了很佔空間外，還無法 git 版控；但若改用 Dockerfile 後，由於都是文字檔，檔案非常小，也可以很輕鬆 git 版控</li>
<li>實務上雖然會直接使用 <code>microsoft/dotnet</code> Docker image，不過藉由此方式練習寫 Dockerfile 也很不錯，畢竟實務上會有很多機會要自己建立 Dockerfile</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/ubuntu1804-core21" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://www.microsoft.com/net/" target="_blank" rel="external">.NET Core</a>,  <a href="https://www.microsoft.com/net/download/linux-package-manager/rhel/sdk-current" target="_blank" rel="external">Install .NET Core SDK on Linux Ubuntu 18.04</a></p>
]]></content>
    <summary type="html">
    <![CDATA[練習自己寫 Dockerfile 很好的機會]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
      <category term="Ubuntu" scheme="https://oomusou.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何將 .NET Core App 打包成 Docker Image ?]]></title>
    <link href="https://oomusou.io/netcore/build-docker/"/>
    <id>https://oomusou.io/netcore/build-docker/</id>
    <published>2018-05-30T13:23:43.000Z</published>
    <updated>2018-06-05T03:52:26.110Z</updated>
    <content type="html"><![CDATA[<p>Docker 除了用在測試外，尚可將整個 app 打包成 Docker image，配合 Docker Compose 與其他 Microservice，可以直接用在 production。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.0.7<br>VS Code 1.23.1</p>
<h2 id="建立_Console_App">建立 Console App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用  <code>dotnet new</code> 建立 .NET Core App。</p>
<ul>
<li>new : 建立 project</li>
<li>console : 建立 console 類型 project</li>
<li>-o : 以 MyConsole 為專案名稱並建立目錄</li>
</ul>
<p><img src="/images/netcore/build-docker/docker000.png" alt="docker000"></p>
<ol>
<li>輸入 <code>dotnet new console -o MyConsole</code> 建立 <code>MyConsole</code> 專案，其專案類型為 <code>console app</code></li>
</ol>
<h2 id="建立_Dockerfile">建立 Dockerfile</h2><hr>
<p>由於我們想要將 app 打包成 Docker image，因此要建立自己的 <code>Dockerfile</code>，Docker 才能依照此 <code>Dockerfile</code> 建立 Docker image。</p>
<p><strong>Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:runtime-deps</span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">./bin/Release/netcoreapp2.<span class="number">0</span>/linux-x64/publish ./</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./MyConsole"</span>]</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:runtime-deps</span><br></pre></td></tr></table></figure>
<p><code>FROM</code> 為 Dockerfile 指令，表示以哪一個 image 為基礎建立自己的 image。</p>
<p>其中 <code>microsoft/dotnet:runtime-deps</code> 是 Microsoft 專為 .NET Core 準備的 Docker image，此 image 不含 .NET Core runtime，僅包含所需要的 Linux library，是最小包的 image。</p>
<p>第 2 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span></span><br></pre></td></tr></table></figure>
<p><code>WORKDIR</code> 為 Dockerfile 指令，表示其他 Dockerfile 指令 (如 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 與 <code>ADD</code> …等) 的工作目錄。</p>
<p>以上表示 <code>WORKDIR</code> 為 <code>/app</code>，若 <code>/app</code>  目錄不存在會自動建立。</p>
<p>第 4 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COPY</span> <span class="bash">./bin/Release/netcoreapp2.<span class="number">0</span>/linux-x64/publish ./</span></span><br></pre></td></tr></table></figure>
<p><code>COPY</code> 為 Dockerfile 指令，表示將 Host OS 的檔案或目錄，複製到 container 內。</p>
<p>第 1 個參數為 Host OS 檔案或目錄，第 2 個參數為 container 檔案或目錄。</p>
<p>以上表示僅將以 SCD 方式發布的 Linux App 複製到 container 內。</p>
<p>第 5 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"./MyConsole"</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>ENTRYPOINT</code> 為 Dockerfile 指令，表示 container 一啟動時，該執行什麼指令。</p>
<p>以上表示當 container 一啟動時，將執行 <code>./MyConsole</code>。</p>
<p><img src="/images/netcore/build-docker/docker002.png" alt="docker002"></p>
<h2 id="建立_Image">建立 Image</h2><hr>
<p><strong>BuildDocker.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">dotnet publish -c Release -r linux-x64</span><br><span class="line">docker build -t myconsole .</span><br></pre></td></tr></table></figure>
<p>由於使用的 Docker image 是 <code>microsoft/dotnet:runtime-deps</code>，這表示我們必須使用 SCD 方式發布，<code>dotnet publish</code> 特別加上 <code>-r linux-x64</code> 使用 SCD，其 runtime 為 <code>linux-x64</code>。</p>
<p>使用 <code>docker build</code> 由 <code>Dockerfile</code> 建立 Docker image。</p>
<ul>
<li><strong>-t</strong> : <code>t</code>ag，image 的名稱</li>
</ul>
<p><img src="/images/netcore/build-docker/docker004.png" alt="docker004"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyConsole $ chmod +x ./</span><span class="constant">BuildDocker.</span>sh</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 讓 <code>BuildDocker.sh</code> 能夠有 <code>被執行</code> 權限。</p>
<p><img src="/images/netcore/build-docker/docker005.png" alt="docker005"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/MyConsole $ ./</span><span class="constant">BuildDocker.</span>sh</span><br></pre></td></tr></table></figure>
<p>執行 <code>BuildDocker.sh</code> 建立 Docker image。</p>
<p><img src="/images/netcore/build-docker/docker001.png" alt="docker001"></p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>docker images</span><br></pre></td></tr></table></figure>
<p>確認 <code>myconsole</code> image 已經被產生。</p>
<p><img src="/images/netcore/build-docker/docker006.png" alt="docker006"></p>
<h2 id="建立_Docker_Compose">建立 Docker Compose</h2><hr>
<p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  net-core:&#10;    image: myconsole&#10;    container_name: MyConsole</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: myconsole</span><br></pre></td></tr></table></figure>
<p>使用自己剛剛建立的 <code>mycosole</code> image。</p>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyConsole</span><br></pre></td></tr></table></figure>
<p>建立名為 <code>MyConsole</code> 的 container。</p>
<p><img src="/images/netcore/build-docker/docker007.png" alt="docker007"></p>
<h2 id="執行_Docker_Compose">執行 Docker Compose</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>docker-compose up</span><br></pre></td></tr></table></figure>
<p>執行 <code>docker-compose up</code> 執行 <code>docker-compose.yml</code> 所定義的 container。</p>
<p><img src="/images/netcore/build-docker/docker008.png" alt="docker008"></p>
<p>正確顯示 <code>Hello World</code>，表示 .NET Core App 已在 Docker 內執行成功。</p>
<h2 id="結束_Docker_Compose">結束 Docker Compose</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="class">MyProject</span> <span class="char">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>執行 <code>docker-compose down</code> 結束並刪除 container。</p>
<p><img src="/images/netcore/build-docker/docker009.png" alt="docker009"></p>
<h2 id="Summary">Summary</h2><hr>
<p>在 Microsoft 官方的 <a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core" target="_blank" rel="external">Learn Docker Basics with .NET Core</a> 文件中，其 Dockerfile 如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:<span class="number">2.0</span>-sdk</span><br><span class="line"><span class="built_in">WORKDIR</span> <span class="bash">/app</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">*.csproj ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet restore</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy and build everything else</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">. ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet publish -c Release -o out</span><br><span class="line"></span><span class="built_in">ENTRYPOINT</span> <span class="bash">[<span class="string">"dotnet"</span>, <span class="string">"out/Hello.dll"</span>]</span></span><br></pre></td></tr></table></figure>
<p>第 1 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> microsoft/dotnet:<span class="number">2.0</span>-sdk</span><br></pre></td></tr></table></figure>
<p><code>FROM</code> 為 <code>microsoft/dotnet:2.0-sdk</code>，也就是包含了 .NET Core CLI，所以 image 一定比較大。</p>
<p>第 4 行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">*.csproj ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet restore</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># copy and build everything else</span></span><br><span class="line"><span class="built_in">COPY</span> <span class="bash">. ./</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dotnet publish -c Release -o out</span></span><br></pre></td></tr></table></figure>
<p>將所有 source code 都複製進 image，在 <code>docker build</code> 時，在 image 內執行 <code>dotnet restore</code> 與 <code>dotnet publish</code>，由於所有 source code 都進了 image，image 也一定比較大。</p>
<p>本文是 Host OS 以 SCD 方式 publish，僅將所需要的檔案複製進 image，如此 image 會小很多。</p>
<p><img src="/images/netcore/build-docker/docker010.png" alt="docker010"></p>
<p>實際比較發現，若使用 Microsoft 官方作法，Docker image 為 1.84 GB，但使用本文方式，只有 218 MB，非常適合 production 使用。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>將 .NET Core console app 打包成 Docker image 後，就可以跨平台執行此 image</li>
<li>此範例雖然是 console app，事實上將 ASP.NET Core 打包成 Docker image 也是類似以上流程</li>
<li>使用本文的方式，Docker image 的 size 將會有效的縮小</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/netcore-docker-production" target="_blank" rel="external">GitHub</a> 上找到</p>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/dotnet/core/" target="_blank" rel="external">.NET Core</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/docker/docker-basics-dotnet-core" target="_blank" rel="external">Learn Docker Basics with .NET Core</a></p>
]]></content>
    <summary type="html">
    <![CDATA[比官方文件更有效的作法]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用 Docker 打造 .NET Core 開發環境 ?]]></title>
    <link href="https://oomusou.io/netcore/docker-dev/"/>
    <id>https://oomusou.io/netcore/docker-dev/</id>
    <published>2018-05-30T12:23:43.000Z</published>
    <updated>2018-05-31T15:25:22.594Z</updated>
    <content type="html"><![CDATA[<p>雖然可以在 Windows 或 macOS 開發 .NET Core，但畢竟 production 環境是 Linux，因此在 Windows 或 macOS 測試成功，也不代表真正上 Linux 沒有問題。</p>
<p>透過 Docker，我們可以在開發階段就測試 Linux 環境，及早發現可能的問題。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.4<br>Docker for Mac 18.03-ce-mac65 (24312)<br>.NET Core 2.0.7<br>VS Code 1.23.1</p>
<h2 id="建立_-NET_Core_App">建立 .NET Core App</h2><hr>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> <span class="built_in">console</span> -o MyConsole</span><br></pre></td></tr></table></figure>
<p>使用  <code>dotnet new</code> 建立 .NET Core App。</p>
<ul>
<li><strong>new</strong> : 建立 project</li>
<li><strong>console</strong> : 建立 console 類型 project</li>
<li><strong>-o</strong> : 以 <code>MyConsole</code> 為專案名稱並建立目錄</li>
</ul>
<p><img src="/images/netcore/docker-dev/DockerDev004.png" alt="DockerDev004"></p>
<h2 id="執行_-NET_Core_App">執行 .NET Core App</h2><hr>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>cd <span class="class">MyConsole</span></span><br><span class="line">~/<span class="class">MyConsole</span> <span class="char">$ </span>dotnet run</span><br></pre></td></tr></table></figure>
<p>進入 <code>MyConsole</code> 目錄，並在 Host OS 執行 .NET Core App。</p>
<p><img src="/images/netcore/docker-dev/DockerDev005.png" alt="DockerDev005"></p>
<p>目前 .NET Core App  是跑在 Host OS，也就是 macOS，但並不保證在 Linux 也正常，因此我們必須進一步在 Linux 環境下測試。</p>
<p>實務上有兩種測試方式：</p>
<ul>
<li>在 Container 內測試</li>
<li>在 Container 外測試</li>
</ul>
<h2 id="在_Container_內測試">在 Container 內測試</h2><hr>
<p>我們先將 container 執行起來，然後連進 container 內部，以 Linux 環境執行 app。</p>
<h3 id="建立_Docker_Compose">建立 Docker Compose</h3><p><strong>docker-compose.yml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version: &#34;3&#34;&#10;&#10;services:&#10;  net-core:&#10;    image: microsoft/dotnet&#10;    container_name: MyCore&#10;    volumes:&#10;      - &#34;$&#123;HOST_DIR&#125;:/home/&#34;&#10;    tty: true</span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: microsoft/dotnet</span><br></pre></td></tr></table></figure>
<p>其基底的 image 為 <code>microsoft/dotnet</code>，此為 Micrsoft 所發布的 official .NET Core docker image。</p>
<blockquote>
<p>實務上 Docker 建議盡量使用 official image，避免被安裝木馬程式而不自知</p>
</blockquote>
<p>第 6 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container_name: MyCore</span><br></pre></td></tr></table></figure>
<p>建立名為 <code>MyCore</code> 的 container。</p>
<blockquote>
<p><code>container_name</code> 相當於 <code>docker run</code> 的 <code>--name</code> </p>
</blockquote>
<p>第 7 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volumes:&#10;  - &#34;$&#123;HOST_DIR&#125;:/home/&#34;</span><br></pre></td></tr></table></figure>
<p>設定 Host OS 與 container 所共享的目錄，將來 Host OS 所分享的目錄，相當於 container 內的 <code>/home</code> 目錄。</p>
<p>由於每個人 Host OS 要分享的目錄都不一樣，因此設定成 <code>HOST_DIR</code> 變數，稍後自行在 <code>.env</code> 設定。</p>
<blockquote>
<p><code>volumns</code> 相當於 <code>docker run</code> 的 <code>-v</code></p>
</blockquote>
<p>第 9 行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tty: true</span><br></pre></td></tr></table></figure>
<p>Docker 為了節省硬體資源，app 執行完就會釋放 container，但處於開發階段，我們需要的是類似 service 跑在背景，隨時可以進入 container 測試 Linux app。</p>
<p><code>tty: true</code> 將令 Docker 分配一個 TTY (<code>T</code> ele <code>TY</code> pewriter)，綁定到 container 的 <code>stdin</code> 與 <code>stdout</code> 上，將來我們才能透過 Bash 對 container 下指令，由於 <code>tty</code> 在背景持續執行，因此 container 就不會被釋放。</p>
<blockquote>
<p><code>tty</code> 相當於 <code>docker run</code> 的 <code>-t</code></p>
</blockquote>
<p><img src="/images/netcore/docker-dev/DockerDev000.png" alt="DockerDev000"></p>
<p><strong>.env</strong></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">HOST_DIR</span>=~/<span class="preprocessor">Code</span>/CSharp/MyConsole</span><br></pre></td></tr></table></figure>
<p>設定 Host OS 要與 container 共享的目錄。</p>
<p>注意 <code>=</code> 前後都沒有空格，否則 <code>docker-compose</code> 會執行錯誤。</p>
<blockquote>
<p>設計 <code>docker-compose.yml</code> 時，要盡量保持 <code>.yml</code> 不要修改，也就是 <code>開放封閉原則</code>，而將要修改客製化的部分搬到 <code>.env</code>，將來 <code>docker-compose.yml</code> 會進 git，但 <code>.env</code> 則不進 git</p>
</blockquote>
<p><img src="/images/netcore/docker-dev/DockerDev001.png" alt="DockerDev001"></p>
<h3 id="執行_Docker_Compose">執行 Docker Compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>進入 <code>docker-compose.yml</code> 所在的目錄，執行 <code>docker-compose up</code> 執行 container。</p>
<ul>
<li><strong>-d</strong>：<code>d</code> etatch，表示 <code>docker-compose</code> 執行後將離開 container 的 process，讓 container 在背景執行</li>
</ul>
<p><img src="/images/netcore/docker-dev/DockerDev002.png" alt="DockerDev002"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<p>可以發現 <code>MyCore</code> container 正在背景執行中，沒有被釋放。</p>
<p><img src="/images/netcore/docker-dev/DockerDev003.png" alt="DockerDev003"></p>
<h3 id="連進_Container_內">連進 Container 內</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ docker exec -it MyCore bash</span><br><span class="line">root<span class="constant">@83aeee036235</span>:/<span class="preprocessor"># cd /home/</span></span><br><span class="line">root<span class="constant">@83aeee036235</span>:/home<span class="preprocessor"># dotnet run</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>docker exec -it MyCore bash</code> 進入 container。</p>
<ul>
<li><strong>exec</strong>：執行 container 內的 Linux 指令</li>
<li><strong>-i</strong>：<code>i</code> nteractive，可對 terminal 輸入資料</li>
<li><strong>-t</strong>：<code>t</code> erminal，可對 terminal 顯示資料</li>
<li><strong>MyCore</strong>：container 名稱</li>
<li><strong>bash</strong>：在 container 執行 <code>bash</code>，讓我們可以對 Linux 下指令</li>
</ul>
<p>進入 <code>/home</code>，此為剛剛我們在 <code>.env</code> 所設定的共享目錄。</p>
<p>使用 <code>dotnet run</code> 執行 .NET Core App。</p>
<p><img src="/images/netcore/docker-dev/DockerDev006.png" alt="DockerDev006"></p>
<p>目前是同一份 code 真正跑在 Linux，因此可藉由 Docker 在開發階段，測試 app 是否真正能跑在 Linux。</p>
<h3 id="結束_Docker_Compose">結束 Docker Compose</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker-compose down</span><br></pre></td></tr></table></figure>
<p>進入 <code>docker-compose.yml</code> 所在的目錄，執行 <code>docker-compose down</code> 結束 container。</p>
<p><img src="/images/netcore/docker-dev/DockerDev007.png" alt="DockerDev007"></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker ps</span><br></pre></td></tr></table></figure>
<p>Container 已經結束且被釋放。</p>
<p><img src="/images/netcore/docker-dev/DockerDev008.png" alt="DockerDev008"></p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -<span class="literal">a</span></span><br></pre></td></tr></table></figure>
<p>Container 不僅被釋放，且在硬碟的 container 也被刪除了。</p>
<blockquote>
<p>若使用 <code>docker run</code>，儘管使用 <code>docker stop</code> 停止 container，但 container 仍然存在於硬碟，必須手動使用 <code>docker rm</code> 刪除 container，但若使用 <code>docker-compose down</code>，會一併從硬碟刪除 container</p>
</blockquote>
<p><img src="/images/netcore/docker-dev/DockerDev009.png" alt="DockerDev009"></p>
<h2 id="在_Container_外測試">在 Container 外測試</h2><hr>
<p>直接在 container 外部使用 <code>docker run</code> 執行 container，並在 container 內執行 <code>dotnet run</code>。</p>
<h3 id="建立_Bash">建立 Bash</h3><p><strong>RunDocker.sh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">HOST_DIR=~/Code/CSharp/MyConsole</span><br><span class="line"></span><br><span class="line">docker run --rm -v <span class="variable">$HOST_DIR</span>:/home -w /home microsoft/dotnet dotnet run</span><br></pre></td></tr></table></figure>
<p>第 2 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST_DIR=~/Code/CSharp/MyConsole</span><br></pre></td></tr></table></figure>
<p>設定 Host OS 與 container 所共享的目錄，將來 Host OS 所分享的目錄，相當於 container 內的 <code>/home</code> 目錄。</p>
<p>由於每個人 Host OS 要分享的目錄都不一樣，因此設定成 <code>HOST_DIR</code> 變數，可自行設定。</p>
<p>第 4 行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v <span class="variable">$HOST_DIR</span>:/home -w /home microsoft/dotnet dotnet run</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker run</code> 直接執行 container。</p>
<ul>
<li><strong>–rm</strong>：執行完 app 之後立即刪除 container，避免執行完的 container 留在硬碟內，除了佔空間，日後還必須手動刪除</li>
<li><strong>-v</strong>：<code>v</code> olumn，設定 Host OS 與 container 所共享的目錄，<code>:</code> 左側為 Host OS 目錄，右側為 container 內目錄</li>
<li><strong>-w</strong>：<code>w</code> orking directory，避免自己下 <code>cd</code> 指令切換目錄</li>
<li><strong>microsoft/dotnet</strong>：Microsoft 官方最新的 .NET Core Docker image</li>
<li><strong>dotnet run</strong>：container 建立後，要在 container 內執行的指令就是 <code>dotnet run</code></li>
</ul>
<p><img src="/images/netcore/docker-dev/DockerDev010.png" alt="DockerDev010"></p>
<h3 id="設定執行權限">設定執行權限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">～MyConsole $ chmod +x RunDocker.sh</span><br></pre></td></tr></table></figure>
<p>使用 <code>chmod</code> 讓  <code>RunDocker.sh</code> 能夠有 <code>被執行</code> 權限。</p>
<p><img src="/images/netcore/docker-dev/DockerDev011.png" alt="DockerDev011"></p>
<h3 id="執行_Bash">執行 Bash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyConsole $ ./RunDocker.sh</span><br></pre></td></tr></table></figure>
<p>執行 <code>RunDocker.sh</code> ，建立 container，並在 container 內執行 app。</p>
<p><img src="/images/netcore/docker-dev/DockerDev012.png" alt="DockerDev012"></p>
<p>目前是同一份 code 在 Docker 內執行，由於 Docker 內就是 Linux，因此可藉由 Docker 在開發階段，測試 app 是否真正能跑在 Linux。</p>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>.NET Core 雖然號稱跨平台，但也不保證真正執行在 Linux 沒問題，透過 Docker，我們在開發階段就能很簡單測試 Linux 環境是否正常</li>
<li>第一種方式比較接近傳統 VM，直接進 container 內測試 app</li>
<li>第二種方式比較接近正統 Docker，是直接使用 <code>docker run</code> 執行 container 內的 app</li>
<li>以上兩種方式都只適合開發階段測試用，若要上 production，則要將 .NET Core App 整個包進 Docker image，將以專文另外討論之</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/netcore-dockerdev" target="_blank" rel="external">GitHub</a> 上找到</p>
]]></content>
    <summary type="html">
    <![CDATA[在開發階段可即時測試 Linux 環境]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="Docker" scheme="https://oomusou.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何以 .NET Core CLI 建立並上傳 NuGet 套件 ?]]></title>
    <link href="https://oomusou.io/netcore/nuget/create/"/>
    <id>https://oomusou.io/netcore/nuget/create/</id>
    <published>2018-05-24T12:23:43.000Z</published>
    <updated>2018-06-07T09:54:20.750Z</updated>
    <content type="html"><![CDATA[<p>.NET Core 一樣使用 NuGet 管理 package，本文將使用 VS Code 與 .NET Core CLI 建立 package，並上傳到 NuGet server。</p>
<a id="more"></a>
<h2 id="Version">Version</h2><hr>
<p>macOS High Sierra 10.13.3<br>.NET Core 2.0.7<br>VS Code 1.23.1</p>
<h2 id="建立_Class_Library">建立 Class Library</h2><hr>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet <span class="keyword">new</span> classlib -o MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet new</code> 建立 project。</p>
<ul>
<li><strong>classlib</strong>：建立 class library 類型專案</li>
<li><strong>-o</strong>：<code>o</code> utput，建立在 <code>MyCalculator</code> 目錄下</li>
</ul>
<p><img src="/images/netcore/nuget/create/nuget000.png" alt="nuget000"></p>
<h2 id="使用_VS_Code_開啟專案">使用 VS Code 開啟專案</h2><hr>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="tag">code</span> MyClassLib</span><br></pre></td></tr></table></figure>
<p>使用 <code>code</code> 執行 VS Code，後面接欲開啟的 <code>目錄名稱</code>。</p>
<p><img src="/images/netcore/nuget/create/nuget001.png" alt="nuget001"></p>
<h2 id="編輯_MyCalculator">編輯 MyCalculator</h2><hr>
<p><strong>MyCalculator.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyClassLib</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCalculator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立 <code>MyCalculator</code> class，有只有一個 <code>Sum()</code> method。</p>
<p><img src="/images/netcore/nuget/create/nuget002.png" alt="nuget002"></p>
<h2 id="新增_Package_Metadata">新增 Package Metadata</h2><hr>
<p><strong>MyClassLib.csproj</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Project</span> <span class="attribute">Sdk</span>=<span class="value">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">TargetFramework</span>&gt;</span>netstandard2.0<span class="tag">&lt;/<span class="title">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">PackageId</span>&gt;</span>OomusouCalculator<span class="tag">&lt;/<span class="title">PackageId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="title">Version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Authors</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Company</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Company</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">GeneratePackageOnBuild</span>&gt;</span>true<span class="tag">&lt;/<span class="title">GeneratePackageOnBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Content</span> <span class="attribute">Include</span>=<span class="value">"MyCalculator.cs"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第 5 行</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">PackageId</span>&gt;</span>OomusouCalculator<span class="tag">&lt;/<span class="title">PackageId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="title">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Authors</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Authors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Company</span>&gt;</span>Oomusou<span class="tag">&lt;/<span class="title">Company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">GeneratePackageOnBuild</span>&gt;</span>true<span class="tag">&lt;/<span class="title">GeneratePackageOnBuild</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每個 NuGet package 除了 <code>.nupkg</code> 外，另外還有 <code>.nuspec</code>，用來描述 package 資訊與其所需的 dependency，而這些資訊都來自於 <code>.csproj</code>。</p>
<ul>
<li><strong>PackageId</strong>：Package 唯一識別的 id，若是要發佈到 <code>nuget.org</code>，則必須是 <code>nuget.org</code> 唯一；若是發佈到公司內部自己的 NuGet server，則必須是該 server 的唯一</li>
<li><strong>Version</strong>：套件版本編號</li>
<li><strong>Authors</strong>：套件作者</li>
<li><strong>Company</strong>：套件公司</li>
<li><strong>GeneratePackageOnBuild</strong>：當 <code>dotnet build</code> 時，自動執行 <code>dotnet pack</code> 建立 <code>.nupkg</code></li>
</ul>
<p><img src="/images/netcore/nuget/create/nuget003.png" alt="nuget003"></p>
<h2 id="編譯同時建置_Package">編譯同時建置 Package</h2><hr>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject $ dotnet <span class="keyword">build </span>-c Release</span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet build</code> 編譯專案。</p>
<ul>
<li><strong>-c</strong>：<code>c</code> onfiguration，預設 <code>dotnet build</code> 是以 <code>Debug</code> 模式編譯，若要以 <code>Release</code> 編譯，需要搭配 <code>-c</code> 參數</li>
</ul>
<blockquote>
<p>由於剛剛已經在 <code>.csproj</code> 增加 <code>GeneratePackageOnBuild</code>，所以只要 <code>dotnet build</code> 就會一起產生 <code>.nupkg</code></p>
</blockquote>
<p><img src="/images/netcore/nuget/create/nuget004.png" alt="nuget004"></p>
<h2 id="獲得_API_Key">獲得 API Key</h2><hr>
<p>NuGet Package 分兩種，一種是對外公開的 package，一種是公司內部用的 package，本文先討論公開的 NuGet package。</p>
<p>要發佈到 NuGet server，必須知道兩件事：</p>
<ol>
<li><strong>API Key</strong>：相當於你個人資訊憑證</li>
<li><strong>NuGet server URL</strong>：NuGet server 位址</li>
</ol>
<p><img src="/images/netcore/nuget/create/nuget005.png" alt="nuget005"></p>
<ol>
<li>到 <code>https://www.nuget.org</code>，這是公開 NuGet package 的集散地</li>
<li>以個人帳號 Sign in，將 Microsoft 帳號登入</li>
</ol>
<p><img src="/images/netcore/nuget/create/nuget006.png" alt="nuget006"></p>
<ol>
<li>右上角會顯示登入帳號</li>
<li>選擇 <code>API Keys</code></li>
</ol>
<p><img src="/images/netcore/nuget/create/nuget007.png" alt="nuget007"></p>
<ol>
<li>按 <code>Create</code> 建立 API Key</li>
<li><strong>Key Name</strong>：這是給自己識別的名字，代表某個 API Key</li>
<li><strong>Glob Patten</strong>：適用的 pattern，<code>*</code> 代表適用所有 package</li>
</ol>
<p>最後按 <code>Create</code> 建立 API Key。</p>
<p><img src="/images/netcore/nuget/create/nuget008.png" alt="nuget008"></p>
<ol>
<li>建立新的 API Key 成功</li>
<li>按 <code>Copy</code> 將 API Key 複製到 clipboard</li>
</ol>
<h2 id="發佈_Package">發佈 Package</h2><hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/MyProject/bin/Release $ dotnet nuget push OomusouCalculator<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>.nupkg -k oy2mskdm2daf7i7wersaxtwvssc6oebutgtywbhljl5tcw -s https:<span class="comment">//api.nuget.org/v3/index.json</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>dotnet nuget push</code> 發佈 NuGet package 到公開的 NuGet server。</p>
<ul>
<li><strong>-k</strong>：將剛剛複製的 API Key 貼上</li>
<li><strong>-s</strong>：公開 NuGet server 的網址為 <code>https://api.nuget.org/v3/index.json</code></li>
</ul>
<blockquote>
<p>API Key 請用自己的，上面的 API Key 只是 <code>示意</code> 用</p>
</blockquote>
<p><img src="/images/netcore/nuget/create/nuget009.png" alt="nuget009"></p>
<ol>
<li>將目錄切到 <code>.nupkg</code> 所在的 <code>bin/Release</code> 目錄下</li>
<li>使用 <code>dotnet nuget push</code> 將 <code>.nupkg</code> 上傳到公開的 NuGet server</li>
</ol>
<blockquote>
<p>常見的 <code>dotnet nuget push</code> 失敗，都在於 <code>PackageId</code> 重複，請記得取一個 <code>不重複的</code> PackageId</p>
</blockquote>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>上傳 NuGet package 到 NuGet server 已經變得非常簡單，在 <code>dotnet build</code> 已經順便 <code>dotnet pack</code>，配合 <code>dotnet nuget push</code> 即可上傳到公開的 NuGet server</li>
</ul>
<h2 id="Reference">Reference</h2><hr>
<p><a href="https://docs.microsoft.com/en-us/" target="_blank" rel="external">Microsoft Docs</a>, <a href="https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli" target="_blank" rel="external">Quickstart: Create and publish a package (dotnet CLI)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[建立 NuGet 套件越來越簡單]]>
    
    </summary>
    
      <category term=".NET Core" scheme="https://oomusou.io/tags/NET-Core/"/>
    
      <category term="NuGet" scheme="https://oomusou.io/tags/NuGet/"/>
    
  </entry>
  
</feed>
